// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kasuboski/mediaz/pkg/tmdb (interfaces: ITmdb)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_itmdb.go github.com/kasuboski/mediaz/pkg/tmdb ITmdb
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	tmdb "github.com/kasuboski/mediaz/pkg/tmdb"
	gomock "go.uber.org/mock/gomock"
)

// MockITmdb is a mock of ITmdb interface.
type MockITmdb struct {
	ctrl     *gomock.Controller
	recorder *MockITmdbMockRecorder
}

// MockITmdbMockRecorder is the mock recorder for MockITmdb.
type MockITmdbMockRecorder struct {
	mock *MockITmdb
}

// NewMockITmdb creates a new mock instance.
func NewMockITmdb(ctrl *gomock.Controller) *MockITmdb {
	mock := &MockITmdb{ctrl: ctrl}
	mock.recorder = &MockITmdbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITmdb) EXPECT() *MockITmdbMockRecorder {
	return m.recorder
}

// AccountAddFavorite mocks base method.
func (m *MockITmdb) AccountAddFavorite(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountAddFavoriteParams, arg3 tmdb.AccountAddFavoriteJSONRequestBody, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountAddFavorite", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountAddFavorite indicates an expected call of AccountAddFavorite.
func (mr *MockITmdbMockRecorder) AccountAddFavorite(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAddFavorite", reflect.TypeOf((*MockITmdb)(nil).AccountAddFavorite), varargs...)
}

// AccountAddFavoriteWithBody mocks base method.
func (m *MockITmdb) AccountAddFavoriteWithBody(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountAddFavoriteParams, arg3 string, arg4 io.Reader, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountAddFavoriteWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountAddFavoriteWithBody indicates an expected call of AccountAddFavoriteWithBody.
func (mr *MockITmdbMockRecorder) AccountAddFavoriteWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAddFavoriteWithBody", reflect.TypeOf((*MockITmdb)(nil).AccountAddFavoriteWithBody), varargs...)
}

// AccountAddToWatchlist mocks base method.
func (m *MockITmdb) AccountAddToWatchlist(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountAddToWatchlistParams, arg3 tmdb.AccountAddToWatchlistJSONRequestBody, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountAddToWatchlist", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountAddToWatchlist indicates an expected call of AccountAddToWatchlist.
func (mr *MockITmdbMockRecorder) AccountAddToWatchlist(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAddToWatchlist", reflect.TypeOf((*MockITmdb)(nil).AccountAddToWatchlist), varargs...)
}

// AccountAddToWatchlistWithBody mocks base method.
func (m *MockITmdb) AccountAddToWatchlistWithBody(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountAddToWatchlistParams, arg3 string, arg4 io.Reader, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountAddToWatchlistWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountAddToWatchlistWithBody indicates an expected call of AccountAddToWatchlistWithBody.
func (mr *MockITmdbMockRecorder) AccountAddToWatchlistWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountAddToWatchlistWithBody", reflect.TypeOf((*MockITmdb)(nil).AccountAddToWatchlistWithBody), varargs...)
}

// AccountDetails mocks base method.
func (m *MockITmdb) AccountDetails(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountDetailsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountDetails indicates an expected call of AccountDetails.
func (mr *MockITmdbMockRecorder) AccountDetails(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountDetails", reflect.TypeOf((*MockITmdb)(nil).AccountDetails), varargs...)
}

// AccountFavoriteTv mocks base method.
func (m *MockITmdb) AccountFavoriteTv(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountFavoriteTvParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountFavoriteTv", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountFavoriteTv indicates an expected call of AccountFavoriteTv.
func (mr *MockITmdbMockRecorder) AccountFavoriteTv(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountFavoriteTv", reflect.TypeOf((*MockITmdb)(nil).AccountFavoriteTv), varargs...)
}

// AccountGetFavorites mocks base method.
func (m *MockITmdb) AccountGetFavorites(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountGetFavoritesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountGetFavorites", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGetFavorites indicates an expected call of AccountGetFavorites.
func (mr *MockITmdbMockRecorder) AccountGetFavorites(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGetFavorites", reflect.TypeOf((*MockITmdb)(nil).AccountGetFavorites), varargs...)
}

// AccountLists mocks base method.
func (m *MockITmdb) AccountLists(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountListsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountLists", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountLists indicates an expected call of AccountLists.
func (mr *MockITmdbMockRecorder) AccountLists(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountLists", reflect.TypeOf((*MockITmdb)(nil).AccountLists), varargs...)
}

// AccountRatedMovies mocks base method.
func (m *MockITmdb) AccountRatedMovies(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountRatedMoviesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountRatedMovies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountRatedMovies indicates an expected call of AccountRatedMovies.
func (mr *MockITmdbMockRecorder) AccountRatedMovies(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRatedMovies", reflect.TypeOf((*MockITmdb)(nil).AccountRatedMovies), varargs...)
}

// AccountRatedTv mocks base method.
func (m *MockITmdb) AccountRatedTv(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountRatedTvParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountRatedTv", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountRatedTv indicates an expected call of AccountRatedTv.
func (mr *MockITmdbMockRecorder) AccountRatedTv(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRatedTv", reflect.TypeOf((*MockITmdb)(nil).AccountRatedTv), varargs...)
}

// AccountRatedTvEpisodes mocks base method.
func (m *MockITmdb) AccountRatedTvEpisodes(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountRatedTvEpisodesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountRatedTvEpisodes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountRatedTvEpisodes indicates an expected call of AccountRatedTvEpisodes.
func (mr *MockITmdbMockRecorder) AccountRatedTvEpisodes(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRatedTvEpisodes", reflect.TypeOf((*MockITmdb)(nil).AccountRatedTvEpisodes), varargs...)
}

// AccountWatchlistMovies mocks base method.
func (m *MockITmdb) AccountWatchlistMovies(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountWatchlistMoviesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountWatchlistMovies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountWatchlistMovies indicates an expected call of AccountWatchlistMovies.
func (mr *MockITmdbMockRecorder) AccountWatchlistMovies(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountWatchlistMovies", reflect.TypeOf((*MockITmdb)(nil).AccountWatchlistMovies), varargs...)
}

// AccountWatchlistTv mocks base method.
func (m *MockITmdb) AccountWatchlistTv(arg0 context.Context, arg1 int32, arg2 *tmdb.AccountWatchlistTvParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountWatchlistTv", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountWatchlistTv indicates an expected call of AccountWatchlistTv.
func (mr *MockITmdbMockRecorder) AccountWatchlistTv(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountWatchlistTv", reflect.TypeOf((*MockITmdb)(nil).AccountWatchlistTv), varargs...)
}

// AlternativeNamesCopy mocks base method.
func (m *MockITmdb) AlternativeNamesCopy(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AlternativeNamesCopy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlternativeNamesCopy indicates an expected call of AlternativeNamesCopy.
func (mr *MockITmdbMockRecorder) AlternativeNamesCopy(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlternativeNamesCopy", reflect.TypeOf((*MockITmdb)(nil).AlternativeNamesCopy), varargs...)
}

// AuthenticationCreateGuestSession mocks base method.
func (m *MockITmdb) AuthenticationCreateGuestSession(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateGuestSession", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateGuestSession indicates an expected call of AuthenticationCreateGuestSession.
func (mr *MockITmdbMockRecorder) AuthenticationCreateGuestSession(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateGuestSession", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateGuestSession), varargs...)
}

// AuthenticationCreateRequestToken mocks base method.
func (m *MockITmdb) AuthenticationCreateRequestToken(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateRequestToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateRequestToken indicates an expected call of AuthenticationCreateRequestToken.
func (mr *MockITmdbMockRecorder) AuthenticationCreateRequestToken(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateRequestToken", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateRequestToken), varargs...)
}

// AuthenticationCreateSession mocks base method.
func (m *MockITmdb) AuthenticationCreateSession(arg0 context.Context, arg1 tmdb.AuthenticationCreateSessionJSONRequestBody, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateSession", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateSession indicates an expected call of AuthenticationCreateSession.
func (mr *MockITmdbMockRecorder) AuthenticationCreateSession(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateSession", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateSession), varargs...)
}

// AuthenticationCreateSessionFromLogin mocks base method.
func (m *MockITmdb) AuthenticationCreateSessionFromLogin(arg0 context.Context, arg1 tmdb.AuthenticationCreateSessionFromLoginJSONRequestBody, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateSessionFromLogin", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateSessionFromLogin indicates an expected call of AuthenticationCreateSessionFromLogin.
func (mr *MockITmdbMockRecorder) AuthenticationCreateSessionFromLogin(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateSessionFromLogin", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateSessionFromLogin), varargs...)
}

// AuthenticationCreateSessionFromLoginWithBody mocks base method.
func (m *MockITmdb) AuthenticationCreateSessionFromLoginWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateSessionFromLoginWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateSessionFromLoginWithBody indicates an expected call of AuthenticationCreateSessionFromLoginWithBody.
func (mr *MockITmdbMockRecorder) AuthenticationCreateSessionFromLoginWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateSessionFromLoginWithBody", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateSessionFromLoginWithBody), varargs...)
}

// AuthenticationCreateSessionFromV4Token mocks base method.
func (m *MockITmdb) AuthenticationCreateSessionFromV4Token(arg0 context.Context, arg1 tmdb.AuthenticationCreateSessionFromV4TokenJSONRequestBody, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateSessionFromV4Token", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateSessionFromV4Token indicates an expected call of AuthenticationCreateSessionFromV4Token.
func (mr *MockITmdbMockRecorder) AuthenticationCreateSessionFromV4Token(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateSessionFromV4Token", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateSessionFromV4Token), varargs...)
}

// AuthenticationCreateSessionFromV4TokenWithBody mocks base method.
func (m *MockITmdb) AuthenticationCreateSessionFromV4TokenWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateSessionFromV4TokenWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateSessionFromV4TokenWithBody indicates an expected call of AuthenticationCreateSessionFromV4TokenWithBody.
func (mr *MockITmdbMockRecorder) AuthenticationCreateSessionFromV4TokenWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateSessionFromV4TokenWithBody", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateSessionFromV4TokenWithBody), varargs...)
}

// AuthenticationCreateSessionWithBody mocks base method.
func (m *MockITmdb) AuthenticationCreateSessionWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationCreateSessionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationCreateSessionWithBody indicates an expected call of AuthenticationCreateSessionWithBody.
func (mr *MockITmdbMockRecorder) AuthenticationCreateSessionWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationCreateSessionWithBody", reflect.TypeOf((*MockITmdb)(nil).AuthenticationCreateSessionWithBody), varargs...)
}

// AuthenticationDeleteSession mocks base method.
func (m *MockITmdb) AuthenticationDeleteSession(arg0 context.Context, arg1 tmdb.AuthenticationDeleteSessionJSONRequestBody, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationDeleteSession", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationDeleteSession indicates an expected call of AuthenticationDeleteSession.
func (mr *MockITmdbMockRecorder) AuthenticationDeleteSession(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationDeleteSession", reflect.TypeOf((*MockITmdb)(nil).AuthenticationDeleteSession), varargs...)
}

// AuthenticationDeleteSessionWithBody mocks base method.
func (m *MockITmdb) AuthenticationDeleteSessionWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationDeleteSessionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationDeleteSessionWithBody indicates an expected call of AuthenticationDeleteSessionWithBody.
func (mr *MockITmdbMockRecorder) AuthenticationDeleteSessionWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationDeleteSessionWithBody", reflect.TypeOf((*MockITmdb)(nil).AuthenticationDeleteSessionWithBody), varargs...)
}

// AuthenticationValidateKey mocks base method.
func (m *MockITmdb) AuthenticationValidateKey(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticationValidateKey", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticationValidateKey indicates an expected call of AuthenticationValidateKey.
func (mr *MockITmdbMockRecorder) AuthenticationValidateKey(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationValidateKey", reflect.TypeOf((*MockITmdb)(nil).AuthenticationValidateKey), varargs...)
}

// CertificationMovieList mocks base method.
func (m *MockITmdb) CertificationMovieList(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CertificationMovieList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertificationMovieList indicates an expected call of CertificationMovieList.
func (mr *MockITmdbMockRecorder) CertificationMovieList(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificationMovieList", reflect.TypeOf((*MockITmdb)(nil).CertificationMovieList), varargs...)
}

// CertificationsTvList mocks base method.
func (m *MockITmdb) CertificationsTvList(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CertificationsTvList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertificationsTvList indicates an expected call of CertificationsTvList.
func (mr *MockITmdbMockRecorder) CertificationsTvList(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificationsTvList", reflect.TypeOf((*MockITmdb)(nil).CertificationsTvList), varargs...)
}

// ChangesMovieList mocks base method.
func (m *MockITmdb) ChangesMovieList(arg0 context.Context, arg1 *tmdb.ChangesMovieListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangesMovieList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangesMovieList indicates an expected call of ChangesMovieList.
func (mr *MockITmdbMockRecorder) ChangesMovieList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesMovieList", reflect.TypeOf((*MockITmdb)(nil).ChangesMovieList), varargs...)
}

// ChangesPeopleList mocks base method.
func (m *MockITmdb) ChangesPeopleList(arg0 context.Context, arg1 *tmdb.ChangesPeopleListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangesPeopleList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangesPeopleList indicates an expected call of ChangesPeopleList.
func (mr *MockITmdbMockRecorder) ChangesPeopleList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesPeopleList", reflect.TypeOf((*MockITmdb)(nil).ChangesPeopleList), varargs...)
}

// ChangesTvList mocks base method.
func (m *MockITmdb) ChangesTvList(arg0 context.Context, arg1 *tmdb.ChangesTvListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangesTvList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangesTvList indicates an expected call of ChangesTvList.
func (mr *MockITmdbMockRecorder) ChangesTvList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangesTvList", reflect.TypeOf((*MockITmdb)(nil).ChangesTvList), varargs...)
}

// CollectionDetails mocks base method.
func (m *MockITmdb) CollectionDetails(arg0 context.Context, arg1 int32, arg2 *tmdb.CollectionDetailsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectionDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionDetails indicates an expected call of CollectionDetails.
func (mr *MockITmdbMockRecorder) CollectionDetails(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionDetails", reflect.TypeOf((*MockITmdb)(nil).CollectionDetails), varargs...)
}

// CollectionImages mocks base method.
func (m *MockITmdb) CollectionImages(arg0 context.Context, arg1 int32, arg2 *tmdb.CollectionImagesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectionImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionImages indicates an expected call of CollectionImages.
func (mr *MockITmdbMockRecorder) CollectionImages(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionImages", reflect.TypeOf((*MockITmdb)(nil).CollectionImages), varargs...)
}

// CollectionTranslations mocks base method.
func (m *MockITmdb) CollectionTranslations(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectionTranslations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionTranslations indicates an expected call of CollectionTranslations.
func (mr *MockITmdbMockRecorder) CollectionTranslations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionTranslations", reflect.TypeOf((*MockITmdb)(nil).CollectionTranslations), varargs...)
}

// CompanyAlternativeNames mocks base method.
func (m *MockITmdb) CompanyAlternativeNames(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompanyAlternativeNames", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyAlternativeNames indicates an expected call of CompanyAlternativeNames.
func (mr *MockITmdbMockRecorder) CompanyAlternativeNames(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyAlternativeNames", reflect.TypeOf((*MockITmdb)(nil).CompanyAlternativeNames), varargs...)
}

// CompanyDetails mocks base method.
func (m *MockITmdb) CompanyDetails(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompanyDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyDetails indicates an expected call of CompanyDetails.
func (mr *MockITmdbMockRecorder) CompanyDetails(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyDetails", reflect.TypeOf((*MockITmdb)(nil).CompanyDetails), varargs...)
}

// CompanyImages mocks base method.
func (m *MockITmdb) CompanyImages(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompanyImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyImages indicates an expected call of CompanyImages.
func (mr *MockITmdbMockRecorder) CompanyImages(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyImages", reflect.TypeOf((*MockITmdb)(nil).CompanyImages), varargs...)
}

// ConfigurationCountries mocks base method.
func (m *MockITmdb) ConfigurationCountries(arg0 context.Context, arg1 *tmdb.ConfigurationCountriesParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigurationCountries", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationCountries indicates an expected call of ConfigurationCountries.
func (mr *MockITmdbMockRecorder) ConfigurationCountries(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationCountries", reflect.TypeOf((*MockITmdb)(nil).ConfigurationCountries), varargs...)
}

// ConfigurationDetails mocks base method.
func (m *MockITmdb) ConfigurationDetails(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigurationDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationDetails indicates an expected call of ConfigurationDetails.
func (mr *MockITmdbMockRecorder) ConfigurationDetails(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationDetails", reflect.TypeOf((*MockITmdb)(nil).ConfigurationDetails), varargs...)
}

// ConfigurationJobs mocks base method.
func (m *MockITmdb) ConfigurationJobs(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigurationJobs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationJobs indicates an expected call of ConfigurationJobs.
func (mr *MockITmdbMockRecorder) ConfigurationJobs(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationJobs", reflect.TypeOf((*MockITmdb)(nil).ConfigurationJobs), varargs...)
}

// ConfigurationLanguages mocks base method.
func (m *MockITmdb) ConfigurationLanguages(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigurationLanguages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationLanguages indicates an expected call of ConfigurationLanguages.
func (mr *MockITmdbMockRecorder) ConfigurationLanguages(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationLanguages", reflect.TypeOf((*MockITmdb)(nil).ConfigurationLanguages), varargs...)
}

// ConfigurationPrimaryTranslations mocks base method.
func (m *MockITmdb) ConfigurationPrimaryTranslations(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigurationPrimaryTranslations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationPrimaryTranslations indicates an expected call of ConfigurationPrimaryTranslations.
func (mr *MockITmdbMockRecorder) ConfigurationPrimaryTranslations(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationPrimaryTranslations", reflect.TypeOf((*MockITmdb)(nil).ConfigurationPrimaryTranslations), varargs...)
}

// ConfigurationTimezones mocks base method.
func (m *MockITmdb) ConfigurationTimezones(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigurationTimezones", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationTimezones indicates an expected call of ConfigurationTimezones.
func (mr *MockITmdbMockRecorder) ConfigurationTimezones(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationTimezones", reflect.TypeOf((*MockITmdb)(nil).ConfigurationTimezones), varargs...)
}

// CreditDetails mocks base method.
func (m *MockITmdb) CreditDetails(arg0 context.Context, arg1 string, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreditDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditDetails indicates an expected call of CreditDetails.
func (mr *MockITmdbMockRecorder) CreditDetails(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditDetails", reflect.TypeOf((*MockITmdb)(nil).CreditDetails), varargs...)
}

// DetailsCopy mocks base method.
func (m *MockITmdb) DetailsCopy(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetailsCopy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailsCopy indicates an expected call of DetailsCopy.
func (mr *MockITmdbMockRecorder) DetailsCopy(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailsCopy", reflect.TypeOf((*MockITmdb)(nil).DetailsCopy), varargs...)
}

// DiscoverMovie mocks base method.
func (m *MockITmdb) DiscoverMovie(arg0 context.Context, arg1 *tmdb.DiscoverMovieParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DiscoverMovie", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverMovie indicates an expected call of DiscoverMovie.
func (mr *MockITmdbMockRecorder) DiscoverMovie(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverMovie", reflect.TypeOf((*MockITmdb)(nil).DiscoverMovie), varargs...)
}

// DiscoverTv mocks base method.
func (m *MockITmdb) DiscoverTv(arg0 context.Context, arg1 *tmdb.DiscoverTvParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DiscoverTv", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverTv indicates an expected call of DiscoverTv.
func (mr *MockITmdbMockRecorder) DiscoverTv(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverTv", reflect.TypeOf((*MockITmdb)(nil).DiscoverTv), varargs...)
}

// FindByID mocks base method.
func (m *MockITmdb) FindByID(arg0 context.Context, arg1 string, arg2 *tmdb.FindByIDParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockITmdbMockRecorder) FindByID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockITmdb)(nil).FindByID), varargs...)
}

// GenreMovieList mocks base method.
func (m *MockITmdb) GenreMovieList(arg0 context.Context, arg1 *tmdb.GenreMovieListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenreMovieList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenreMovieList indicates an expected call of GenreMovieList.
func (mr *MockITmdbMockRecorder) GenreMovieList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenreMovieList", reflect.TypeOf((*MockITmdb)(nil).GenreMovieList), varargs...)
}

// GenreTvList mocks base method.
func (m *MockITmdb) GenreTvList(arg0 context.Context, arg1 *tmdb.GenreTvListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenreTvList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenreTvList indicates an expected call of GenreTvList.
func (mr *MockITmdbMockRecorder) GenreTvList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenreTvList", reflect.TypeOf((*MockITmdb)(nil).GenreTvList), varargs...)
}

// GetMovieDetails mocks base method.
func (m *MockITmdb) GetMovieDetails(arg0 context.Context, arg1 int) (*tmdb.MediaDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetails", arg0, arg1)
	ret0, _ := ret[0].(*tmdb.MediaDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetails indicates an expected call of GetMovieDetails.
func (mr *MockITmdbMockRecorder) GetMovieDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetails", reflect.TypeOf((*MockITmdb)(nil).GetMovieDetails), arg0, arg1)
}

// GetSeriesDetails mocks base method.
func (m *MockITmdb) GetSeriesDetails(arg0 context.Context, arg1 int) (*tmdb.SeriesDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeriesDetails", arg0, arg1)
	ret0, _ := ret[0].(*tmdb.SeriesDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesDetails indicates an expected call of GetSeriesDetails.
func (mr *MockITmdbMockRecorder) GetSeriesDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesDetails", reflect.TypeOf((*MockITmdb)(nil).GetSeriesDetails), arg0, arg1)
}

// GuestSessionRatedMovies mocks base method.
func (m *MockITmdb) GuestSessionRatedMovies(arg0 context.Context, arg1 string, arg2 *tmdb.GuestSessionRatedMoviesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuestSessionRatedMovies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuestSessionRatedMovies indicates an expected call of GuestSessionRatedMovies.
func (mr *MockITmdbMockRecorder) GuestSessionRatedMovies(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestSessionRatedMovies", reflect.TypeOf((*MockITmdb)(nil).GuestSessionRatedMovies), varargs...)
}

// GuestSessionRatedTv mocks base method.
func (m *MockITmdb) GuestSessionRatedTv(arg0 context.Context, arg1 string, arg2 *tmdb.GuestSessionRatedTvParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuestSessionRatedTv", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuestSessionRatedTv indicates an expected call of GuestSessionRatedTv.
func (mr *MockITmdbMockRecorder) GuestSessionRatedTv(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestSessionRatedTv", reflect.TypeOf((*MockITmdb)(nil).GuestSessionRatedTv), varargs...)
}

// GuestSessionRatedTvEpisodes mocks base method.
func (m *MockITmdb) GuestSessionRatedTvEpisodes(arg0 context.Context, arg1 string, arg2 *tmdb.GuestSessionRatedTvEpisodesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuestSessionRatedTvEpisodes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuestSessionRatedTvEpisodes indicates an expected call of GuestSessionRatedTvEpisodes.
func (mr *MockITmdbMockRecorder) GuestSessionRatedTvEpisodes(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestSessionRatedTvEpisodes", reflect.TypeOf((*MockITmdb)(nil).GuestSessionRatedTvEpisodes), varargs...)
}

// KeywordDetails mocks base method.
func (m *MockITmdb) KeywordDetails(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KeywordDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeywordDetails indicates an expected call of KeywordDetails.
func (mr *MockITmdbMockRecorder) KeywordDetails(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeywordDetails", reflect.TypeOf((*MockITmdb)(nil).KeywordDetails), varargs...)
}

// KeywordMovies mocks base method.
func (m *MockITmdb) KeywordMovies(arg0 context.Context, arg1 string, arg2 *tmdb.KeywordMoviesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KeywordMovies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeywordMovies indicates an expected call of KeywordMovies.
func (mr *MockITmdbMockRecorder) KeywordMovies(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeywordMovies", reflect.TypeOf((*MockITmdb)(nil).KeywordMovies), varargs...)
}

// ListAddMovie mocks base method.
func (m *MockITmdb) ListAddMovie(arg0 context.Context, arg1 int32, arg2 *tmdb.ListAddMovieParams, arg3 tmdb.ListAddMovieJSONRequestBody, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAddMovie", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddMovie indicates an expected call of ListAddMovie.
func (mr *MockITmdbMockRecorder) ListAddMovie(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddMovie", reflect.TypeOf((*MockITmdb)(nil).ListAddMovie), varargs...)
}

// ListAddMovieWithBody mocks base method.
func (m *MockITmdb) ListAddMovieWithBody(arg0 context.Context, arg1 int32, arg2 *tmdb.ListAddMovieParams, arg3 string, arg4 io.Reader, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAddMovieWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddMovieWithBody indicates an expected call of ListAddMovieWithBody.
func (mr *MockITmdbMockRecorder) ListAddMovieWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddMovieWithBody", reflect.TypeOf((*MockITmdb)(nil).ListAddMovieWithBody), varargs...)
}

// ListCheckItemStatus mocks base method.
func (m *MockITmdb) ListCheckItemStatus(arg0 context.Context, arg1 int32, arg2 *tmdb.ListCheckItemStatusParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckItemStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckItemStatus indicates an expected call of ListCheckItemStatus.
func (mr *MockITmdbMockRecorder) ListCheckItemStatus(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckItemStatus", reflect.TypeOf((*MockITmdb)(nil).ListCheckItemStatus), varargs...)
}

// ListClear mocks base method.
func (m *MockITmdb) ListClear(arg0 context.Context, arg1 int32, arg2 *tmdb.ListClearParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClear", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClear indicates an expected call of ListClear.
func (mr *MockITmdbMockRecorder) ListClear(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClear", reflect.TypeOf((*MockITmdb)(nil).ListClear), varargs...)
}

// ListCreate mocks base method.
func (m *MockITmdb) ListCreate(arg0 context.Context, arg1 *tmdb.ListCreateParams, arg2 tmdb.ListCreateJSONRequestBody, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCreate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCreate indicates an expected call of ListCreate.
func (mr *MockITmdbMockRecorder) ListCreate(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCreate", reflect.TypeOf((*MockITmdb)(nil).ListCreate), varargs...)
}

// ListCreateWithBody mocks base method.
func (m *MockITmdb) ListCreateWithBody(arg0 context.Context, arg1 *tmdb.ListCreateParams, arg2 string, arg3 io.Reader, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCreateWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCreateWithBody indicates an expected call of ListCreateWithBody.
func (mr *MockITmdbMockRecorder) ListCreateWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCreateWithBody", reflect.TypeOf((*MockITmdb)(nil).ListCreateWithBody), varargs...)
}

// ListDelete mocks base method.
func (m *MockITmdb) ListDelete(arg0 context.Context, arg1 int32, arg2 *tmdb.ListDeleteParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelete", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelete indicates an expected call of ListDelete.
func (mr *MockITmdbMockRecorder) ListDelete(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelete", reflect.TypeOf((*MockITmdb)(nil).ListDelete), varargs...)
}

// ListDetails mocks base method.
func (m *MockITmdb) ListDetails(arg0 context.Context, arg1 int32, arg2 *tmdb.ListDetailsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDetails indicates an expected call of ListDetails.
func (mr *MockITmdbMockRecorder) ListDetails(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetails", reflect.TypeOf((*MockITmdb)(nil).ListDetails), varargs...)
}

// ListRemoveMovie mocks base method.
func (m *MockITmdb) ListRemoveMovie(arg0 context.Context, arg1 int32, arg2 *tmdb.ListRemoveMovieParams, arg3 tmdb.ListRemoveMovieJSONRequestBody, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRemoveMovie", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoveMovie indicates an expected call of ListRemoveMovie.
func (mr *MockITmdbMockRecorder) ListRemoveMovie(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoveMovie", reflect.TypeOf((*MockITmdb)(nil).ListRemoveMovie), varargs...)
}

// ListRemoveMovieWithBody mocks base method.
func (m *MockITmdb) ListRemoveMovieWithBody(arg0 context.Context, arg1 int32, arg2 *tmdb.ListRemoveMovieParams, arg3 string, arg4 io.Reader, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRemoveMovieWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoveMovieWithBody indicates an expected call of ListRemoveMovieWithBody.
func (mr *MockITmdbMockRecorder) ListRemoveMovieWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoveMovieWithBody", reflect.TypeOf((*MockITmdb)(nil).ListRemoveMovieWithBody), varargs...)
}

// ListsCopy mocks base method.
func (m *MockITmdb) ListsCopy(arg0 context.Context, arg1 int32, arg2 *tmdb.ListsCopyParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListsCopy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListsCopy indicates an expected call of ListsCopy.
func (mr *MockITmdbMockRecorder) ListsCopy(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListsCopy", reflect.TypeOf((*MockITmdb)(nil).ListsCopy), varargs...)
}

// MovieAccountStates mocks base method.
func (m *MockITmdb) MovieAccountStates(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieAccountStatesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieAccountStates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieAccountStates indicates an expected call of MovieAccountStates.
func (mr *MockITmdbMockRecorder) MovieAccountStates(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieAccountStates", reflect.TypeOf((*MockITmdb)(nil).MovieAccountStates), varargs...)
}

// MovieAddRating mocks base method.
func (m *MockITmdb) MovieAddRating(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieAddRatingParams, arg3 tmdb.MovieAddRatingJSONRequestBody, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieAddRating", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieAddRating indicates an expected call of MovieAddRating.
func (mr *MockITmdbMockRecorder) MovieAddRating(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieAddRating", reflect.TypeOf((*MockITmdb)(nil).MovieAddRating), varargs...)
}

// MovieAddRatingWithBody mocks base method.
func (m *MockITmdb) MovieAddRatingWithBody(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieAddRatingParams, arg3 string, arg4 io.Reader, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieAddRatingWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieAddRatingWithBody indicates an expected call of MovieAddRatingWithBody.
func (mr *MockITmdbMockRecorder) MovieAddRatingWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieAddRatingWithBody", reflect.TypeOf((*MockITmdb)(nil).MovieAddRatingWithBody), varargs...)
}

// MovieAlternativeTitles mocks base method.
func (m *MockITmdb) MovieAlternativeTitles(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieAlternativeTitlesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieAlternativeTitles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieAlternativeTitles indicates an expected call of MovieAlternativeTitles.
func (mr *MockITmdbMockRecorder) MovieAlternativeTitles(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieAlternativeTitles", reflect.TypeOf((*MockITmdb)(nil).MovieAlternativeTitles), varargs...)
}

// MovieChanges mocks base method.
func (m *MockITmdb) MovieChanges(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieChangesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieChanges", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieChanges indicates an expected call of MovieChanges.
func (mr *MockITmdbMockRecorder) MovieChanges(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieChanges", reflect.TypeOf((*MockITmdb)(nil).MovieChanges), varargs...)
}

// MovieCredits mocks base method.
func (m *MockITmdb) MovieCredits(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieCreditsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieCredits indicates an expected call of MovieCredits.
func (mr *MockITmdbMockRecorder) MovieCredits(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieCredits", reflect.TypeOf((*MockITmdb)(nil).MovieCredits), varargs...)
}

// MovieDeleteRating mocks base method.
func (m *MockITmdb) MovieDeleteRating(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieDeleteRatingParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieDeleteRating", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieDeleteRating indicates an expected call of MovieDeleteRating.
func (mr *MockITmdbMockRecorder) MovieDeleteRating(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieDeleteRating", reflect.TypeOf((*MockITmdb)(nil).MovieDeleteRating), varargs...)
}

// MovieDetails mocks base method.
func (m *MockITmdb) MovieDetails(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieDetailsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieDetails indicates an expected call of MovieDetails.
func (mr *MockITmdbMockRecorder) MovieDetails(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieDetails", reflect.TypeOf((*MockITmdb)(nil).MovieDetails), varargs...)
}

// MovieExternalIds mocks base method.
func (m *MockITmdb) MovieExternalIds(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieExternalIds", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieExternalIds indicates an expected call of MovieExternalIds.
func (mr *MockITmdbMockRecorder) MovieExternalIds(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieExternalIds", reflect.TypeOf((*MockITmdb)(nil).MovieExternalIds), varargs...)
}

// MovieImages mocks base method.
func (m *MockITmdb) MovieImages(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieImagesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieImages indicates an expected call of MovieImages.
func (mr *MockITmdbMockRecorder) MovieImages(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieImages", reflect.TypeOf((*MockITmdb)(nil).MovieImages), varargs...)
}

// MovieKeywords mocks base method.
func (m *MockITmdb) MovieKeywords(arg0 context.Context, arg1 string, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieKeywords", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieKeywords indicates an expected call of MovieKeywords.
func (mr *MockITmdbMockRecorder) MovieKeywords(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieKeywords", reflect.TypeOf((*MockITmdb)(nil).MovieKeywords), varargs...)
}

// MovieLatestID mocks base method.
func (m *MockITmdb) MovieLatestID(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieLatestID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieLatestID indicates an expected call of MovieLatestID.
func (mr *MockITmdbMockRecorder) MovieLatestID(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieLatestID", reflect.TypeOf((*MockITmdb)(nil).MovieLatestID), varargs...)
}

// MovieLists mocks base method.
func (m *MockITmdb) MovieLists(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieListsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieLists", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieLists indicates an expected call of MovieLists.
func (mr *MockITmdbMockRecorder) MovieLists(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieLists", reflect.TypeOf((*MockITmdb)(nil).MovieLists), varargs...)
}

// MovieNowPlayingList mocks base method.
func (m *MockITmdb) MovieNowPlayingList(arg0 context.Context, arg1 *tmdb.MovieNowPlayingListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieNowPlayingList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieNowPlayingList indicates an expected call of MovieNowPlayingList.
func (mr *MockITmdbMockRecorder) MovieNowPlayingList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieNowPlayingList", reflect.TypeOf((*MockITmdb)(nil).MovieNowPlayingList), varargs...)
}

// MoviePopularList mocks base method.
func (m *MockITmdb) MoviePopularList(arg0 context.Context, arg1 *tmdb.MoviePopularListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoviePopularList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoviePopularList indicates an expected call of MoviePopularList.
func (mr *MockITmdbMockRecorder) MoviePopularList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoviePopularList", reflect.TypeOf((*MockITmdb)(nil).MoviePopularList), varargs...)
}

// MovieRecommendations mocks base method.
func (m *MockITmdb) MovieRecommendations(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieRecommendationsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieRecommendations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieRecommendations indicates an expected call of MovieRecommendations.
func (mr *MockITmdbMockRecorder) MovieRecommendations(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieRecommendations", reflect.TypeOf((*MockITmdb)(nil).MovieRecommendations), varargs...)
}

// MovieReleaseDates mocks base method.
func (m *MockITmdb) MovieReleaseDates(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieReleaseDates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieReleaseDates indicates an expected call of MovieReleaseDates.
func (mr *MockITmdbMockRecorder) MovieReleaseDates(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieReleaseDates", reflect.TypeOf((*MockITmdb)(nil).MovieReleaseDates), varargs...)
}

// MovieReviews mocks base method.
func (m *MockITmdb) MovieReviews(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieReviewsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieReviews", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieReviews indicates an expected call of MovieReviews.
func (mr *MockITmdbMockRecorder) MovieReviews(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieReviews", reflect.TypeOf((*MockITmdb)(nil).MovieReviews), varargs...)
}

// MovieSimilar mocks base method.
func (m *MockITmdb) MovieSimilar(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieSimilarParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieSimilar", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieSimilar indicates an expected call of MovieSimilar.
func (mr *MockITmdbMockRecorder) MovieSimilar(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieSimilar", reflect.TypeOf((*MockITmdb)(nil).MovieSimilar), varargs...)
}

// MovieTopRatedList mocks base method.
func (m *MockITmdb) MovieTopRatedList(arg0 context.Context, arg1 *tmdb.MovieTopRatedListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieTopRatedList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieTopRatedList indicates an expected call of MovieTopRatedList.
func (mr *MockITmdbMockRecorder) MovieTopRatedList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieTopRatedList", reflect.TypeOf((*MockITmdb)(nil).MovieTopRatedList), varargs...)
}

// MovieTranslations mocks base method.
func (m *MockITmdb) MovieTranslations(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieTranslations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieTranslations indicates an expected call of MovieTranslations.
func (mr *MockITmdbMockRecorder) MovieTranslations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieTranslations", reflect.TypeOf((*MockITmdb)(nil).MovieTranslations), varargs...)
}

// MovieUpcomingList mocks base method.
func (m *MockITmdb) MovieUpcomingList(arg0 context.Context, arg1 *tmdb.MovieUpcomingListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieUpcomingList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieUpcomingList indicates an expected call of MovieUpcomingList.
func (mr *MockITmdbMockRecorder) MovieUpcomingList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieUpcomingList", reflect.TypeOf((*MockITmdb)(nil).MovieUpcomingList), varargs...)
}

// MovieVideos mocks base method.
func (m *MockITmdb) MovieVideos(arg0 context.Context, arg1 int32, arg2 *tmdb.MovieVideosParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieVideos", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieVideos indicates an expected call of MovieVideos.
func (mr *MockITmdbMockRecorder) MovieVideos(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieVideos", reflect.TypeOf((*MockITmdb)(nil).MovieVideos), varargs...)
}

// MovieWatchProviders mocks base method.
func (m *MockITmdb) MovieWatchProviders(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MovieWatchProviders", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MovieWatchProviders indicates an expected call of MovieWatchProviders.
func (mr *MockITmdbMockRecorder) MovieWatchProviders(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovieWatchProviders", reflect.TypeOf((*MockITmdb)(nil).MovieWatchProviders), varargs...)
}

// NetworkDetails mocks base method.
func (m *MockITmdb) NetworkDetails(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NetworkDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkDetails indicates an expected call of NetworkDetails.
func (mr *MockITmdbMockRecorder) NetworkDetails(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkDetails", reflect.TypeOf((*MockITmdb)(nil).NetworkDetails), varargs...)
}

// PersonChanges mocks base method.
func (m *MockITmdb) PersonChanges(arg0 context.Context, arg1 int32, arg2 *tmdb.PersonChangesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonChanges", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonChanges indicates an expected call of PersonChanges.
func (mr *MockITmdbMockRecorder) PersonChanges(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonChanges", reflect.TypeOf((*MockITmdb)(nil).PersonChanges), varargs...)
}

// PersonCombinedCredits mocks base method.
func (m *MockITmdb) PersonCombinedCredits(arg0 context.Context, arg1 string, arg2 *tmdb.PersonCombinedCreditsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonCombinedCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonCombinedCredits indicates an expected call of PersonCombinedCredits.
func (mr *MockITmdbMockRecorder) PersonCombinedCredits(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonCombinedCredits", reflect.TypeOf((*MockITmdb)(nil).PersonCombinedCredits), varargs...)
}

// PersonDetails mocks base method.
func (m *MockITmdb) PersonDetails(arg0 context.Context, arg1 int32, arg2 *tmdb.PersonDetailsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonDetails indicates an expected call of PersonDetails.
func (mr *MockITmdbMockRecorder) PersonDetails(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonDetails", reflect.TypeOf((*MockITmdb)(nil).PersonDetails), varargs...)
}

// PersonExternalIds mocks base method.
func (m *MockITmdb) PersonExternalIds(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonExternalIds", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonExternalIds indicates an expected call of PersonExternalIds.
func (mr *MockITmdbMockRecorder) PersonExternalIds(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonExternalIds", reflect.TypeOf((*MockITmdb)(nil).PersonExternalIds), varargs...)
}

// PersonImages mocks base method.
func (m *MockITmdb) PersonImages(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonImages indicates an expected call of PersonImages.
func (mr *MockITmdbMockRecorder) PersonImages(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonImages", reflect.TypeOf((*MockITmdb)(nil).PersonImages), varargs...)
}

// PersonLatestID mocks base method.
func (m *MockITmdb) PersonLatestID(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonLatestID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonLatestID indicates an expected call of PersonLatestID.
func (mr *MockITmdbMockRecorder) PersonLatestID(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonLatestID", reflect.TypeOf((*MockITmdb)(nil).PersonLatestID), varargs...)
}

// PersonMovieCredits mocks base method.
func (m *MockITmdb) PersonMovieCredits(arg0 context.Context, arg1 int32, arg2 *tmdb.PersonMovieCreditsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonMovieCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonMovieCredits indicates an expected call of PersonMovieCredits.
func (mr *MockITmdbMockRecorder) PersonMovieCredits(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonMovieCredits", reflect.TypeOf((*MockITmdb)(nil).PersonMovieCredits), varargs...)
}

// PersonPopularList mocks base method.
func (m *MockITmdb) PersonPopularList(arg0 context.Context, arg1 *tmdb.PersonPopularListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonPopularList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonPopularList indicates an expected call of PersonPopularList.
func (mr *MockITmdbMockRecorder) PersonPopularList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonPopularList", reflect.TypeOf((*MockITmdb)(nil).PersonPopularList), varargs...)
}

// PersonTaggedImages mocks base method.
func (m *MockITmdb) PersonTaggedImages(arg0 context.Context, arg1 int32, arg2 *tmdb.PersonTaggedImagesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonTaggedImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonTaggedImages indicates an expected call of PersonTaggedImages.
func (mr *MockITmdbMockRecorder) PersonTaggedImages(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonTaggedImages", reflect.TypeOf((*MockITmdb)(nil).PersonTaggedImages), varargs...)
}

// PersonTvCredits mocks base method.
func (m *MockITmdb) PersonTvCredits(arg0 context.Context, arg1 int32, arg2 *tmdb.PersonTvCreditsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PersonTvCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersonTvCredits indicates an expected call of PersonTvCredits.
func (mr *MockITmdbMockRecorder) PersonTvCredits(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonTvCredits", reflect.TypeOf((*MockITmdb)(nil).PersonTvCredits), varargs...)
}

// ReviewDetails mocks base method.
func (m *MockITmdb) ReviewDetails(arg0 context.Context, arg1 string, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReviewDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviewDetails indicates an expected call of ReviewDetails.
func (mr *MockITmdbMockRecorder) ReviewDetails(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewDetails", reflect.TypeOf((*MockITmdb)(nil).ReviewDetails), varargs...)
}

// SearchCollection mocks base method.
func (m *MockITmdb) SearchCollection(arg0 context.Context, arg1 *tmdb.SearchCollectionParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchCollection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCollection indicates an expected call of SearchCollection.
func (mr *MockITmdbMockRecorder) SearchCollection(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCollection", reflect.TypeOf((*MockITmdb)(nil).SearchCollection), varargs...)
}

// SearchCompany mocks base method.
func (m *MockITmdb) SearchCompany(arg0 context.Context, arg1 *tmdb.SearchCompanyParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchCompany", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCompany indicates an expected call of SearchCompany.
func (mr *MockITmdbMockRecorder) SearchCompany(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCompany", reflect.TypeOf((*MockITmdb)(nil).SearchCompany), varargs...)
}

// SearchKeyword mocks base method.
func (m *MockITmdb) SearchKeyword(arg0 context.Context, arg1 *tmdb.SearchKeywordParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchKeyword", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchKeyword indicates an expected call of SearchKeyword.
func (mr *MockITmdbMockRecorder) SearchKeyword(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchKeyword", reflect.TypeOf((*MockITmdb)(nil).SearchKeyword), varargs...)
}

// SearchMovie mocks base method.
func (m *MockITmdb) SearchMovie(arg0 context.Context, arg1 *tmdb.SearchMovieParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMovie", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockITmdbMockRecorder) SearchMovie(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockITmdb)(nil).SearchMovie), varargs...)
}

// SearchMulti mocks base method.
func (m *MockITmdb) SearchMulti(arg0 context.Context, arg1 *tmdb.SearchMultiParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMulti", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMulti indicates an expected call of SearchMulti.
func (mr *MockITmdbMockRecorder) SearchMulti(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMulti", reflect.TypeOf((*MockITmdb)(nil).SearchMulti), varargs...)
}

// SearchPerson mocks base method.
func (m *MockITmdb) SearchPerson(arg0 context.Context, arg1 *tmdb.SearchPersonParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPerson", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPerson indicates an expected call of SearchPerson.
func (mr *MockITmdbMockRecorder) SearchPerson(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPerson", reflect.TypeOf((*MockITmdb)(nil).SearchPerson), varargs...)
}

// SearchTv mocks base method.
func (m *MockITmdb) SearchTv(arg0 context.Context, arg1 *tmdb.SearchTvParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTv", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTv indicates an expected call of SearchTv.
func (mr *MockITmdbMockRecorder) SearchTv(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTv", reflect.TypeOf((*MockITmdb)(nil).SearchTv), varargs...)
}

// Translations mocks base method.
func (m *MockITmdb) Translations(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Translations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translations indicates an expected call of Translations.
func (mr *MockITmdbMockRecorder) Translations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translations", reflect.TypeOf((*MockITmdb)(nil).Translations), varargs...)
}

// TrendingAll mocks base method.
func (m *MockITmdb) TrendingAll(arg0 context.Context, arg1 tmdb.TrendingAllParamsTimeWindow, arg2 *tmdb.TrendingAllParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrendingAll", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrendingAll indicates an expected call of TrendingAll.
func (mr *MockITmdbMockRecorder) TrendingAll(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrendingAll", reflect.TypeOf((*MockITmdb)(nil).TrendingAll), varargs...)
}

// TrendingMovies mocks base method.
func (m *MockITmdb) TrendingMovies(arg0 context.Context, arg1 tmdb.TrendingMoviesParamsTimeWindow, arg2 *tmdb.TrendingMoviesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrendingMovies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrendingMovies indicates an expected call of TrendingMovies.
func (mr *MockITmdbMockRecorder) TrendingMovies(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrendingMovies", reflect.TypeOf((*MockITmdb)(nil).TrendingMovies), varargs...)
}

// TrendingPeople mocks base method.
func (m *MockITmdb) TrendingPeople(arg0 context.Context, arg1 tmdb.TrendingPeopleParamsTimeWindow, arg2 *tmdb.TrendingPeopleParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrendingPeople", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrendingPeople indicates an expected call of TrendingPeople.
func (mr *MockITmdbMockRecorder) TrendingPeople(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrendingPeople", reflect.TypeOf((*MockITmdb)(nil).TrendingPeople), varargs...)
}

// TrendingTv mocks base method.
func (m *MockITmdb) TrendingTv(arg0 context.Context, arg1 tmdb.TrendingTvParamsTimeWindow, arg2 *tmdb.TrendingTvParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrendingTv", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrendingTv indicates an expected call of TrendingTv.
func (mr *MockITmdbMockRecorder) TrendingTv(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrendingTv", reflect.TypeOf((*MockITmdb)(nil).TrendingTv), varargs...)
}

// TvEpisodeAccountStates mocks base method.
func (m *MockITmdb) TvEpisodeAccountStates(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeAccountStatesParams, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeAccountStates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeAccountStates indicates an expected call of TvEpisodeAccountStates.
func (mr *MockITmdbMockRecorder) TvEpisodeAccountStates(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeAccountStates", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeAccountStates), varargs...)
}

// TvEpisodeAddRating mocks base method.
func (m *MockITmdb) TvEpisodeAddRating(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeAddRatingParams, arg5 tmdb.TvEpisodeAddRatingJSONRequestBody, arg6 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4, arg5}
	for _, a := range arg6 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeAddRating", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeAddRating indicates an expected call of TvEpisodeAddRating.
func (mr *MockITmdbMockRecorder) TvEpisodeAddRating(arg0, arg1, arg2, arg3, arg4, arg5 any, arg6 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4, arg5}, arg6...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeAddRating", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeAddRating), varargs...)
}

// TvEpisodeAddRatingWithBody mocks base method.
func (m *MockITmdb) TvEpisodeAddRatingWithBody(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeAddRatingParams, arg5 string, arg6 io.Reader, arg7 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeAddRatingWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeAddRatingWithBody indicates an expected call of TvEpisodeAddRatingWithBody.
func (mr *MockITmdbMockRecorder) TvEpisodeAddRatingWithBody(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any, arg7 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeAddRatingWithBody", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeAddRatingWithBody), varargs...)
}

// TvEpisodeChangesByID mocks base method.
func (m *MockITmdb) TvEpisodeChangesByID(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeChangesByID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeChangesByID indicates an expected call of TvEpisodeChangesByID.
func (mr *MockITmdbMockRecorder) TvEpisodeChangesByID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeChangesByID", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeChangesByID), varargs...)
}

// TvEpisodeCredits mocks base method.
func (m *MockITmdb) TvEpisodeCredits(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeCreditsParams, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeCredits indicates an expected call of TvEpisodeCredits.
func (mr *MockITmdbMockRecorder) TvEpisodeCredits(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeCredits", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeCredits), varargs...)
}

// TvEpisodeDeleteRating mocks base method.
func (m *MockITmdb) TvEpisodeDeleteRating(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeDeleteRatingParams, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeDeleteRating", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeDeleteRating indicates an expected call of TvEpisodeDeleteRating.
func (mr *MockITmdbMockRecorder) TvEpisodeDeleteRating(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeDeleteRating", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeDeleteRating), varargs...)
}

// TvEpisodeDetails mocks base method.
func (m *MockITmdb) TvEpisodeDetails(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeDetailsParams, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeDetails indicates an expected call of TvEpisodeDetails.
func (mr *MockITmdbMockRecorder) TvEpisodeDetails(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeDetails", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeDetails), varargs...)
}

// TvEpisodeExternalIds mocks base method.
func (m *MockITmdb) TvEpisodeExternalIds(arg0 context.Context, arg1, arg2 int32, arg3 string, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeExternalIds", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeExternalIds indicates an expected call of TvEpisodeExternalIds.
func (mr *MockITmdbMockRecorder) TvEpisodeExternalIds(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeExternalIds", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeExternalIds), varargs...)
}

// TvEpisodeGroupDetails mocks base method.
func (m *MockITmdb) TvEpisodeGroupDetails(arg0 context.Context, arg1 string, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeGroupDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeGroupDetails indicates an expected call of TvEpisodeGroupDetails.
func (mr *MockITmdbMockRecorder) TvEpisodeGroupDetails(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeGroupDetails", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeGroupDetails), varargs...)
}

// TvEpisodeImages mocks base method.
func (m *MockITmdb) TvEpisodeImages(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeImagesParams, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeImages indicates an expected call of TvEpisodeImages.
func (mr *MockITmdbMockRecorder) TvEpisodeImages(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeImages", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeImages), varargs...)
}

// TvEpisodeTranslations mocks base method.
func (m *MockITmdb) TvEpisodeTranslations(arg0 context.Context, arg1, arg2, arg3 int32, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeTranslations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeTranslations indicates an expected call of TvEpisodeTranslations.
func (mr *MockITmdbMockRecorder) TvEpisodeTranslations(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeTranslations", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeTranslations), varargs...)
}

// TvEpisodeVideos mocks base method.
func (m *MockITmdb) TvEpisodeVideos(arg0 context.Context, arg1, arg2, arg3 int32, arg4 *tmdb.TvEpisodeVideosParams, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvEpisodeVideos", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvEpisodeVideos indicates an expected call of TvEpisodeVideos.
func (mr *MockITmdbMockRecorder) TvEpisodeVideos(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvEpisodeVideos", reflect.TypeOf((*MockITmdb)(nil).TvEpisodeVideos), varargs...)
}

// TvSeasonAccountStates mocks base method.
func (m *MockITmdb) TvSeasonAccountStates(arg0 context.Context, arg1, arg2 int32, arg3 *tmdb.TvSeasonAccountStatesParams, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonAccountStates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonAccountStates indicates an expected call of TvSeasonAccountStates.
func (mr *MockITmdbMockRecorder) TvSeasonAccountStates(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonAccountStates", reflect.TypeOf((*MockITmdb)(nil).TvSeasonAccountStates), varargs...)
}

// TvSeasonAggregateCredits mocks base method.
func (m *MockITmdb) TvSeasonAggregateCredits(arg0 context.Context, arg1, arg2 int32, arg3 *tmdb.TvSeasonAggregateCreditsParams, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonAggregateCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonAggregateCredits indicates an expected call of TvSeasonAggregateCredits.
func (mr *MockITmdbMockRecorder) TvSeasonAggregateCredits(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonAggregateCredits", reflect.TypeOf((*MockITmdb)(nil).TvSeasonAggregateCredits), varargs...)
}

// TvSeasonChangesByID mocks base method.
func (m *MockITmdb) TvSeasonChangesByID(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeasonChangesByIDParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonChangesByID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonChangesByID indicates an expected call of TvSeasonChangesByID.
func (mr *MockITmdbMockRecorder) TvSeasonChangesByID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonChangesByID", reflect.TypeOf((*MockITmdb)(nil).TvSeasonChangesByID), varargs...)
}

// TvSeasonCredits mocks base method.
func (m *MockITmdb) TvSeasonCredits(arg0 context.Context, arg1, arg2 int32, arg3 *tmdb.TvSeasonCreditsParams, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonCredits indicates an expected call of TvSeasonCredits.
func (mr *MockITmdbMockRecorder) TvSeasonCredits(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonCredits", reflect.TypeOf((*MockITmdb)(nil).TvSeasonCredits), varargs...)
}

// TvSeasonDetails mocks base method.
func (m *MockITmdb) TvSeasonDetails(arg0 context.Context, arg1, arg2 int32, arg3 *tmdb.TvSeasonDetailsParams, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonDetails indicates an expected call of TvSeasonDetails.
func (mr *MockITmdbMockRecorder) TvSeasonDetails(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonDetails", reflect.TypeOf((*MockITmdb)(nil).TvSeasonDetails), varargs...)
}

// TvSeasonExternalIds mocks base method.
func (m *MockITmdb) TvSeasonExternalIds(arg0 context.Context, arg1, arg2 int32, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonExternalIds", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonExternalIds indicates an expected call of TvSeasonExternalIds.
func (mr *MockITmdbMockRecorder) TvSeasonExternalIds(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonExternalIds", reflect.TypeOf((*MockITmdb)(nil).TvSeasonExternalIds), varargs...)
}

// TvSeasonImages mocks base method.
func (m *MockITmdb) TvSeasonImages(arg0 context.Context, arg1, arg2 int32, arg3 *tmdb.TvSeasonImagesParams, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonImages indicates an expected call of TvSeasonImages.
func (mr *MockITmdbMockRecorder) TvSeasonImages(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonImages", reflect.TypeOf((*MockITmdb)(nil).TvSeasonImages), varargs...)
}

// TvSeasonTranslations mocks base method.
func (m *MockITmdb) TvSeasonTranslations(arg0 context.Context, arg1, arg2 int32, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonTranslations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonTranslations indicates an expected call of TvSeasonTranslations.
func (mr *MockITmdbMockRecorder) TvSeasonTranslations(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonTranslations", reflect.TypeOf((*MockITmdb)(nil).TvSeasonTranslations), varargs...)
}

// TvSeasonVideos mocks base method.
func (m *MockITmdb) TvSeasonVideos(arg0 context.Context, arg1, arg2 int32, arg3 *tmdb.TvSeasonVideosParams, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonVideos", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonVideos indicates an expected call of TvSeasonVideos.
func (mr *MockITmdbMockRecorder) TvSeasonVideos(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonVideos", reflect.TypeOf((*MockITmdb)(nil).TvSeasonVideos), varargs...)
}

// TvSeasonWatchProviders mocks base method.
func (m *MockITmdb) TvSeasonWatchProviders(arg0 context.Context, arg1, arg2 int32, arg3 *tmdb.TvSeasonWatchProvidersParams, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeasonWatchProviders", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeasonWatchProviders indicates an expected call of TvSeasonWatchProviders.
func (mr *MockITmdbMockRecorder) TvSeasonWatchProviders(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeasonWatchProviders", reflect.TypeOf((*MockITmdb)(nil).TvSeasonWatchProviders), varargs...)
}

// TvSeriesAccountStates mocks base method.
func (m *MockITmdb) TvSeriesAccountStates(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesAccountStatesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesAccountStates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesAccountStates indicates an expected call of TvSeriesAccountStates.
func (mr *MockITmdbMockRecorder) TvSeriesAccountStates(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesAccountStates", reflect.TypeOf((*MockITmdb)(nil).TvSeriesAccountStates), varargs...)
}

// TvSeriesAddRating mocks base method.
func (m *MockITmdb) TvSeriesAddRating(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesAddRatingParams, arg3 tmdb.TvSeriesAddRatingJSONRequestBody, arg4 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesAddRating", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesAddRating indicates an expected call of TvSeriesAddRating.
func (mr *MockITmdbMockRecorder) TvSeriesAddRating(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesAddRating", reflect.TypeOf((*MockITmdb)(nil).TvSeriesAddRating), varargs...)
}

// TvSeriesAddRatingWithBody mocks base method.
func (m *MockITmdb) TvSeriesAddRatingWithBody(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesAddRatingParams, arg3 string, arg4 io.Reader, arg5 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesAddRatingWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesAddRatingWithBody indicates an expected call of TvSeriesAddRatingWithBody.
func (mr *MockITmdbMockRecorder) TvSeriesAddRatingWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesAddRatingWithBody", reflect.TypeOf((*MockITmdb)(nil).TvSeriesAddRatingWithBody), varargs...)
}

// TvSeriesAggregateCredits mocks base method.
func (m *MockITmdb) TvSeriesAggregateCredits(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesAggregateCreditsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesAggregateCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesAggregateCredits indicates an expected call of TvSeriesAggregateCredits.
func (mr *MockITmdbMockRecorder) TvSeriesAggregateCredits(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesAggregateCredits", reflect.TypeOf((*MockITmdb)(nil).TvSeriesAggregateCredits), varargs...)
}

// TvSeriesAiringTodayList mocks base method.
func (m *MockITmdb) TvSeriesAiringTodayList(arg0 context.Context, arg1 *tmdb.TvSeriesAiringTodayListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesAiringTodayList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesAiringTodayList indicates an expected call of TvSeriesAiringTodayList.
func (mr *MockITmdbMockRecorder) TvSeriesAiringTodayList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesAiringTodayList", reflect.TypeOf((*MockITmdb)(nil).TvSeriesAiringTodayList), varargs...)
}

// TvSeriesAlternativeTitles mocks base method.
func (m *MockITmdb) TvSeriesAlternativeTitles(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesAlternativeTitles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesAlternativeTitles indicates an expected call of TvSeriesAlternativeTitles.
func (mr *MockITmdbMockRecorder) TvSeriesAlternativeTitles(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesAlternativeTitles", reflect.TypeOf((*MockITmdb)(nil).TvSeriesAlternativeTitles), varargs...)
}

// TvSeriesChanges mocks base method.
func (m *MockITmdb) TvSeriesChanges(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesChangesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesChanges", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesChanges indicates an expected call of TvSeriesChanges.
func (mr *MockITmdbMockRecorder) TvSeriesChanges(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesChanges", reflect.TypeOf((*MockITmdb)(nil).TvSeriesChanges), varargs...)
}

// TvSeriesContentRatings mocks base method.
func (m *MockITmdb) TvSeriesContentRatings(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesContentRatings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesContentRatings indicates an expected call of TvSeriesContentRatings.
func (mr *MockITmdbMockRecorder) TvSeriesContentRatings(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesContentRatings", reflect.TypeOf((*MockITmdb)(nil).TvSeriesContentRatings), varargs...)
}

// TvSeriesCredits mocks base method.
func (m *MockITmdb) TvSeriesCredits(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesCreditsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesCredits", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesCredits indicates an expected call of TvSeriesCredits.
func (mr *MockITmdbMockRecorder) TvSeriesCredits(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesCredits", reflect.TypeOf((*MockITmdb)(nil).TvSeriesCredits), varargs...)
}

// TvSeriesDeleteRating mocks base method.
func (m *MockITmdb) TvSeriesDeleteRating(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesDeleteRatingParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesDeleteRating", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesDeleteRating indicates an expected call of TvSeriesDeleteRating.
func (mr *MockITmdbMockRecorder) TvSeriesDeleteRating(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesDeleteRating", reflect.TypeOf((*MockITmdb)(nil).TvSeriesDeleteRating), varargs...)
}

// TvSeriesDetails mocks base method.
func (m *MockITmdb) TvSeriesDetails(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesDetailsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesDetails indicates an expected call of TvSeriesDetails.
func (mr *MockITmdbMockRecorder) TvSeriesDetails(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesDetails", reflect.TypeOf((*MockITmdb)(nil).TvSeriesDetails), varargs...)
}

// TvSeriesEpisodeGroups mocks base method.
func (m *MockITmdb) TvSeriesEpisodeGroups(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesEpisodeGroups", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesEpisodeGroups indicates an expected call of TvSeriesEpisodeGroups.
func (mr *MockITmdbMockRecorder) TvSeriesEpisodeGroups(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesEpisodeGroups", reflect.TypeOf((*MockITmdb)(nil).TvSeriesEpisodeGroups), varargs...)
}

// TvSeriesExternalIds mocks base method.
func (m *MockITmdb) TvSeriesExternalIds(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesExternalIds", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesExternalIds indicates an expected call of TvSeriesExternalIds.
func (mr *MockITmdbMockRecorder) TvSeriesExternalIds(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesExternalIds", reflect.TypeOf((*MockITmdb)(nil).TvSeriesExternalIds), varargs...)
}

// TvSeriesImages mocks base method.
func (m *MockITmdb) TvSeriesImages(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesImagesParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesImages", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesImages indicates an expected call of TvSeriesImages.
func (mr *MockITmdbMockRecorder) TvSeriesImages(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesImages", reflect.TypeOf((*MockITmdb)(nil).TvSeriesImages), varargs...)
}

// TvSeriesKeywords mocks base method.
func (m *MockITmdb) TvSeriesKeywords(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesKeywords", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesKeywords indicates an expected call of TvSeriesKeywords.
func (mr *MockITmdbMockRecorder) TvSeriesKeywords(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesKeywords", reflect.TypeOf((*MockITmdb)(nil).TvSeriesKeywords), varargs...)
}

// TvSeriesLatestID mocks base method.
func (m *MockITmdb) TvSeriesLatestID(arg0 context.Context, arg1 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesLatestID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesLatestID indicates an expected call of TvSeriesLatestID.
func (mr *MockITmdbMockRecorder) TvSeriesLatestID(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesLatestID", reflect.TypeOf((*MockITmdb)(nil).TvSeriesLatestID), varargs...)
}

// TvSeriesOnTheAirList mocks base method.
func (m *MockITmdb) TvSeriesOnTheAirList(arg0 context.Context, arg1 *tmdb.TvSeriesOnTheAirListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesOnTheAirList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesOnTheAirList indicates an expected call of TvSeriesOnTheAirList.
func (mr *MockITmdbMockRecorder) TvSeriesOnTheAirList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesOnTheAirList", reflect.TypeOf((*MockITmdb)(nil).TvSeriesOnTheAirList), varargs...)
}

// TvSeriesPopularList mocks base method.
func (m *MockITmdb) TvSeriesPopularList(arg0 context.Context, arg1 *tmdb.TvSeriesPopularListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesPopularList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesPopularList indicates an expected call of TvSeriesPopularList.
func (mr *MockITmdbMockRecorder) TvSeriesPopularList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesPopularList", reflect.TypeOf((*MockITmdb)(nil).TvSeriesPopularList), varargs...)
}

// TvSeriesRecommendations mocks base method.
func (m *MockITmdb) TvSeriesRecommendations(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesRecommendationsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesRecommendations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesRecommendations indicates an expected call of TvSeriesRecommendations.
func (mr *MockITmdbMockRecorder) TvSeriesRecommendations(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesRecommendations", reflect.TypeOf((*MockITmdb)(nil).TvSeriesRecommendations), varargs...)
}

// TvSeriesReviews mocks base method.
func (m *MockITmdb) TvSeriesReviews(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesReviewsParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesReviews", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesReviews indicates an expected call of TvSeriesReviews.
func (mr *MockITmdbMockRecorder) TvSeriesReviews(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesReviews", reflect.TypeOf((*MockITmdb)(nil).TvSeriesReviews), varargs...)
}

// TvSeriesScreenedTheatrically mocks base method.
func (m *MockITmdb) TvSeriesScreenedTheatrically(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesScreenedTheatrically", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesScreenedTheatrically indicates an expected call of TvSeriesScreenedTheatrically.
func (mr *MockITmdbMockRecorder) TvSeriesScreenedTheatrically(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesScreenedTheatrically", reflect.TypeOf((*MockITmdb)(nil).TvSeriesScreenedTheatrically), varargs...)
}

// TvSeriesSimilar mocks base method.
func (m *MockITmdb) TvSeriesSimilar(arg0 context.Context, arg1 string, arg2 *tmdb.TvSeriesSimilarParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesSimilar", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesSimilar indicates an expected call of TvSeriesSimilar.
func (mr *MockITmdbMockRecorder) TvSeriesSimilar(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesSimilar", reflect.TypeOf((*MockITmdb)(nil).TvSeriesSimilar), varargs...)
}

// TvSeriesTopRatedList mocks base method.
func (m *MockITmdb) TvSeriesTopRatedList(arg0 context.Context, arg1 *tmdb.TvSeriesTopRatedListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesTopRatedList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesTopRatedList indicates an expected call of TvSeriesTopRatedList.
func (mr *MockITmdbMockRecorder) TvSeriesTopRatedList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesTopRatedList", reflect.TypeOf((*MockITmdb)(nil).TvSeriesTopRatedList), varargs...)
}

// TvSeriesTranslations mocks base method.
func (m *MockITmdb) TvSeriesTranslations(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesTranslations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesTranslations indicates an expected call of TvSeriesTranslations.
func (mr *MockITmdbMockRecorder) TvSeriesTranslations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesTranslations", reflect.TypeOf((*MockITmdb)(nil).TvSeriesTranslations), varargs...)
}

// TvSeriesVideos mocks base method.
func (m *MockITmdb) TvSeriesVideos(arg0 context.Context, arg1 int32, arg2 *tmdb.TvSeriesVideosParams, arg3 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesVideos", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesVideos indicates an expected call of TvSeriesVideos.
func (mr *MockITmdbMockRecorder) TvSeriesVideos(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesVideos", reflect.TypeOf((*MockITmdb)(nil).TvSeriesVideos), varargs...)
}

// TvSeriesWatchProviders mocks base method.
func (m *MockITmdb) TvSeriesWatchProviders(arg0 context.Context, arg1 int32, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TvSeriesWatchProviders", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TvSeriesWatchProviders indicates an expected call of TvSeriesWatchProviders.
func (mr *MockITmdbMockRecorder) TvSeriesWatchProviders(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TvSeriesWatchProviders", reflect.TypeOf((*MockITmdb)(nil).TvSeriesWatchProviders), varargs...)
}

// WatchProviderTvList mocks base method.
func (m *MockITmdb) WatchProviderTvList(arg0 context.Context, arg1 *tmdb.WatchProviderTvListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchProviderTvList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProviderTvList indicates an expected call of WatchProviderTvList.
func (mr *MockITmdbMockRecorder) WatchProviderTvList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProviderTvList", reflect.TypeOf((*MockITmdb)(nil).WatchProviderTvList), varargs...)
}

// WatchProvidersAvailableRegions mocks base method.
func (m *MockITmdb) WatchProvidersAvailableRegions(arg0 context.Context, arg1 *tmdb.WatchProvidersAvailableRegionsParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchProvidersAvailableRegions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProvidersAvailableRegions indicates an expected call of WatchProvidersAvailableRegions.
func (mr *MockITmdbMockRecorder) WatchProvidersAvailableRegions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProvidersAvailableRegions", reflect.TypeOf((*MockITmdb)(nil).WatchProvidersAvailableRegions), varargs...)
}

// WatchProvidersMovieList mocks base method.
func (m *MockITmdb) WatchProvidersMovieList(arg0 context.Context, arg1 *tmdb.WatchProvidersMovieListParams, arg2 ...tmdb.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchProvidersMovieList", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProvidersMovieList indicates an expected call of WatchProvidersMovieList.
func (mr *MockITmdbMockRecorder) WatchProvidersMovieList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProvidersMovieList", reflect.TypeOf((*MockITmdb)(nil).WatchProvidersMovieList), varargs...)
}
