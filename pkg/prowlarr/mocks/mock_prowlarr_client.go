// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kasuboski/mediaz/pkg/prowlarr (interfaces: ClientInterface)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_prowlarr_client.go github.com/kasuboski/mediaz/pkg/prowlarr ClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	prowlarr "github.com/kasuboski/mediaz/pkg/prowlarr"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// DeleteAPIV1ApplicationsBulk mocks base method.
func (m *MockClientInterface) DeleteAPIV1ApplicationsBulk(arg0 context.Context, arg1 prowlarr.ApplicationBulkResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1ApplicationsBulk", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1ApplicationsBulk indicates an expected call of DeleteAPIV1ApplicationsBulk.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1ApplicationsBulk(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1ApplicationsBulk", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1ApplicationsBulk), varargs...)
}

// DeleteAPIV1ApplicationsBulkWithBody mocks base method.
func (m *MockClientInterface) DeleteAPIV1ApplicationsBulkWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1ApplicationsBulkWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1ApplicationsBulkWithBody indicates an expected call of DeleteAPIV1ApplicationsBulkWithBody.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1ApplicationsBulkWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1ApplicationsBulkWithBody", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1ApplicationsBulkWithBody), varargs...)
}

// DeleteAPIV1ApplicationsID mocks base method.
func (m *MockClientInterface) DeleteAPIV1ApplicationsID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1ApplicationsID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1ApplicationsID indicates an expected call of DeleteAPIV1ApplicationsID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1ApplicationsID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1ApplicationsID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1ApplicationsID), varargs...)
}

// DeleteAPIV1AppprofileID mocks base method.
func (m *MockClientInterface) DeleteAPIV1AppprofileID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1AppprofileID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1AppprofileID indicates an expected call of DeleteAPIV1AppprofileID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1AppprofileID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1AppprofileID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1AppprofileID), varargs...)
}

// DeleteAPIV1CommandID mocks base method.
func (m *MockClientInterface) DeleteAPIV1CommandID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1CommandID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1CommandID indicates an expected call of DeleteAPIV1CommandID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1CommandID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1CommandID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1CommandID), varargs...)
}

// DeleteAPIV1CustomfilterID mocks base method.
func (m *MockClientInterface) DeleteAPIV1CustomfilterID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1CustomfilterID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1CustomfilterID indicates an expected call of DeleteAPIV1CustomfilterID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1CustomfilterID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1CustomfilterID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1CustomfilterID), varargs...)
}

// DeleteAPIV1DownloadclientBulk mocks base method.
func (m *MockClientInterface) DeleteAPIV1DownloadclientBulk(arg0 context.Context, arg1 prowlarr.DownloadClientBulkResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1DownloadclientBulk", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1DownloadclientBulk indicates an expected call of DeleteAPIV1DownloadclientBulk.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1DownloadclientBulk(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1DownloadclientBulk", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1DownloadclientBulk), varargs...)
}

// DeleteAPIV1DownloadclientBulkWithBody mocks base method.
func (m *MockClientInterface) DeleteAPIV1DownloadclientBulkWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1DownloadclientBulkWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1DownloadclientBulkWithBody indicates an expected call of DeleteAPIV1DownloadclientBulkWithBody.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1DownloadclientBulkWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1DownloadclientBulkWithBody", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1DownloadclientBulkWithBody), varargs...)
}

// DeleteAPIV1DownloadclientID mocks base method.
func (m *MockClientInterface) DeleteAPIV1DownloadclientID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1DownloadclientID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1DownloadclientID indicates an expected call of DeleteAPIV1DownloadclientID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1DownloadclientID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1DownloadclientID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1DownloadclientID), varargs...)
}

// DeleteAPIV1IndexerBulk mocks base method.
func (m *MockClientInterface) DeleteAPIV1IndexerBulk(arg0 context.Context, arg1 prowlarr.IndexerBulkResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1IndexerBulk", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1IndexerBulk indicates an expected call of DeleteAPIV1IndexerBulk.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1IndexerBulk(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1IndexerBulk", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1IndexerBulk), varargs...)
}

// DeleteAPIV1IndexerBulkWithBody mocks base method.
func (m *MockClientInterface) DeleteAPIV1IndexerBulkWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1IndexerBulkWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1IndexerBulkWithBody indicates an expected call of DeleteAPIV1IndexerBulkWithBody.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1IndexerBulkWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1IndexerBulkWithBody", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1IndexerBulkWithBody), varargs...)
}

// DeleteAPIV1IndexerID mocks base method.
func (m *MockClientInterface) DeleteAPIV1IndexerID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1IndexerID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1IndexerID indicates an expected call of DeleteAPIV1IndexerID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1IndexerID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1IndexerID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1IndexerID), varargs...)
}

// DeleteAPIV1IndexerproxyID mocks base method.
func (m *MockClientInterface) DeleteAPIV1IndexerproxyID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1IndexerproxyID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1IndexerproxyID indicates an expected call of DeleteAPIV1IndexerproxyID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1IndexerproxyID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1IndexerproxyID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1IndexerproxyID), varargs...)
}

// DeleteAPIV1NotificationID mocks base method.
func (m *MockClientInterface) DeleteAPIV1NotificationID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1NotificationID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1NotificationID indicates an expected call of DeleteAPIV1NotificationID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1NotificationID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1NotificationID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1NotificationID), varargs...)
}

// DeleteAPIV1SystemBackupID mocks base method.
func (m *MockClientInterface) DeleteAPIV1SystemBackupID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1SystemBackupID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1SystemBackupID indicates an expected call of DeleteAPIV1SystemBackupID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1SystemBackupID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1SystemBackupID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1SystemBackupID), varargs...)
}

// DeleteAPIV1TagID mocks base method.
func (m *MockClientInterface) DeleteAPIV1TagID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIV1TagID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIV1TagID indicates an expected call of DeleteAPIV1TagID.
func (mr *MockClientInterfaceMockRecorder) DeleteAPIV1TagID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIV1TagID", reflect.TypeOf((*MockClientInterface)(nil).DeleteAPIV1TagID), varargs...)
}

// Get mocks base method.
func (m *MockClientInterface) Get(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientInterfaceMockRecorder) Get(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientInterface)(nil).Get), varargs...)
}

// GetAPI mocks base method.
func (m *MockClientInterface) GetAPI(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPI", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPI indicates an expected call of GetAPI.
func (mr *MockClientInterfaceMockRecorder) GetAPI(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPI", reflect.TypeOf((*MockClientInterface)(nil).GetAPI), varargs...)
}

// GetAPIV1Applications mocks base method.
func (m *MockClientInterface) GetAPIV1Applications(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Applications", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Applications indicates an expected call of GetAPIV1Applications.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Applications(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Applications", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Applications), varargs...)
}

// GetAPIV1ApplicationsID mocks base method.
func (m *MockClientInterface) GetAPIV1ApplicationsID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ApplicationsID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ApplicationsID indicates an expected call of GetAPIV1ApplicationsID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ApplicationsID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ApplicationsID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ApplicationsID), varargs...)
}

// GetAPIV1ApplicationsSchema mocks base method.
func (m *MockClientInterface) GetAPIV1ApplicationsSchema(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ApplicationsSchema", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ApplicationsSchema indicates an expected call of GetAPIV1ApplicationsSchema.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ApplicationsSchema(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ApplicationsSchema", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ApplicationsSchema), varargs...)
}

// GetAPIV1Appprofile mocks base method.
func (m *MockClientInterface) GetAPIV1Appprofile(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Appprofile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Appprofile indicates an expected call of GetAPIV1Appprofile.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Appprofile(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Appprofile", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Appprofile), varargs...)
}

// GetAPIV1AppprofileID mocks base method.
func (m *MockClientInterface) GetAPIV1AppprofileID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1AppprofileID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1AppprofileID indicates an expected call of GetAPIV1AppprofileID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1AppprofileID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1AppprofileID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1AppprofileID), varargs...)
}

// GetAPIV1AppprofileSchema mocks base method.
func (m *MockClientInterface) GetAPIV1AppprofileSchema(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1AppprofileSchema", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1AppprofileSchema indicates an expected call of GetAPIV1AppprofileSchema.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1AppprofileSchema(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1AppprofileSchema", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1AppprofileSchema), varargs...)
}

// GetAPIV1Command mocks base method.
func (m *MockClientInterface) GetAPIV1Command(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Command", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Command indicates an expected call of GetAPIV1Command.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Command(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Command", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Command), varargs...)
}

// GetAPIV1CommandID mocks base method.
func (m *MockClientInterface) GetAPIV1CommandID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1CommandID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1CommandID indicates an expected call of GetAPIV1CommandID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1CommandID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1CommandID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1CommandID), varargs...)
}

// GetAPIV1ConfigDevelopment mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigDevelopment(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigDevelopment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigDevelopment indicates an expected call of GetAPIV1ConfigDevelopment.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigDevelopment(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigDevelopment", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigDevelopment), varargs...)
}

// GetAPIV1ConfigDevelopmentID mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigDevelopmentID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigDevelopmentID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigDevelopmentID indicates an expected call of GetAPIV1ConfigDevelopmentID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigDevelopmentID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigDevelopmentID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigDevelopmentID), varargs...)
}

// GetAPIV1ConfigDownloadclient mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigDownloadclient(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigDownloadclient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigDownloadclient indicates an expected call of GetAPIV1ConfigDownloadclient.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigDownloadclient(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigDownloadclient", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigDownloadclient), varargs...)
}

// GetAPIV1ConfigDownloadclientID mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigDownloadclientID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigDownloadclientID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigDownloadclientID indicates an expected call of GetAPIV1ConfigDownloadclientID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigDownloadclientID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigDownloadclientID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigDownloadclientID), varargs...)
}

// GetAPIV1ConfigHost mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigHost(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigHost", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigHost indicates an expected call of GetAPIV1ConfigHost.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigHost(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigHost", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigHost), varargs...)
}

// GetAPIV1ConfigHostID mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigHostID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigHostID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigHostID indicates an expected call of GetAPIV1ConfigHostID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigHostID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigHostID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigHostID), varargs...)
}

// GetAPIV1ConfigUI mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigUI(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigUI", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigUI indicates an expected call of GetAPIV1ConfigUI.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigUI(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigUI", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigUI), varargs...)
}

// GetAPIV1ConfigUIID mocks base method.
func (m *MockClientInterface) GetAPIV1ConfigUIID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1ConfigUIID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1ConfigUIID indicates an expected call of GetAPIV1ConfigUIID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1ConfigUIID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1ConfigUIID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1ConfigUIID), varargs...)
}

// GetAPIV1Customfilter mocks base method.
func (m *MockClientInterface) GetAPIV1Customfilter(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Customfilter", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Customfilter indicates an expected call of GetAPIV1Customfilter.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Customfilter(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Customfilter", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Customfilter), varargs...)
}

// GetAPIV1CustomfilterID mocks base method.
func (m *MockClientInterface) GetAPIV1CustomfilterID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1CustomfilterID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1CustomfilterID indicates an expected call of GetAPIV1CustomfilterID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1CustomfilterID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1CustomfilterID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1CustomfilterID), varargs...)
}

// GetAPIV1Downloadclient mocks base method.
func (m *MockClientInterface) GetAPIV1Downloadclient(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Downloadclient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Downloadclient indicates an expected call of GetAPIV1Downloadclient.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Downloadclient(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Downloadclient", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Downloadclient), varargs...)
}

// GetAPIV1DownloadclientID mocks base method.
func (m *MockClientInterface) GetAPIV1DownloadclientID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1DownloadclientID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1DownloadclientID indicates an expected call of GetAPIV1DownloadclientID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1DownloadclientID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1DownloadclientID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1DownloadclientID), varargs...)
}

// GetAPIV1DownloadclientSchema mocks base method.
func (m *MockClientInterface) GetAPIV1DownloadclientSchema(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1DownloadclientSchema", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1DownloadclientSchema indicates an expected call of GetAPIV1DownloadclientSchema.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1DownloadclientSchema(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1DownloadclientSchema", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1DownloadclientSchema), varargs...)
}

// GetAPIV1Filesystem mocks base method.
func (m *MockClientInterface) GetAPIV1Filesystem(arg0 context.Context, arg1 *prowlarr.GetAPIV1FilesystemParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Filesystem", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Filesystem indicates an expected call of GetAPIV1Filesystem.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Filesystem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Filesystem", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Filesystem), varargs...)
}

// GetAPIV1FilesystemType mocks base method.
func (m *MockClientInterface) GetAPIV1FilesystemType(arg0 context.Context, arg1 *prowlarr.GetAPIV1FilesystemTypeParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1FilesystemType", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1FilesystemType indicates an expected call of GetAPIV1FilesystemType.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1FilesystemType(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1FilesystemType", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1FilesystemType), varargs...)
}

// GetAPIV1Health mocks base method.
func (m *MockClientInterface) GetAPIV1Health(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Health", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Health indicates an expected call of GetAPIV1Health.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Health(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Health", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Health), varargs...)
}

// GetAPIV1History mocks base method.
func (m *MockClientInterface) GetAPIV1History(arg0 context.Context, arg1 *prowlarr.GetAPIV1HistoryParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1History", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1History indicates an expected call of GetAPIV1History.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1History(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1History", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1History), varargs...)
}

// GetAPIV1HistoryIndexer mocks base method.
func (m *MockClientInterface) GetAPIV1HistoryIndexer(arg0 context.Context, arg1 *prowlarr.GetAPIV1HistoryIndexerParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1HistoryIndexer", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1HistoryIndexer indicates an expected call of GetAPIV1HistoryIndexer.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1HistoryIndexer(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1HistoryIndexer", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1HistoryIndexer), varargs...)
}

// GetAPIV1HistorySince mocks base method.
func (m *MockClientInterface) GetAPIV1HistorySince(arg0 context.Context, arg1 *prowlarr.GetAPIV1HistorySinceParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1HistorySince", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1HistorySince indicates an expected call of GetAPIV1HistorySince.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1HistorySince(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1HistorySince", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1HistorySince), varargs...)
}

// GetAPIV1Indexer mocks base method.
func (m *MockClientInterface) GetAPIV1Indexer(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Indexer", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Indexer indicates an expected call of GetAPIV1Indexer.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Indexer(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Indexer", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Indexer), varargs...)
}

// GetAPIV1IndexerCategories mocks base method.
func (m *MockClientInterface) GetAPIV1IndexerCategories(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1IndexerCategories", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1IndexerCategories indicates an expected call of GetAPIV1IndexerCategories.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1IndexerCategories(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1IndexerCategories", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1IndexerCategories), varargs...)
}

// GetAPIV1IndexerID mocks base method.
func (m *MockClientInterface) GetAPIV1IndexerID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1IndexerID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1IndexerID indicates an expected call of GetAPIV1IndexerID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1IndexerID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1IndexerID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1IndexerID), varargs...)
}

// GetAPIV1IndexerIDDownload mocks base method.
func (m *MockClientInterface) GetAPIV1IndexerIDDownload(arg0 context.Context, arg1 int32, arg2 *prowlarr.GetAPIV1IndexerIDDownloadParams, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1IndexerIDDownload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1IndexerIDDownload indicates an expected call of GetAPIV1IndexerIDDownload.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1IndexerIDDownload(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1IndexerIDDownload", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1IndexerIDDownload), varargs...)
}

// GetAPIV1IndexerIDNewznab mocks base method.
func (m *MockClientInterface) GetAPIV1IndexerIDNewznab(arg0 context.Context, arg1 int32, arg2 *prowlarr.GetAPIV1IndexerIDNewznabParams, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1IndexerIDNewznab", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1IndexerIDNewznab indicates an expected call of GetAPIV1IndexerIDNewznab.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1IndexerIDNewznab(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1IndexerIDNewznab", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1IndexerIDNewznab), varargs...)
}

// GetAPIV1IndexerSchema mocks base method.
func (m *MockClientInterface) GetAPIV1IndexerSchema(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1IndexerSchema", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1IndexerSchema indicates an expected call of GetAPIV1IndexerSchema.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1IndexerSchema(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1IndexerSchema", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1IndexerSchema), varargs...)
}

// GetAPIV1Indexerproxy mocks base method.
func (m *MockClientInterface) GetAPIV1Indexerproxy(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Indexerproxy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Indexerproxy indicates an expected call of GetAPIV1Indexerproxy.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Indexerproxy(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Indexerproxy", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Indexerproxy), varargs...)
}

// GetAPIV1IndexerproxyID mocks base method.
func (m *MockClientInterface) GetAPIV1IndexerproxyID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1IndexerproxyID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1IndexerproxyID indicates an expected call of GetAPIV1IndexerproxyID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1IndexerproxyID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1IndexerproxyID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1IndexerproxyID), varargs...)
}

// GetAPIV1IndexerproxySchema mocks base method.
func (m *MockClientInterface) GetAPIV1IndexerproxySchema(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1IndexerproxySchema", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1IndexerproxySchema indicates an expected call of GetAPIV1IndexerproxySchema.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1IndexerproxySchema(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1IndexerproxySchema", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1IndexerproxySchema), varargs...)
}

// GetAPIV1Indexerstats mocks base method.
func (m *MockClientInterface) GetAPIV1Indexerstats(arg0 context.Context, arg1 *prowlarr.GetAPIV1IndexerstatsParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Indexerstats", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Indexerstats indicates an expected call of GetAPIV1Indexerstats.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Indexerstats(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Indexerstats", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Indexerstats), varargs...)
}

// GetAPIV1Indexerstatus mocks base method.
func (m *MockClientInterface) GetAPIV1Indexerstatus(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Indexerstatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Indexerstatus indicates an expected call of GetAPIV1Indexerstatus.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Indexerstatus(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Indexerstatus", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Indexerstatus), varargs...)
}

// GetAPIV1Localization mocks base method.
func (m *MockClientInterface) GetAPIV1Localization(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Localization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Localization indicates an expected call of GetAPIV1Localization.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Localization(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Localization", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Localization), varargs...)
}

// GetAPIV1LocalizationOptions mocks base method.
func (m *MockClientInterface) GetAPIV1LocalizationOptions(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1LocalizationOptions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1LocalizationOptions indicates an expected call of GetAPIV1LocalizationOptions.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1LocalizationOptions(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1LocalizationOptions", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1LocalizationOptions), varargs...)
}

// GetAPIV1Log mocks base method.
func (m *MockClientInterface) GetAPIV1Log(arg0 context.Context, arg1 *prowlarr.GetAPIV1LogParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Log", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Log indicates an expected call of GetAPIV1Log.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Log(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Log", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Log), varargs...)
}

// GetAPIV1LogFile mocks base method.
func (m *MockClientInterface) GetAPIV1LogFile(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1LogFile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1LogFile indicates an expected call of GetAPIV1LogFile.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1LogFile(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1LogFile", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1LogFile), varargs...)
}

// GetAPIV1LogFileFilename mocks base method.
func (m *MockClientInterface) GetAPIV1LogFileFilename(arg0 context.Context, arg1 string, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1LogFileFilename", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1LogFileFilename indicates an expected call of GetAPIV1LogFileFilename.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1LogFileFilename(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1LogFileFilename", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1LogFileFilename), varargs...)
}

// GetAPIV1LogFileUpdate mocks base method.
func (m *MockClientInterface) GetAPIV1LogFileUpdate(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1LogFileUpdate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1LogFileUpdate indicates an expected call of GetAPIV1LogFileUpdate.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1LogFileUpdate(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1LogFileUpdate", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1LogFileUpdate), varargs...)
}

// GetAPIV1LogFileUpdateFilename mocks base method.
func (m *MockClientInterface) GetAPIV1LogFileUpdateFilename(arg0 context.Context, arg1 string, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1LogFileUpdateFilename", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1LogFileUpdateFilename indicates an expected call of GetAPIV1LogFileUpdateFilename.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1LogFileUpdateFilename(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1LogFileUpdateFilename", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1LogFileUpdateFilename), varargs...)
}

// GetAPIV1Notification mocks base method.
func (m *MockClientInterface) GetAPIV1Notification(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Notification", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Notification indicates an expected call of GetAPIV1Notification.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Notification(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Notification", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Notification), varargs...)
}

// GetAPIV1NotificationID mocks base method.
func (m *MockClientInterface) GetAPIV1NotificationID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1NotificationID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1NotificationID indicates an expected call of GetAPIV1NotificationID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1NotificationID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1NotificationID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1NotificationID), varargs...)
}

// GetAPIV1NotificationSchema mocks base method.
func (m *MockClientInterface) GetAPIV1NotificationSchema(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1NotificationSchema", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1NotificationSchema indicates an expected call of GetAPIV1NotificationSchema.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1NotificationSchema(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1NotificationSchema", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1NotificationSchema), varargs...)
}

// GetAPIV1Search mocks base method.
func (m *MockClientInterface) GetAPIV1Search(arg0 context.Context, arg1 *prowlarr.GetAPIV1SearchParams, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Search", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Search indicates an expected call of GetAPIV1Search.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Search(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Search", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Search), varargs...)
}

// GetAPIV1SystemBackup mocks base method.
func (m *MockClientInterface) GetAPIV1SystemBackup(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1SystemBackup", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1SystemBackup indicates an expected call of GetAPIV1SystemBackup.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1SystemBackup(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1SystemBackup", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1SystemBackup), varargs...)
}

// GetAPIV1SystemRoutes mocks base method.
func (m *MockClientInterface) GetAPIV1SystemRoutes(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1SystemRoutes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1SystemRoutes indicates an expected call of GetAPIV1SystemRoutes.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1SystemRoutes(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1SystemRoutes", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1SystemRoutes), varargs...)
}

// GetAPIV1SystemRoutesDuplicate mocks base method.
func (m *MockClientInterface) GetAPIV1SystemRoutesDuplicate(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1SystemRoutesDuplicate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1SystemRoutesDuplicate indicates an expected call of GetAPIV1SystemRoutesDuplicate.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1SystemRoutesDuplicate(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1SystemRoutesDuplicate", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1SystemRoutesDuplicate), varargs...)
}

// GetAPIV1SystemStatus mocks base method.
func (m *MockClientInterface) GetAPIV1SystemStatus(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1SystemStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1SystemStatus indicates an expected call of GetAPIV1SystemStatus.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1SystemStatus(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1SystemStatus", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1SystemStatus), varargs...)
}

// GetAPIV1SystemTask mocks base method.
func (m *MockClientInterface) GetAPIV1SystemTask(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1SystemTask", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1SystemTask indicates an expected call of GetAPIV1SystemTask.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1SystemTask(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1SystemTask", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1SystemTask), varargs...)
}

// GetAPIV1SystemTaskID mocks base method.
func (m *MockClientInterface) GetAPIV1SystemTaskID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1SystemTaskID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1SystemTaskID indicates an expected call of GetAPIV1SystemTaskID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1SystemTaskID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1SystemTaskID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1SystemTaskID), varargs...)
}

// GetAPIV1Tag mocks base method.
func (m *MockClientInterface) GetAPIV1Tag(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Tag", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Tag indicates an expected call of GetAPIV1Tag.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Tag(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Tag", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Tag), varargs...)
}

// GetAPIV1TagDetail mocks base method.
func (m *MockClientInterface) GetAPIV1TagDetail(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1TagDetail", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1TagDetail indicates an expected call of GetAPIV1TagDetail.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1TagDetail(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1TagDetail", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1TagDetail), varargs...)
}

// GetAPIV1TagDetailID mocks base method.
func (m *MockClientInterface) GetAPIV1TagDetailID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1TagDetailID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1TagDetailID indicates an expected call of GetAPIV1TagDetailID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1TagDetailID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1TagDetailID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1TagDetailID), varargs...)
}

// GetAPIV1TagID mocks base method.
func (m *MockClientInterface) GetAPIV1TagID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1TagID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1TagID indicates an expected call of GetAPIV1TagID.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1TagID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1TagID", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1TagID), varargs...)
}

// GetAPIV1Update mocks base method.
func (m *MockClientInterface) GetAPIV1Update(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIV1Update", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIV1Update indicates an expected call of GetAPIV1Update.
func (mr *MockClientInterfaceMockRecorder) GetAPIV1Update(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIV1Update", reflect.TypeOf((*MockClientInterface)(nil).GetAPIV1Update), varargs...)
}

// GetContentPath mocks base method.
func (m *MockClientInterface) GetContentPath(arg0 context.Context, arg1 string, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentPath", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentPath indicates an expected call of GetContentPath.
func (mr *MockClientInterfaceMockRecorder) GetContentPath(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentPath", reflect.TypeOf((*MockClientInterface)(nil).GetContentPath), varargs...)
}

// GetIDAPI mocks base method.
func (m *MockClientInterface) GetIDAPI(arg0 context.Context, arg1 int32, arg2 *prowlarr.GetIDAPIParams, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIDAPI", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDAPI indicates an expected call of GetIDAPI.
func (mr *MockClientInterfaceMockRecorder) GetIDAPI(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDAPI", reflect.TypeOf((*MockClientInterface)(nil).GetIDAPI), varargs...)
}

// GetIDDownload mocks base method.
func (m *MockClientInterface) GetIDDownload(arg0 context.Context, arg1 int32, arg2 *prowlarr.GetIDDownloadParams, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIDDownload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDDownload indicates an expected call of GetIDDownload.
func (mr *MockClientInterfaceMockRecorder) GetIDDownload(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDDownload", reflect.TypeOf((*MockClientInterface)(nil).GetIDDownload), varargs...)
}

// GetLogin mocks base method.
func (m *MockClientInterface) GetLogin(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogin", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockClientInterfaceMockRecorder) GetLogin(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockClientInterface)(nil).GetLogin), varargs...)
}

// GetLogout mocks base method.
func (m *MockClientInterface) GetLogout(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogout", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogout indicates an expected call of GetLogout.
func (mr *MockClientInterfaceMockRecorder) GetLogout(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogout", reflect.TypeOf((*MockClientInterface)(nil).GetLogout), varargs...)
}

// GetPath mocks base method.
func (m *MockClientInterface) GetPath(arg0 context.Context, arg1 string, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPath", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPath indicates an expected call of GetPath.
func (mr *MockClientInterfaceMockRecorder) GetPath(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockClientInterface)(nil).GetPath), varargs...)
}

// GetPing mocks base method.
func (m *MockClientInterface) GetPing(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPing", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPing indicates an expected call of GetPing.
func (mr *MockClientInterfaceMockRecorder) GetPing(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPing", reflect.TypeOf((*MockClientInterface)(nil).GetPing), varargs...)
}

// HeadPing mocks base method.
func (m *MockClientInterface) HeadPing(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadPing", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadPing indicates an expected call of HeadPing.
func (mr *MockClientInterfaceMockRecorder) HeadPing(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadPing", reflect.TypeOf((*MockClientInterface)(nil).HeadPing), varargs...)
}

// PostAPIV1Applications mocks base method.
func (m *MockClientInterface) PostAPIV1Applications(arg0 context.Context, arg1 *prowlarr.PostAPIV1ApplicationsParams, arg2 prowlarr.ApplicationResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Applications", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Applications indicates an expected call of PostAPIV1Applications.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Applications(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Applications", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Applications), varargs...)
}

// PostAPIV1ApplicationsActionName mocks base method.
func (m *MockClientInterface) PostAPIV1ApplicationsActionName(arg0 context.Context, arg1 string, arg2 prowlarr.ApplicationResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1ApplicationsActionName", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1ApplicationsActionName indicates an expected call of PostAPIV1ApplicationsActionName.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1ApplicationsActionName(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1ApplicationsActionName", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1ApplicationsActionName), varargs...)
}

// PostAPIV1ApplicationsActionNameWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1ApplicationsActionNameWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1ApplicationsActionNameWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1ApplicationsActionNameWithBody indicates an expected call of PostAPIV1ApplicationsActionNameWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1ApplicationsActionNameWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1ApplicationsActionNameWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1ApplicationsActionNameWithBody), varargs...)
}

// PostAPIV1ApplicationsTest mocks base method.
func (m *MockClientInterface) PostAPIV1ApplicationsTest(arg0 context.Context, arg1 *prowlarr.PostAPIV1ApplicationsTestParams, arg2 prowlarr.ApplicationResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1ApplicationsTest", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1ApplicationsTest indicates an expected call of PostAPIV1ApplicationsTest.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1ApplicationsTest(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1ApplicationsTest", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1ApplicationsTest), varargs...)
}

// PostAPIV1ApplicationsTestWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1ApplicationsTestWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1ApplicationsTestParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1ApplicationsTestWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1ApplicationsTestWithBody indicates an expected call of PostAPIV1ApplicationsTestWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1ApplicationsTestWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1ApplicationsTestWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1ApplicationsTestWithBody), varargs...)
}

// PostAPIV1ApplicationsTestall mocks base method.
func (m *MockClientInterface) PostAPIV1ApplicationsTestall(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1ApplicationsTestall", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1ApplicationsTestall indicates an expected call of PostAPIV1ApplicationsTestall.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1ApplicationsTestall(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1ApplicationsTestall", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1ApplicationsTestall), varargs...)
}

// PostAPIV1ApplicationsWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1ApplicationsWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1ApplicationsParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1ApplicationsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1ApplicationsWithBody indicates an expected call of PostAPIV1ApplicationsWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1ApplicationsWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1ApplicationsWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1ApplicationsWithBody), varargs...)
}

// PostAPIV1Appprofile mocks base method.
func (m *MockClientInterface) PostAPIV1Appprofile(arg0 context.Context, arg1 prowlarr.AppProfileResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Appprofile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Appprofile indicates an expected call of PostAPIV1Appprofile.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Appprofile(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Appprofile", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Appprofile), varargs...)
}

// PostAPIV1AppprofileWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1AppprofileWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1AppprofileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1AppprofileWithBody indicates an expected call of PostAPIV1AppprofileWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1AppprofileWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1AppprofileWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1AppprofileWithBody), varargs...)
}

// PostAPIV1Command mocks base method.
func (m *MockClientInterface) PostAPIV1Command(arg0 context.Context, arg1 prowlarr.CommandResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Command", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Command indicates an expected call of PostAPIV1Command.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Command(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Command", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Command), varargs...)
}

// PostAPIV1CommandWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1CommandWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1CommandWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1CommandWithBody indicates an expected call of PostAPIV1CommandWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1CommandWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1CommandWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1CommandWithBody), varargs...)
}

// PostAPIV1Customfilter mocks base method.
func (m *MockClientInterface) PostAPIV1Customfilter(arg0 context.Context, arg1 prowlarr.CustomFilterResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Customfilter", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Customfilter indicates an expected call of PostAPIV1Customfilter.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Customfilter(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Customfilter", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Customfilter), varargs...)
}

// PostAPIV1CustomfilterWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1CustomfilterWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1CustomfilterWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1CustomfilterWithBody indicates an expected call of PostAPIV1CustomfilterWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1CustomfilterWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1CustomfilterWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1CustomfilterWithBody), varargs...)
}

// PostAPIV1Downloadclient mocks base method.
func (m *MockClientInterface) PostAPIV1Downloadclient(arg0 context.Context, arg1 *prowlarr.PostAPIV1DownloadclientParams, arg2 prowlarr.DownloadClientResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Downloadclient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Downloadclient indicates an expected call of PostAPIV1Downloadclient.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Downloadclient(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Downloadclient", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Downloadclient), varargs...)
}

// PostAPIV1DownloadclientActionName mocks base method.
func (m *MockClientInterface) PostAPIV1DownloadclientActionName(arg0 context.Context, arg1 string, arg2 prowlarr.DownloadClientResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1DownloadclientActionName", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1DownloadclientActionName indicates an expected call of PostAPIV1DownloadclientActionName.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1DownloadclientActionName(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1DownloadclientActionName", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1DownloadclientActionName), varargs...)
}

// PostAPIV1DownloadclientActionNameWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1DownloadclientActionNameWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1DownloadclientActionNameWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1DownloadclientActionNameWithBody indicates an expected call of PostAPIV1DownloadclientActionNameWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1DownloadclientActionNameWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1DownloadclientActionNameWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1DownloadclientActionNameWithBody), varargs...)
}

// PostAPIV1DownloadclientTest mocks base method.
func (m *MockClientInterface) PostAPIV1DownloadclientTest(arg0 context.Context, arg1 *prowlarr.PostAPIV1DownloadclientTestParams, arg2 prowlarr.DownloadClientResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1DownloadclientTest", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1DownloadclientTest indicates an expected call of PostAPIV1DownloadclientTest.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1DownloadclientTest(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1DownloadclientTest", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1DownloadclientTest), varargs...)
}

// PostAPIV1DownloadclientTestWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1DownloadclientTestWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1DownloadclientTestParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1DownloadclientTestWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1DownloadclientTestWithBody indicates an expected call of PostAPIV1DownloadclientTestWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1DownloadclientTestWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1DownloadclientTestWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1DownloadclientTestWithBody), varargs...)
}

// PostAPIV1DownloadclientTestall mocks base method.
func (m *MockClientInterface) PostAPIV1DownloadclientTestall(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1DownloadclientTestall", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1DownloadclientTestall indicates an expected call of PostAPIV1DownloadclientTestall.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1DownloadclientTestall(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1DownloadclientTestall", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1DownloadclientTestall), varargs...)
}

// PostAPIV1DownloadclientWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1DownloadclientWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1DownloadclientParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1DownloadclientWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1DownloadclientWithBody indicates an expected call of PostAPIV1DownloadclientWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1DownloadclientWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1DownloadclientWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1DownloadclientWithBody), varargs...)
}

// PostAPIV1Indexer mocks base method.
func (m *MockClientInterface) PostAPIV1Indexer(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerParams, arg2 prowlarr.IndexerResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Indexer", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Indexer indicates an expected call of PostAPIV1Indexer.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Indexer(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Indexer", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Indexer), varargs...)
}

// PostAPIV1IndexerActionName mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerActionName(arg0 context.Context, arg1 string, arg2 prowlarr.IndexerResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerActionName", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerActionName indicates an expected call of PostAPIV1IndexerActionName.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerActionName(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerActionName", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerActionName), varargs...)
}

// PostAPIV1IndexerActionNameWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerActionNameWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerActionNameWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerActionNameWithBody indicates an expected call of PostAPIV1IndexerActionNameWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerActionNameWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerActionNameWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerActionNameWithBody), varargs...)
}

// PostAPIV1IndexerTest mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerTest(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerTestParams, arg2 prowlarr.IndexerResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerTest", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerTest indicates an expected call of PostAPIV1IndexerTest.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerTest(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerTest", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerTest), varargs...)
}

// PostAPIV1IndexerTestWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerTestWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerTestParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerTestWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerTestWithBody indicates an expected call of PostAPIV1IndexerTestWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerTestWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerTestWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerTestWithBody), varargs...)
}

// PostAPIV1IndexerTestall mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerTestall(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerTestall", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerTestall indicates an expected call of PostAPIV1IndexerTestall.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerTestall(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerTestall", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerTestall), varargs...)
}

// PostAPIV1IndexerWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerWithBody indicates an expected call of PostAPIV1IndexerWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerWithBody), varargs...)
}

// PostAPIV1Indexerproxy mocks base method.
func (m *MockClientInterface) PostAPIV1Indexerproxy(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerproxyParams, arg2 prowlarr.IndexerProxyResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Indexerproxy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Indexerproxy indicates an expected call of PostAPIV1Indexerproxy.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Indexerproxy(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Indexerproxy", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Indexerproxy), varargs...)
}

// PostAPIV1IndexerproxyActionName mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerproxyActionName(arg0 context.Context, arg1 string, arg2 prowlarr.IndexerProxyResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerproxyActionName", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerproxyActionName indicates an expected call of PostAPIV1IndexerproxyActionName.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerproxyActionName(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerproxyActionName", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerproxyActionName), varargs...)
}

// PostAPIV1IndexerproxyActionNameWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerproxyActionNameWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerproxyActionNameWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerproxyActionNameWithBody indicates an expected call of PostAPIV1IndexerproxyActionNameWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerproxyActionNameWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerproxyActionNameWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerproxyActionNameWithBody), varargs...)
}

// PostAPIV1IndexerproxyTest mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerproxyTest(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerproxyTestParams, arg2 prowlarr.IndexerProxyResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerproxyTest", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerproxyTest indicates an expected call of PostAPIV1IndexerproxyTest.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerproxyTest(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerproxyTest", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerproxyTest), varargs...)
}

// PostAPIV1IndexerproxyTestWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerproxyTestWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerproxyTestParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerproxyTestWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerproxyTestWithBody indicates an expected call of PostAPIV1IndexerproxyTestWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerproxyTestWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerproxyTestWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerproxyTestWithBody), varargs...)
}

// PostAPIV1IndexerproxyTestall mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerproxyTestall(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerproxyTestall", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerproxyTestall indicates an expected call of PostAPIV1IndexerproxyTestall.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerproxyTestall(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerproxyTestall", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerproxyTestall), varargs...)
}

// PostAPIV1IndexerproxyWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1IndexerproxyWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1IndexerproxyParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1IndexerproxyWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1IndexerproxyWithBody indicates an expected call of PostAPIV1IndexerproxyWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1IndexerproxyWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1IndexerproxyWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1IndexerproxyWithBody), varargs...)
}

// PostAPIV1Notification mocks base method.
func (m *MockClientInterface) PostAPIV1Notification(arg0 context.Context, arg1 *prowlarr.PostAPIV1NotificationParams, arg2 prowlarr.NotificationResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Notification", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Notification indicates an expected call of PostAPIV1Notification.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Notification(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Notification", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Notification), varargs...)
}

// PostAPIV1NotificationActionName mocks base method.
func (m *MockClientInterface) PostAPIV1NotificationActionName(arg0 context.Context, arg1 string, arg2 prowlarr.NotificationResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1NotificationActionName", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1NotificationActionName indicates an expected call of PostAPIV1NotificationActionName.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1NotificationActionName(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1NotificationActionName", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1NotificationActionName), varargs...)
}

// PostAPIV1NotificationActionNameWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1NotificationActionNameWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1NotificationActionNameWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1NotificationActionNameWithBody indicates an expected call of PostAPIV1NotificationActionNameWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1NotificationActionNameWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1NotificationActionNameWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1NotificationActionNameWithBody), varargs...)
}

// PostAPIV1NotificationTest mocks base method.
func (m *MockClientInterface) PostAPIV1NotificationTest(arg0 context.Context, arg1 *prowlarr.PostAPIV1NotificationTestParams, arg2 prowlarr.NotificationResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1NotificationTest", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1NotificationTest indicates an expected call of PostAPIV1NotificationTest.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1NotificationTest(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1NotificationTest", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1NotificationTest), varargs...)
}

// PostAPIV1NotificationTestWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1NotificationTestWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1NotificationTestParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1NotificationTestWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1NotificationTestWithBody indicates an expected call of PostAPIV1NotificationTestWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1NotificationTestWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1NotificationTestWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1NotificationTestWithBody), varargs...)
}

// PostAPIV1NotificationTestall mocks base method.
func (m *MockClientInterface) PostAPIV1NotificationTestall(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1NotificationTestall", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1NotificationTestall indicates an expected call of PostAPIV1NotificationTestall.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1NotificationTestall(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1NotificationTestall", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1NotificationTestall), varargs...)
}

// PostAPIV1NotificationWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1NotificationWithBody(arg0 context.Context, arg1 *prowlarr.PostAPIV1NotificationParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1NotificationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1NotificationWithBody indicates an expected call of PostAPIV1NotificationWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1NotificationWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1NotificationWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1NotificationWithBody), varargs...)
}

// PostAPIV1Search mocks base method.
func (m *MockClientInterface) PostAPIV1Search(arg0 context.Context, arg1 prowlarr.ReleaseResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Search", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Search indicates an expected call of PostAPIV1Search.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Search(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Search", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Search), varargs...)
}

// PostAPIV1SearchBulk mocks base method.
func (m *MockClientInterface) PostAPIV1SearchBulk(arg0 context.Context, arg1 []prowlarr.ReleaseResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1SearchBulk", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1SearchBulk indicates an expected call of PostAPIV1SearchBulk.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1SearchBulk(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1SearchBulk", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1SearchBulk), varargs...)
}

// PostAPIV1SearchBulkWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1SearchBulkWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1SearchBulkWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1SearchBulkWithBody indicates an expected call of PostAPIV1SearchBulkWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1SearchBulkWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1SearchBulkWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1SearchBulkWithBody), varargs...)
}

// PostAPIV1SearchWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1SearchWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1SearchWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1SearchWithBody indicates an expected call of PostAPIV1SearchWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1SearchWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1SearchWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1SearchWithBody), varargs...)
}

// PostAPIV1SystemBackupRestoreID mocks base method.
func (m *MockClientInterface) PostAPIV1SystemBackupRestoreID(arg0 context.Context, arg1 int32, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1SystemBackupRestoreID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1SystemBackupRestoreID indicates an expected call of PostAPIV1SystemBackupRestoreID.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1SystemBackupRestoreID(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1SystemBackupRestoreID", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1SystemBackupRestoreID), varargs...)
}

// PostAPIV1SystemBackupRestoreUpload mocks base method.
func (m *MockClientInterface) PostAPIV1SystemBackupRestoreUpload(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1SystemBackupRestoreUpload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1SystemBackupRestoreUpload indicates an expected call of PostAPIV1SystemBackupRestoreUpload.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1SystemBackupRestoreUpload(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1SystemBackupRestoreUpload", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1SystemBackupRestoreUpload), varargs...)
}

// PostAPIV1SystemRestart mocks base method.
func (m *MockClientInterface) PostAPIV1SystemRestart(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1SystemRestart", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1SystemRestart indicates an expected call of PostAPIV1SystemRestart.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1SystemRestart(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1SystemRestart", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1SystemRestart), varargs...)
}

// PostAPIV1SystemShutdown mocks base method.
func (m *MockClientInterface) PostAPIV1SystemShutdown(arg0 context.Context, arg1 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1SystemShutdown", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1SystemShutdown indicates an expected call of PostAPIV1SystemShutdown.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1SystemShutdown(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1SystemShutdown", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1SystemShutdown), varargs...)
}

// PostAPIV1Tag mocks base method.
func (m *MockClientInterface) PostAPIV1Tag(arg0 context.Context, arg1 prowlarr.TagResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1Tag", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1Tag indicates an expected call of PostAPIV1Tag.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1Tag(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1Tag", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1Tag), varargs...)
}

// PostAPIV1TagWithBody mocks base method.
func (m *MockClientInterface) PostAPIV1TagWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAPIV1TagWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAPIV1TagWithBody indicates an expected call of PostAPIV1TagWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAPIV1TagWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAPIV1TagWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAPIV1TagWithBody), varargs...)
}

// PostLoginWithBody mocks base method.
func (m *MockClientInterface) PostLoginWithBody(arg0 context.Context, arg1 *prowlarr.PostLoginParams, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostLoginWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostLoginWithBody indicates an expected call of PostLoginWithBody.
func (mr *MockClientInterfaceMockRecorder) PostLoginWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLoginWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostLoginWithBody), varargs...)
}

// PutAPIV1ApplicationsBulk mocks base method.
func (m *MockClientInterface) PutAPIV1ApplicationsBulk(arg0 context.Context, arg1 prowlarr.ApplicationBulkResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ApplicationsBulk", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ApplicationsBulk indicates an expected call of PutAPIV1ApplicationsBulk.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ApplicationsBulk(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ApplicationsBulk", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ApplicationsBulk), varargs...)
}

// PutAPIV1ApplicationsBulkWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1ApplicationsBulkWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ApplicationsBulkWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ApplicationsBulkWithBody indicates an expected call of PutAPIV1ApplicationsBulkWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ApplicationsBulkWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ApplicationsBulkWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ApplicationsBulkWithBody), varargs...)
}

// PutAPIV1ApplicationsID mocks base method.
func (m *MockClientInterface) PutAPIV1ApplicationsID(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1ApplicationsIDParams, arg3 prowlarr.ApplicationResource, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ApplicationsID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ApplicationsID indicates an expected call of PutAPIV1ApplicationsID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ApplicationsID(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ApplicationsID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ApplicationsID), varargs...)
}

// PutAPIV1ApplicationsIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1ApplicationsIDWithBody(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1ApplicationsIDParams, arg3 string, arg4 io.Reader, arg5 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ApplicationsIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ApplicationsIDWithBody indicates an expected call of PutAPIV1ApplicationsIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ApplicationsIDWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ApplicationsIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ApplicationsIDWithBody), varargs...)
}

// PutAPIV1AppprofileID mocks base method.
func (m *MockClientInterface) PutAPIV1AppprofileID(arg0 context.Context, arg1 string, arg2 prowlarr.AppProfileResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1AppprofileID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1AppprofileID indicates an expected call of PutAPIV1AppprofileID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1AppprofileID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1AppprofileID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1AppprofileID), varargs...)
}

// PutAPIV1AppprofileIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1AppprofileIDWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1AppprofileIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1AppprofileIDWithBody indicates an expected call of PutAPIV1AppprofileIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1AppprofileIDWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1AppprofileIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1AppprofileIDWithBody), varargs...)
}

// PutAPIV1ConfigDevelopmentID mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigDevelopmentID(arg0 context.Context, arg1 string, arg2 prowlarr.DevelopmentConfigResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigDevelopmentID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigDevelopmentID indicates an expected call of PutAPIV1ConfigDevelopmentID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigDevelopmentID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigDevelopmentID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigDevelopmentID), varargs...)
}

// PutAPIV1ConfigDevelopmentIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigDevelopmentIDWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigDevelopmentIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigDevelopmentIDWithBody indicates an expected call of PutAPIV1ConfigDevelopmentIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigDevelopmentIDWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigDevelopmentIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigDevelopmentIDWithBody), varargs...)
}

// PutAPIV1ConfigDownloadclientID mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigDownloadclientID(arg0 context.Context, arg1 string, arg2 prowlarr.DownloadClientConfigResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigDownloadclientID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigDownloadclientID indicates an expected call of PutAPIV1ConfigDownloadclientID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigDownloadclientID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigDownloadclientID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigDownloadclientID), varargs...)
}

// PutAPIV1ConfigDownloadclientIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigDownloadclientIDWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigDownloadclientIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigDownloadclientIDWithBody indicates an expected call of PutAPIV1ConfigDownloadclientIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigDownloadclientIDWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigDownloadclientIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigDownloadclientIDWithBody), varargs...)
}

// PutAPIV1ConfigHostID mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigHostID(arg0 context.Context, arg1 string, arg2 prowlarr.HostConfigResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigHostID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigHostID indicates an expected call of PutAPIV1ConfigHostID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigHostID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigHostID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigHostID), varargs...)
}

// PutAPIV1ConfigHostIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigHostIDWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigHostIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigHostIDWithBody indicates an expected call of PutAPIV1ConfigHostIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigHostIDWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigHostIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigHostIDWithBody), varargs...)
}

// PutAPIV1ConfigUIID mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigUIID(arg0 context.Context, arg1 string, arg2 prowlarr.UIConfigResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigUIID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigUIID indicates an expected call of PutAPIV1ConfigUIID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigUIID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigUIID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigUIID), varargs...)
}

// PutAPIV1ConfigUIIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1ConfigUIIDWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1ConfigUIIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1ConfigUIIDWithBody indicates an expected call of PutAPIV1ConfigUIIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1ConfigUIIDWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1ConfigUIIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1ConfigUIIDWithBody), varargs...)
}

// PutAPIV1CustomfilterID mocks base method.
func (m *MockClientInterface) PutAPIV1CustomfilterID(arg0 context.Context, arg1 string, arg2 prowlarr.CustomFilterResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1CustomfilterID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1CustomfilterID indicates an expected call of PutAPIV1CustomfilterID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1CustomfilterID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1CustomfilterID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1CustomfilterID), varargs...)
}

// PutAPIV1CustomfilterIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1CustomfilterIDWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1CustomfilterIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1CustomfilterIDWithBody indicates an expected call of PutAPIV1CustomfilterIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1CustomfilterIDWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1CustomfilterIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1CustomfilterIDWithBody), varargs...)
}

// PutAPIV1DownloadclientBulk mocks base method.
func (m *MockClientInterface) PutAPIV1DownloadclientBulk(arg0 context.Context, arg1 prowlarr.DownloadClientBulkResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1DownloadclientBulk", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1DownloadclientBulk indicates an expected call of PutAPIV1DownloadclientBulk.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1DownloadclientBulk(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1DownloadclientBulk", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1DownloadclientBulk), varargs...)
}

// PutAPIV1DownloadclientBulkWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1DownloadclientBulkWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1DownloadclientBulkWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1DownloadclientBulkWithBody indicates an expected call of PutAPIV1DownloadclientBulkWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1DownloadclientBulkWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1DownloadclientBulkWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1DownloadclientBulkWithBody), varargs...)
}

// PutAPIV1DownloadclientID mocks base method.
func (m *MockClientInterface) PutAPIV1DownloadclientID(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1DownloadclientIDParams, arg3 prowlarr.DownloadClientResource, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1DownloadclientID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1DownloadclientID indicates an expected call of PutAPIV1DownloadclientID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1DownloadclientID(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1DownloadclientID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1DownloadclientID), varargs...)
}

// PutAPIV1DownloadclientIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1DownloadclientIDWithBody(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1DownloadclientIDParams, arg3 string, arg4 io.Reader, arg5 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1DownloadclientIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1DownloadclientIDWithBody indicates an expected call of PutAPIV1DownloadclientIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1DownloadclientIDWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1DownloadclientIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1DownloadclientIDWithBody), varargs...)
}

// PutAPIV1IndexerBulk mocks base method.
func (m *MockClientInterface) PutAPIV1IndexerBulk(arg0 context.Context, arg1 prowlarr.IndexerBulkResource, arg2 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1IndexerBulk", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1IndexerBulk indicates an expected call of PutAPIV1IndexerBulk.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1IndexerBulk(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1IndexerBulk", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1IndexerBulk), varargs...)
}

// PutAPIV1IndexerBulkWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1IndexerBulkWithBody(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1IndexerBulkWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1IndexerBulkWithBody indicates an expected call of PutAPIV1IndexerBulkWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1IndexerBulkWithBody(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1IndexerBulkWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1IndexerBulkWithBody), varargs...)
}

// PutAPIV1IndexerID mocks base method.
func (m *MockClientInterface) PutAPIV1IndexerID(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1IndexerIDParams, arg3 prowlarr.IndexerResource, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1IndexerID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1IndexerID indicates an expected call of PutAPIV1IndexerID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1IndexerID(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1IndexerID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1IndexerID), varargs...)
}

// PutAPIV1IndexerIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1IndexerIDWithBody(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1IndexerIDParams, arg3 string, arg4 io.Reader, arg5 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1IndexerIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1IndexerIDWithBody indicates an expected call of PutAPIV1IndexerIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1IndexerIDWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1IndexerIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1IndexerIDWithBody), varargs...)
}

// PutAPIV1IndexerproxyID mocks base method.
func (m *MockClientInterface) PutAPIV1IndexerproxyID(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1IndexerproxyIDParams, arg3 prowlarr.IndexerProxyResource, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1IndexerproxyID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1IndexerproxyID indicates an expected call of PutAPIV1IndexerproxyID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1IndexerproxyID(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1IndexerproxyID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1IndexerproxyID), varargs...)
}

// PutAPIV1IndexerproxyIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1IndexerproxyIDWithBody(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1IndexerproxyIDParams, arg3 string, arg4 io.Reader, arg5 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1IndexerproxyIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1IndexerproxyIDWithBody indicates an expected call of PutAPIV1IndexerproxyIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1IndexerproxyIDWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1IndexerproxyIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1IndexerproxyIDWithBody), varargs...)
}

// PutAPIV1NotificationID mocks base method.
func (m *MockClientInterface) PutAPIV1NotificationID(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1NotificationIDParams, arg3 prowlarr.NotificationResource, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1NotificationID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1NotificationID indicates an expected call of PutAPIV1NotificationID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1NotificationID(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1NotificationID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1NotificationID), varargs...)
}

// PutAPIV1NotificationIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1NotificationIDWithBody(arg0 context.Context, arg1 string, arg2 *prowlarr.PutAPIV1NotificationIDParams, arg3 string, arg4 io.Reader, arg5 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1NotificationIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1NotificationIDWithBody indicates an expected call of PutAPIV1NotificationIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1NotificationIDWithBody(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1NotificationIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1NotificationIDWithBody), varargs...)
}

// PutAPIV1TagID mocks base method.
func (m *MockClientInterface) PutAPIV1TagID(arg0 context.Context, arg1 string, arg2 prowlarr.TagResource, arg3 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1TagID", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1TagID indicates an expected call of PutAPIV1TagID.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1TagID(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1TagID", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1TagID), varargs...)
}

// PutAPIV1TagIDWithBody mocks base method.
func (m *MockClientInterface) PutAPIV1TagIDWithBody(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 ...prowlarr.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAPIV1TagIDWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAPIV1TagIDWithBody indicates an expected call of PutAPIV1TagIDWithBody.
func (mr *MockClientInterfaceMockRecorder) PutAPIV1TagIDWithBody(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPIV1TagIDWithBody", reflect.TypeOf((*MockClientInterface)(nil).PutAPIV1TagIDWithBody), varargs...)
}
