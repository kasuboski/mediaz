// Package prowlarr provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package prowlarr

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
)

const (
	X_Api_KeyScopes = "X_Api_Key.Scopes"
	ApikeyScopes    = "apikey.Scopes"
)

// Defines values for ApplicationSyncLevel.
const (
	ApplicationSyncLevelAddOnly  ApplicationSyncLevel = "addOnly"
	ApplicationSyncLevelDisabled ApplicationSyncLevel = "disabled"
	ApplicationSyncLevelFullSync ApplicationSyncLevel = "fullSync"
)

// Defines values for ApplyTags.
const (
	Add     ApplyTags = "add"
	Remove  ApplyTags = "remove"
	Replace ApplyTags = "replace"
)

// Defines values for AuthenticationRequiredType.
const (
	DisabledForLocalAddresses AuthenticationRequiredType = "disabledForLocalAddresses"
	Enabled                   AuthenticationRequiredType = "enabled"
)

// Defines values for AuthenticationType.
const (
	AuthenticationTypeBasic    AuthenticationType = "basic"
	AuthenticationTypeExternal AuthenticationType = "external"
	AuthenticationTypeForms    AuthenticationType = "forms"
	AuthenticationTypeNone     AuthenticationType = "none"
)

// Defines values for BackupType.
const (
	BackupTypeManual    BackupType = "manual"
	BackupTypeScheduled BackupType = "scheduled"
	BackupTypeUpdate    BackupType = "update"
)

// Defines values for BookSearchParam.
const (
	BookSearchParamAuthor    BookSearchParam = "author"
	BookSearchParamGenre     BookSearchParam = "genre"
	BookSearchParamPublisher BookSearchParam = "publisher"
	BookSearchParamQ         BookSearchParam = "q"
	BookSearchParamTitle     BookSearchParam = "title"
	BookSearchParamYear      BookSearchParam = "year"
)

// Defines values for CertificateValidationType.
const (
	CertificateValidationTypeDisabled                  CertificateValidationType = "disabled"
	CertificateValidationTypeDisabledForLocalAddresses CertificateValidationType = "disabledForLocalAddresses"
	CertificateValidationTypeEnabled                   CertificateValidationType = "enabled"
)

// Defines values for CommandPriority.
const (
	CommandPriorityHigh   CommandPriority = "high"
	CommandPriorityLow    CommandPriority = "low"
	CommandPriorityNormal CommandPriority = "normal"
)

// Defines values for CommandStatus.
const (
	Aborted   CommandStatus = "aborted"
	Cancelled CommandStatus = "cancelled"
	Completed CommandStatus = "completed"
	Failed    CommandStatus = "failed"
	Orphaned  CommandStatus = "orphaned"
	Queued    CommandStatus = "queued"
	Started   CommandStatus = "started"
)

// Defines values for CommandTrigger.
const (
	CommandTriggerManual      CommandTrigger = "manual"
	CommandTriggerScheduled   CommandTrigger = "scheduled"
	CommandTriggerUnspecified CommandTrigger = "unspecified"
)

// Defines values for DatabaseType.
const (
	PostgreSQL DatabaseType = "postgreSQL"
	SqLite     DatabaseType = "sqLite"
)

// Defines values for DownloadProtocol.
const (
	DownloadProtocolTorrent DownloadProtocol = "torrent"
	DownloadProtocolUnknown DownloadProtocol = "unknown"
	DownloadProtocolUsenet  DownloadProtocol = "usenet"
)

// Defines values for HealthCheckResult.
const (
	HealthCheckResultError   HealthCheckResult = "error"
	HealthCheckResultNotice  HealthCheckResult = "notice"
	HealthCheckResultOk      HealthCheckResult = "ok"
	HealthCheckResultWarning HealthCheckResult = "warning"
)

// Defines values for HistoryEventType.
const (
	HistoryEventTypeIndexerAuth    HistoryEventType = "indexerAuth"
	HistoryEventTypeIndexerInfo    HistoryEventType = "indexerInfo"
	HistoryEventTypeIndexerQuery   HistoryEventType = "indexerQuery"
	HistoryEventTypeIndexerRss     HistoryEventType = "indexerRss"
	HistoryEventTypeReleaseGrabbed HistoryEventType = "releaseGrabbed"
	HistoryEventTypeUnknown        HistoryEventType = "unknown"
)

// Defines values for IndexerPrivacy.
const (
	Private     IndexerPrivacy = "private"
	Public      IndexerPrivacy = "public"
	SemiPrivate IndexerPrivacy = "semiPrivate"
)

// Defines values for MovieSearchParam.
const (
	MovieSearchParamDoubanID  MovieSearchParam = "doubanId"
	MovieSearchParamGenre     MovieSearchParam = "genre"
	MovieSearchParamImdbID    MovieSearchParam = "imdbId"
	MovieSearchParamImdbTitle MovieSearchParam = "imdbTitle"
	MovieSearchParamImdbYear  MovieSearchParam = "imdbYear"
	MovieSearchParamQ         MovieSearchParam = "q"
	MovieSearchParamTmdbID    MovieSearchParam = "tmdbId"
	MovieSearchParamTraktID   MovieSearchParam = "traktId"
	MovieSearchParamYear      MovieSearchParam = "year"
)

// Defines values for MusicSearchParam.
const (
	MusicSearchParamAlbum  MusicSearchParam = "album"
	MusicSearchParamArtist MusicSearchParam = "artist"
	MusicSearchParamGenre  MusicSearchParam = "genre"
	MusicSearchParamLabel  MusicSearchParam = "label"
	MusicSearchParamQ      MusicSearchParam = "q"
	MusicSearchParamTrack  MusicSearchParam = "track"
	MusicSearchParamYear   MusicSearchParam = "year"
)

// Defines values for PrivacyLevel.
const (
	PrivacyLevelAPIKey   PrivacyLevel = "apiKey"
	PrivacyLevelNormal   PrivacyLevel = "normal"
	PrivacyLevelPassword PrivacyLevel = "password"
	PrivacyLevelUserName PrivacyLevel = "userName"
)

// Defines values for ProviderMessageType.
const (
	ProviderMessageTypeError   ProviderMessageType = "error"
	ProviderMessageTypeInfo    ProviderMessageType = "info"
	ProviderMessageTypeWarning ProviderMessageType = "warning"
)

// Defines values for ProxyType.
const (
	HTTP   ProxyType = "http"
	Socks4 ProxyType = "socks4"
	Socks5 ProxyType = "socks5"
)

// Defines values for RuntimeMode.
const (
	Console RuntimeMode = "console"
	Service RuntimeMode = "service"
	Tray    RuntimeMode = "tray"
)

// Defines values for SearchParam.
const (
	SearchParamQ SearchParam = "q"
)

// Defines values for SortDirection.
const (
	Ascending  SortDirection = "ascending"
	Default    SortDirection = "default"
	Descending SortDirection = "descending"
)

// Defines values for TvSearchParam.
const (
	DoubanID TvSearchParam = "doubanId"
	Ep       TvSearchParam = "ep"
	Genre    TvSearchParam = "genre"
	ImdbID   TvSearchParam = "imdbId"
	Q        TvSearchParam = "q"
	RId      TvSearchParam = "rId"
	Season   TvSearchParam = "season"
	TmdbID   TvSearchParam = "tmdbId"
	TraktID  TvSearchParam = "traktId"
	TvMazeID TvSearchParam = "tvMazeId"
	TvdbID   TvSearchParam = "tvdbId"
	Year     TvSearchParam = "year"
)

// Defines values for UpdateMechanism.
const (
	UpdateMechanismApt      UpdateMechanism = "apt"
	UpdateMechanismBuiltIn  UpdateMechanism = "builtIn"
	UpdateMechanismDocker   UpdateMechanism = "docker"
	UpdateMechanismExternal UpdateMechanism = "external"
	UpdateMechanismScript   UpdateMechanism = "script"
)

// APIInfoResource defines model for ApiInfoResource.
type APIInfoResource struct {
	Current    nullable.Nullable[string]   `json:"current,omitempty"`
	Deprecated nullable.Nullable[[]string] `json:"deprecated,omitempty"`
}

// AppProfileResource defines model for AppProfileResource.
type AppProfileResource struct {
	EnableAutomaticSearch   *bool                     `json:"enableAutomaticSearch,omitempty"`
	EnableInteractiveSearch *bool                     `json:"enableInteractiveSearch,omitempty"`
	EnableRss               *bool                     `json:"enableRss,omitempty"`
	ID                      *int32                    `json:"id,omitempty"`
	MinimumSeeders          *int32                    `json:"minimumSeeders,omitempty"`
	Name                    nullable.Nullable[string] `json:"name,omitempty"`
}

// ApplicationBulkResource defines model for ApplicationBulkResource.
type ApplicationBulkResource struct {
	ApplyTags *ApplyTags                 `json:"applyTags,omitempty"`
	Ids       nullable.Nullable[[]int32] `json:"ids,omitempty"`
	SyncLevel *ApplicationSyncLevel      `json:"syncLevel,omitempty"`
	Tags      nullable.Nullable[[]int32] `json:"tags,omitempty"`
}

// ApplicationResource defines model for ApplicationResource.
type ApplicationResource struct {
	ConfigContract     nullable.Nullable[string]                `json:"configContract,omitempty"`
	Fields             nullable.Nullable[[]Field]               `json:"fields,omitempty"`
	ID                 *int32                                   `json:"id,omitempty"`
	Implementation     nullable.Nullable[string]                `json:"implementation,omitempty"`
	ImplementationName nullable.Nullable[string]                `json:"implementationName,omitempty"`
	InfoLink           nullable.Nullable[string]                `json:"infoLink,omitempty"`
	Message            *ProviderMessage                         `json:"message,omitempty"`
	Name               nullable.Nullable[string]                `json:"name,omitempty"`
	Presets            nullable.Nullable[[]ApplicationResource] `json:"presets,omitempty"`
	SyncLevel          *ApplicationSyncLevel                    `json:"syncLevel,omitempty"`
	Tags               nullable.Nullable[[]int32]               `json:"tags,omitempty"`
	TestCommand        nullable.Nullable[string]                `json:"testCommand,omitempty"`
}

// ApplicationSyncLevel defines model for ApplicationSyncLevel.
type ApplicationSyncLevel string

// ApplyTags defines model for ApplyTags.
type ApplyTags string

// AuthenticationRequiredType defines model for AuthenticationRequiredType.
type AuthenticationRequiredType string

// AuthenticationType defines model for AuthenticationType.
type AuthenticationType string

// BackupResource defines model for BackupResource.
type BackupResource struct {
	ID   *int32                    `json:"id,omitempty"`
	Name nullable.Nullable[string] `json:"name,omitempty"`
	Path nullable.Nullable[string] `json:"path,omitempty"`
	Size *int64                    `json:"size,omitempty"`
	Time *time.Time                `json:"time,omitempty"`
	Type *BackupType               `json:"type,omitempty"`
}

// BackupType defines model for BackupType.
type BackupType string

// BookSearchParam defines model for BookSearchParam.
type BookSearchParam string

// CertificateValidationType defines model for CertificateValidationType.
type CertificateValidationType string

// Command defines model for Command.
type Command struct {
	ClientUserAgent     nullable.Nullable[string]    `json:"clientUserAgent,omitempty"`
	CompletionMessage   nullable.Nullable[string]    `json:"completionMessage,omitempty"`
	IsExclusive         *bool                        `json:"isExclusive,omitempty"`
	IsTypeExclusive     *bool                        `json:"isTypeExclusive,omitempty"`
	LastExecutionTime   nullable.Nullable[time.Time] `json:"lastExecutionTime,omitempty"`
	LastStartTime       nullable.Nullable[time.Time] `json:"lastStartTime,omitempty"`
	Name                nullable.Nullable[string]    `json:"name,omitempty"`
	RequiresDiskAccess  *bool                        `json:"requiresDiskAccess,omitempty"`
	SendUpdatesToClient *bool                        `json:"sendUpdatesToClient,omitempty"`
	SuppressMessages    *bool                        `json:"suppressMessages,omitempty"`
	Trigger             *CommandTrigger              `json:"trigger,omitempty"`
	UpdateScheduledTask *bool                        `json:"updateScheduledTask,omitempty"`
}

// CommandPriority defines model for CommandPriority.
type CommandPriority string

// CommandResource defines model for CommandResource.
type CommandResource struct {
	Body                *Command                     `json:"body,omitempty"`
	ClientUserAgent     nullable.Nullable[string]    `json:"clientUserAgent,omitempty"`
	CommandName         nullable.Nullable[string]    `json:"commandName,omitempty"`
	Duration            nullable.Nullable[string]    `json:"duration,omitempty"`
	Ended               nullable.Nullable[time.Time] `json:"ended,omitempty"`
	Exception           nullable.Nullable[string]    `json:"exception,omitempty"`
	ID                  *int32                       `json:"id,omitempty"`
	LastExecutionTime   nullable.Nullable[time.Time] `json:"lastExecutionTime,omitempty"`
	Message             nullable.Nullable[string]    `json:"message,omitempty"`
	Name                nullable.Nullable[string]    `json:"name,omitempty"`
	Priority            *CommandPriority             `json:"priority,omitempty"`
	Queued              *time.Time                   `json:"queued,omitempty"`
	SendUpdatesToClient *bool                        `json:"sendUpdatesToClient,omitempty"`
	Started             nullable.Nullable[time.Time] `json:"started,omitempty"`
	StateChangeTime     nullable.Nullable[time.Time] `json:"stateChangeTime,omitempty"`
	Status              *CommandStatus               `json:"status,omitempty"`
	Trigger             *CommandTrigger              `json:"trigger,omitempty"`
	UpdateScheduledTask *bool                        `json:"updateScheduledTask,omitempty"`
}

// CommandStatus defines model for CommandStatus.
type CommandStatus string

// CommandTrigger defines model for CommandTrigger.
type CommandTrigger string

// CustomFilterResource defines model for CustomFilterResource.
type CustomFilterResource struct {
	Filters nullable.Nullable[[]map[string]interface{}] `json:"filters,omitempty"`
	ID      *int32                                      `json:"id,omitempty"`
	Label   nullable.Nullable[string]                   `json:"label,omitempty"`
	Type    nullable.Nullable[string]                   `json:"type,omitempty"`
}

// DatabaseType defines model for DatabaseType.
type DatabaseType string

// DevelopmentConfigResource defines model for DevelopmentConfigResource.
type DevelopmentConfigResource struct {
	ConsoleLogLevel    nullable.Nullable[string] `json:"consoleLogLevel,omitempty"`
	FilterSentryEvents *bool                     `json:"filterSentryEvents,omitempty"`
	ID                 *int32                    `json:"id,omitempty"`
	LogIndexerResponse *bool                     `json:"logIndexerResponse,omitempty"`
	LogRotate          *int32                    `json:"logRotate,omitempty"`
	LogSQL             *bool                     `json:"logSql,omitempty"`
}

// DownloadClientBulkResource defines model for DownloadClientBulkResource.
type DownloadClientBulkResource struct {
	ApplyTags *ApplyTags                 `json:"applyTags,omitempty"`
	Enable    nullable.Nullable[bool]    `json:"enable,omitempty"`
	Ids       nullable.Nullable[[]int32] `json:"ids,omitempty"`
	Priority  nullable.Nullable[int32]   `json:"priority,omitempty"`
	Tags      nullable.Nullable[[]int32] `json:"tags,omitempty"`
}

// DownloadClientCategory defines model for DownloadClientCategory.
type DownloadClientCategory struct {
	Categories     nullable.Nullable[[]int32] `json:"categories,omitempty"`
	ClientCategory nullable.Nullable[string]  `json:"clientCategory,omitempty"`
}

// DownloadClientConfigResource defines model for DownloadClientConfigResource.
type DownloadClientConfigResource struct {
	ID *int32 `json:"id,omitempty"`
}

// DownloadClientResource defines model for DownloadClientResource.
type DownloadClientResource struct {
	Categories         nullable.Nullable[[]DownloadClientCategory] `json:"categories,omitempty"`
	ConfigContract     nullable.Nullable[string]                   `json:"configContract,omitempty"`
	Enable             *bool                                       `json:"enable,omitempty"`
	Fields             nullable.Nullable[[]Field]                  `json:"fields,omitempty"`
	ID                 *int32                                      `json:"id,omitempty"`
	Implementation     nullable.Nullable[string]                   `json:"implementation,omitempty"`
	ImplementationName nullable.Nullable[string]                   `json:"implementationName,omitempty"`
	InfoLink           nullable.Nullable[string]                   `json:"infoLink,omitempty"`
	Message            *ProviderMessage                            `json:"message,omitempty"`
	Name               nullable.Nullable[string]                   `json:"name,omitempty"`
	Presets            nullable.Nullable[[]DownloadClientResource] `json:"presets,omitempty"`
	Priority           *int32                                      `json:"priority,omitempty"`
	Protocol           *DownloadProtocol                           `json:"protocol,omitempty"`
	SupportsCategories *bool                                       `json:"supportsCategories,omitempty"`
	Tags               nullable.Nullable[[]int32]                  `json:"tags,omitempty"`
}

// DownloadProtocol defines model for DownloadProtocol.
type DownloadProtocol string

// Field defines model for Field.
type Field struct {
	Advanced                    *bool                             `json:"advanced,omitempty"`
	HelpLink                    nullable.Nullable[string]         `json:"helpLink,omitempty"`
	HelpText                    nullable.Nullable[string]         `json:"helpText,omitempty"`
	HelpTextWarning             nullable.Nullable[string]         `json:"helpTextWarning,omitempty"`
	Hidden                      nullable.Nullable[string]         `json:"hidden,omitempty"`
	IsFloat                     *bool                             `json:"isFloat,omitempty"`
	Label                       nullable.Nullable[string]         `json:"label,omitempty"`
	Name                        nullable.Nullable[string]         `json:"name,omitempty"`
	Order                       *int32                            `json:"order,omitempty"`
	Placeholder                 nullable.Nullable[string]         `json:"placeholder,omitempty"`
	Privacy                     *PrivacyLevel                     `json:"privacy,omitempty"`
	Section                     nullable.Nullable[string]         `json:"section,omitempty"`
	SelectOptions               nullable.Nullable[[]SelectOption] `json:"selectOptions,omitempty"`
	SelectOptionsProviderAction nullable.Nullable[string]         `json:"selectOptionsProviderAction,omitempty"`
	Type                        nullable.Nullable[string]         `json:"type,omitempty"`
	Unit                        nullable.Nullable[string]         `json:"unit,omitempty"`
	Value                       nullable.Nullable[interface{}]    `json:"value,omitempty"`
}

// HealthCheckResult defines model for HealthCheckResult.
type HealthCheckResult string

// HealthResource defines model for HealthResource.
type HealthResource struct {
	ID      *int32                    `json:"id,omitempty"`
	Message nullable.Nullable[string] `json:"message,omitempty"`
	Source  nullable.Nullable[string] `json:"source,omitempty"`
	Type    *HealthCheckResult        `json:"type,omitempty"`
	WikiURL *HTTPURI                  `json:"wikiUrl,omitempty"`
}

// HistoryEventType defines model for HistoryEventType.
type HistoryEventType string

// HistoryResource defines model for HistoryResource.
type HistoryResource struct {
	Data       nullable.Nullable[map[string]*string] `json:"data,omitempty"`
	Date       *time.Time                            `json:"date,omitempty"`
	DownloadID nullable.Nullable[string]             `json:"downloadId,omitempty"`
	EventType  *HistoryEventType                     `json:"eventType,omitempty"`
	ID         *int32                                `json:"id,omitempty"`
	IndexerID  *int32                                `json:"indexerId,omitempty"`
	Successful *bool                                 `json:"successful,omitempty"`
}

// HistoryResourcePagingResource defines model for HistoryResourcePagingResource.
type HistoryResourcePagingResource struct {
	Page          *int32                               `json:"page,omitempty"`
	PageSize      *int32                               `json:"pageSize,omitempty"`
	Records       nullable.Nullable[[]HistoryResource] `json:"records,omitempty"`
	SortDirection *SortDirection                       `json:"sortDirection,omitempty"`
	SortKey       nullable.Nullable[string]            `json:"sortKey,omitempty"`
	TotalRecords  *int32                               `json:"totalRecords,omitempty"`
}

// HostConfigResource defines model for HostConfigResource.
type HostConfigResource struct {
	AnalyticsEnabled          *bool                       `json:"analyticsEnabled,omitempty"`
	APIKey                    nullable.Nullable[string]   `json:"apiKey,omitempty"`
	ApplicationURL            nullable.Nullable[string]   `json:"applicationUrl,omitempty"`
	AuthenticationMethod      *AuthenticationType         `json:"authenticationMethod,omitempty"`
	AuthenticationRequired    *AuthenticationRequiredType `json:"authenticationRequired,omitempty"`
	BackupFolder              nullable.Nullable[string]   `json:"backupFolder,omitempty"`
	BackupInterval            *int32                      `json:"backupInterval,omitempty"`
	BackupRetention           *int32                      `json:"backupRetention,omitempty"`
	BindAddress               nullable.Nullable[string]   `json:"bindAddress,omitempty"`
	Branch                    nullable.Nullable[string]   `json:"branch,omitempty"`
	CertificateValidation     *CertificateValidationType  `json:"certificateValidation,omitempty"`
	ConsoleLogLevel           nullable.Nullable[string]   `json:"consoleLogLevel,omitempty"`
	EnableSsl                 *bool                       `json:"enableSsl,omitempty"`
	HistoryCleanupDays        *int32                      `json:"historyCleanupDays,omitempty"`
	ID                        *int32                      `json:"id,omitempty"`
	InstanceName              nullable.Nullable[string]   `json:"instanceName,omitempty"`
	LaunchBrowser             *bool                       `json:"launchBrowser,omitempty"`
	LogLevel                  nullable.Nullable[string]   `json:"logLevel,omitempty"`
	Password                  nullable.Nullable[string]   `json:"password,omitempty"`
	PasswordConfirmation      nullable.Nullable[string]   `json:"passwordConfirmation,omitempty"`
	Port                      *int32                      `json:"port,omitempty"`
	ProxyBypassFilter         nullable.Nullable[string]   `json:"proxyBypassFilter,omitempty"`
	ProxyBypassLocalAddresses *bool                       `json:"proxyBypassLocalAddresses,omitempty"`
	ProxyEnabled              *bool                       `json:"proxyEnabled,omitempty"`
	ProxyHostname             nullable.Nullable[string]   `json:"proxyHostname,omitempty"`
	ProxyPassword             nullable.Nullable[string]   `json:"proxyPassword,omitempty"`
	ProxyPort                 *int32                      `json:"proxyPort,omitempty"`
	ProxyType                 *ProxyType                  `json:"proxyType,omitempty"`
	ProxyUsername             nullable.Nullable[string]   `json:"proxyUsername,omitempty"`
	SslCertPassword           nullable.Nullable[string]   `json:"sslCertPassword,omitempty"`
	SslCertPath               nullable.Nullable[string]   `json:"sslCertPath,omitempty"`
	SslPort                   *int32                      `json:"sslPort,omitempty"`
	UpdateAutomatically       *bool                       `json:"updateAutomatically,omitempty"`
	UpdateMechanism           *UpdateMechanism            `json:"updateMechanism,omitempty"`
	UpdateScriptPath          nullable.Nullable[string]   `json:"updateScriptPath,omitempty"`
	URLBase                   nullable.Nullable[string]   `json:"urlBase,omitempty"`
	Username                  nullable.Nullable[string]   `json:"username,omitempty"`
}

// HostStatistics defines model for HostStatistics.
type HostStatistics struct {
	Host            nullable.Nullable[string] `json:"host,omitempty"`
	NumberOfGrabs   *int32                    `json:"numberOfGrabs,omitempty"`
	NumberOfQueries *int32                    `json:"numberOfQueries,omitempty"`
}

// HTTPURI defines model for HttpUri.
type HTTPURI struct {
	Fragment nullable.Nullable[string] `json:"fragment,omitempty"`
	FullURI  nullable.Nullable[string] `json:"fullUri,omitempty"`
	Host     nullable.Nullable[string] `json:"host,omitempty"`
	Path     nullable.Nullable[string] `json:"path,omitempty"`
	Port     nullable.Nullable[int32]  `json:"port,omitempty"`
	Query    nullable.Nullable[string] `json:"query,omitempty"`
	Scheme   nullable.Nullable[string] `json:"scheme,omitempty"`
}

// IActionResult defines model for IActionResult.
type IActionResult = map[string]interface{}

// IndexerBulkResource defines model for IndexerBulkResource.
type IndexerBulkResource struct {
	AppProfileID   nullable.Nullable[int32]   `json:"appProfileId,omitempty"`
	ApplyTags      *ApplyTags                 `json:"applyTags,omitempty"`
	Enable         nullable.Nullable[bool]    `json:"enable,omitempty"`
	Ids            nullable.Nullable[[]int32] `json:"ids,omitempty"`
	MinimumSeeders nullable.Nullable[int32]   `json:"minimumSeeders,omitempty"`
	PackSeedTime   nullable.Nullable[int32]   `json:"packSeedTime,omitempty"`
	Priority       nullable.Nullable[int32]   `json:"priority,omitempty"`
	SeedRatio      nullable.Nullable[float64] `json:"seedRatio,omitempty"`
	SeedTime       nullable.Nullable[int32]   `json:"seedTime,omitempty"`
	Tags           nullable.Nullable[[]int32] `json:"tags,omitempty"`
}

// IndexerCapabilityResource defines model for IndexerCapabilityResource.
type IndexerCapabilityResource struct {
	BookSearchParams  nullable.Nullable[[]BookSearchParam]  `json:"bookSearchParams,omitempty"`
	Categories        nullable.Nullable[[]IndexerCategory]  `json:"categories,omitempty"`
	ID                *int32                                `json:"id,omitempty"`
	LimitsDefault     nullable.Nullable[int32]              `json:"limitsDefault,omitempty"`
	LimitsMax         nullable.Nullable[int32]              `json:"limitsMax,omitempty"`
	MovieSearchParams nullable.Nullable[[]MovieSearchParam] `json:"movieSearchParams,omitempty"`
	MusicSearchParams nullable.Nullable[[]MusicSearchParam] `json:"musicSearchParams,omitempty"`
	SearchParams      nullable.Nullable[[]SearchParam]      `json:"searchParams,omitempty"`
	SupportsRawSearch *bool                                 `json:"supportsRawSearch,omitempty"`
	TvSearchParams    nullable.Nullable[[]TvSearchParam]    `json:"tvSearchParams,omitempty"`
}

// IndexerCategory defines model for IndexerCategory.
type IndexerCategory struct {
	Description   nullable.Nullable[string]            `json:"description,omitempty"`
	ID            *int32                               `json:"id,omitempty"`
	Name          nullable.Nullable[string]            `json:"name,omitempty"`
	SubCategories nullable.Nullable[[]IndexerCategory] `json:"subCategories,omitempty"`
}

// IndexerPrivacy defines model for IndexerPrivacy.
type IndexerPrivacy string

// IndexerProxyResource defines model for IndexerProxyResource.
type IndexerProxyResource struct {
	ConfigContract        nullable.Nullable[string]                 `json:"configContract,omitempty"`
	Fields                nullable.Nullable[[]Field]                `json:"fields,omitempty"`
	ID                    *int32                                    `json:"id,omitempty"`
	Implementation        nullable.Nullable[string]                 `json:"implementation,omitempty"`
	ImplementationName    nullable.Nullable[string]                 `json:"implementationName,omitempty"`
	IncludeHealthWarnings *bool                                     `json:"includeHealthWarnings,omitempty"`
	InfoLink              nullable.Nullable[string]                 `json:"infoLink,omitempty"`
	Link                  nullable.Nullable[string]                 `json:"link,omitempty"`
	Message               *ProviderMessage                          `json:"message,omitempty"`
	Name                  nullable.Nullable[string]                 `json:"name,omitempty"`
	OnHealthIssue         *bool                                     `json:"onHealthIssue,omitempty"`
	Presets               nullable.Nullable[[]IndexerProxyResource] `json:"presets,omitempty"`
	SupportsOnHealthIssue *bool                                     `json:"supportsOnHealthIssue,omitempty"`
	Tags                  nullable.Nullable[[]int32]                `json:"tags,omitempty"`
	TestCommand           nullable.Nullable[string]                 `json:"testCommand,omitempty"`
}

// IndexerResource defines model for IndexerResource.
type IndexerResource struct {
	Added              *time.Time                           `json:"added,omitempty"`
	AppProfileID       *int32                               `json:"appProfileId,omitempty"`
	Capabilities       *IndexerCapabilityResource           `json:"capabilities,omitempty"`
	ConfigContract     nullable.Nullable[string]            `json:"configContract,omitempty"`
	DefinitionName     nullable.Nullable[string]            `json:"definitionName,omitempty"`
	Description        nullable.Nullable[string]            `json:"description,omitempty"`
	DownloadClientID   *int32                               `json:"downloadClientId,omitempty"`
	Enable             *bool                                `json:"enable,omitempty"`
	Encoding           nullable.Nullable[string]            `json:"encoding,omitempty"`
	Fields             nullable.Nullable[[]Field]           `json:"fields,omitempty"`
	ID                 *int32                               `json:"id,omitempty"`
	Implementation     nullable.Nullable[string]            `json:"implementation,omitempty"`
	ImplementationName nullable.Nullable[string]            `json:"implementationName,omitempty"`
	IndexerUrls        nullable.Nullable[[]string]          `json:"indexerUrls,omitempty"`
	InfoLink           nullable.Nullable[string]            `json:"infoLink,omitempty"`
	Language           nullable.Nullable[string]            `json:"language,omitempty"`
	LegacyUrls         nullable.Nullable[[]string]          `json:"legacyUrls,omitempty"`
	Message            *ProviderMessage                     `json:"message,omitempty"`
	Name               nullable.Nullable[string]            `json:"name,omitempty"`
	Presets            nullable.Nullable[[]IndexerResource] `json:"presets,omitempty"`
	Priority           *int32                               `json:"priority,omitempty"`
	Privacy            *IndexerPrivacy                      `json:"privacy,omitempty"`
	Protocol           *DownloadProtocol                    `json:"protocol,omitempty"`
	Redirect           *bool                                `json:"redirect,omitempty"`
	SortName           nullable.Nullable[string]            `json:"sortName,omitempty"`
	Status             *IndexerStatusResource               `json:"status,omitempty"`
	SupportsPagination *bool                                `json:"supportsPagination,omitempty"`
	SupportsRedirect   *bool                                `json:"supportsRedirect,omitempty"`
	SupportsRss        *bool                                `json:"supportsRss,omitempty"`
	SupportsSearch     *bool                                `json:"supportsSearch,omitempty"`
	Tags               nullable.Nullable[[]int32]           `json:"tags,omitempty"`
}

// IndexerStatistics defines model for IndexerStatistics.
type IndexerStatistics struct {
	AverageGrabResponseTime   *int32                    `json:"averageGrabResponseTime,omitempty"`
	AverageResponseTime       *int32                    `json:"averageResponseTime,omitempty"`
	IndexerID                 *int32                    `json:"indexerId,omitempty"`
	IndexerName               nullable.Nullable[string] `json:"indexerName,omitempty"`
	NumberOfAuthQueries       *int32                    `json:"numberOfAuthQueries,omitempty"`
	NumberOfFailedAuthQueries *int32                    `json:"numberOfFailedAuthQueries,omitempty"`
	NumberOfFailedGrabs       *int32                    `json:"numberOfFailedGrabs,omitempty"`
	NumberOfFailedQueries     *int32                    `json:"numberOfFailedQueries,omitempty"`
	NumberOfFailedRssQueries  *int32                    `json:"numberOfFailedRssQueries,omitempty"`
	NumberOfGrabs             *int32                    `json:"numberOfGrabs,omitempty"`
	NumberOfQueries           *int32                    `json:"numberOfQueries,omitempty"`
	NumberOfRssQueries        *int32                    `json:"numberOfRssQueries,omitempty"`
}

// IndexerStatsResource defines model for IndexerStatsResource.
type IndexerStatsResource struct {
	Hosts      nullable.Nullable[[]HostStatistics]      `json:"hosts,omitempty"`
	ID         *int32                                   `json:"id,omitempty"`
	Indexers   nullable.Nullable[[]IndexerStatistics]   `json:"indexers,omitempty"`
	UserAgents nullable.Nullable[[]UserAgentStatistics] `json:"userAgents,omitempty"`
}

// IndexerStatusResource defines model for IndexerStatusResource.
type IndexerStatusResource struct {
	DisabledTill      nullable.Nullable[time.Time] `json:"disabledTill,omitempty"`
	ID                *int32                       `json:"id,omitempty"`
	IndexerID         *int32                       `json:"indexerId,omitempty"`
	InitialFailure    nullable.Nullable[time.Time] `json:"initialFailure,omitempty"`
	MostRecentFailure nullable.Nullable[time.Time] `json:"mostRecentFailure,omitempty"`
}

// LocalizationOption defines model for LocalizationOption.
type LocalizationOption struct {
	Name  nullable.Nullable[string] `json:"name,omitempty"`
	Value nullable.Nullable[string] `json:"value,omitempty"`
}

// LogFileResource defines model for LogFileResource.
type LogFileResource struct {
	ContentsURL   nullable.Nullable[string] `json:"contentsUrl,omitempty"`
	DownloadURL   nullable.Nullable[string] `json:"downloadUrl,omitempty"`
	Filename      nullable.Nullable[string] `json:"filename,omitempty"`
	ID            *int32                    `json:"id,omitempty"`
	LastWriteTime *time.Time                `json:"lastWriteTime,omitempty"`
}

// LogResource defines model for LogResource.
type LogResource struct {
	Exception     nullable.Nullable[string] `json:"exception,omitempty"`
	ExceptionType nullable.Nullable[string] `json:"exceptionType,omitempty"`
	ID            *int32                    `json:"id,omitempty"`
	Level         nullable.Nullable[string] `json:"level,omitempty"`
	Logger        nullable.Nullable[string] `json:"logger,omitempty"`
	Message       nullable.Nullable[string] `json:"message,omitempty"`
	Method        nullable.Nullable[string] `json:"method,omitempty"`
	Time          *time.Time                `json:"time,omitempty"`
}

// LogResourcePagingResource defines model for LogResourcePagingResource.
type LogResourcePagingResource struct {
	Page          *int32                           `json:"page,omitempty"`
	PageSize      *int32                           `json:"pageSize,omitempty"`
	Records       nullable.Nullable[[]LogResource] `json:"records,omitempty"`
	SortDirection *SortDirection                   `json:"sortDirection,omitempty"`
	SortKey       nullable.Nullable[string]        `json:"sortKey,omitempty"`
	TotalRecords  *int32                           `json:"totalRecords,omitempty"`
}

// MovieSearchParam defines model for MovieSearchParam.
type MovieSearchParam string

// MusicSearchParam defines model for MusicSearchParam.
type MusicSearchParam string

// NotificationResource defines model for NotificationResource.
type NotificationResource struct {
	ConfigContract              nullable.Nullable[string]                 `json:"configContract,omitempty"`
	Fields                      nullable.Nullable[[]Field]                `json:"fields,omitempty"`
	ID                          *int32                                    `json:"id,omitempty"`
	Implementation              nullable.Nullable[string]                 `json:"implementation,omitempty"`
	ImplementationName          nullable.Nullable[string]                 `json:"implementationName,omitempty"`
	IncludeHealthWarnings       *bool                                     `json:"includeHealthWarnings,omitempty"`
	IncludeManualGrabs          *bool                                     `json:"includeManualGrabs,omitempty"`
	InfoLink                    nullable.Nullable[string]                 `json:"infoLink,omitempty"`
	Link                        nullable.Nullable[string]                 `json:"link,omitempty"`
	Message                     *ProviderMessage                          `json:"message,omitempty"`
	Name                        nullable.Nullable[string]                 `json:"name,omitempty"`
	OnApplicationUpdate         *bool                                     `json:"onApplicationUpdate,omitempty"`
	OnGrab                      *bool                                     `json:"onGrab,omitempty"`
	OnHealthIssue               *bool                                     `json:"onHealthIssue,omitempty"`
	OnHealthRestored            *bool                                     `json:"onHealthRestored,omitempty"`
	Presets                     nullable.Nullable[[]NotificationResource] `json:"presets,omitempty"`
	SupportsOnApplicationUpdate *bool                                     `json:"supportsOnApplicationUpdate,omitempty"`
	SupportsOnGrab              *bool                                     `json:"supportsOnGrab,omitempty"`
	SupportsOnHealthIssue       *bool                                     `json:"supportsOnHealthIssue,omitempty"`
	SupportsOnHealthRestored    *bool                                     `json:"supportsOnHealthRestored,omitempty"`
	Tags                        nullable.Nullable[[]int32]                `json:"tags,omitempty"`
	TestCommand                 nullable.Nullable[string]                 `json:"testCommand,omitempty"`
}

// PingResource defines model for PingResource.
type PingResource struct {
	Status nullable.Nullable[string] `json:"status,omitempty"`
}

// PrivacyLevel defines model for PrivacyLevel.
type PrivacyLevel string

// ProviderMessage defines model for ProviderMessage.
type ProviderMessage struct {
	Message nullable.Nullable[string] `json:"message,omitempty"`
	Type    *ProviderMessageType      `json:"type,omitempty"`
}

// ProviderMessageType defines model for ProviderMessageType.
type ProviderMessageType string

// ProxyType defines model for ProxyType.
type ProxyType string

// ReleaseResource defines model for ReleaseResource.
type ReleaseResource struct {
	Age              *int32                               `json:"age,omitempty"`
	AgeHours         *float64                             `json:"ageHours,omitempty"`
	AgeMinutes       *float64                             `json:"ageMinutes,omitempty"`
	Categories       nullable.Nullable[[]IndexerCategory] `json:"categories,omitempty"`
	CommentURL       nullable.Nullable[string]            `json:"commentUrl,omitempty"`
	DownloadClientID nullable.Nullable[int32]             `json:"downloadClientId,omitempty"`
	DownloadURL      nullable.Nullable[string]            `json:"downloadUrl,omitempty"`
	FileName         nullable.Nullable[string]            `json:"fileName,omitempty"`
	Files            nullable.Nullable[int32]             `json:"files,omitempty"`
	Grabs            nullable.Nullable[int32]             `json:"grabs,omitempty"`
	GUID             nullable.Nullable[string]            `json:"guid,omitempty"`
	ID               *int32                               `json:"id,omitempty"`
	ImdbID           *int32                               `json:"imdbId,omitempty"`
	Indexer          nullable.Nullable[string]            `json:"indexer,omitempty"`
	IndexerFlags     nullable.Nullable[[]string]          `json:"indexerFlags,omitempty"`
	IndexerID        *int32                               `json:"indexerId,omitempty"`
	InfoHash         nullable.Nullable[string]            `json:"infoHash,omitempty"`
	InfoURL          nullable.Nullable[string]            `json:"infoUrl,omitempty"`
	Leechers         nullable.Nullable[int32]             `json:"leechers,omitempty"`
	MagnetURL        nullable.Nullable[string]            `json:"magnetUrl,omitempty"`
	PosterURL        nullable.Nullable[string]            `json:"posterUrl,omitempty"`
	Protocol         *DownloadProtocol                    `json:"protocol,omitempty"`
	PublishDate      *time.Time                           `json:"publishDate,omitempty"`
	ReleaseHash      nullable.Nullable[string]            `json:"releaseHash,omitempty"`
	Seeders          nullable.Nullable[int32]             `json:"seeders,omitempty"`
	Size             *int64                               `json:"size,omitempty"`
	SortTitle        nullable.Nullable[string]            `json:"sortTitle,omitempty"`
	SubGroup         nullable.Nullable[string]            `json:"subGroup,omitempty"`
	Title            nullable.Nullable[string]            `json:"title,omitempty"`
	TmdbID           *int32                               `json:"tmdbId,omitempty"`
	TvMazeID         *int32                               `json:"tvMazeId,omitempty"`
	TvdbID           *int32                               `json:"tvdbId,omitempty"`
}

// RuntimeMode defines model for RuntimeMode.
type RuntimeMode string

// SearchParam defines model for SearchParam.
type SearchParam string

// SelectOption defines model for SelectOption.
type SelectOption struct {
	Hint        nullable.Nullable[string] `json:"hint,omitempty"`
	Name        nullable.Nullable[string] `json:"name,omitempty"`
	Order       *int32                    `json:"order,omitempty"`
	ParentValue nullable.Nullable[int32]  `json:"parentValue,omitempty"`
	Value       *int32                    `json:"value,omitempty"`
}

// SortDirection defines model for SortDirection.
type SortDirection string

// SystemResource defines model for SystemResource.
type SystemResource struct {
	AppData                       nullable.Nullable[string] `json:"appData,omitempty"`
	AppName                       nullable.Nullable[string] `json:"appName,omitempty"`
	Authentication                *AuthenticationType       `json:"authentication,omitempty"`
	Branch                        nullable.Nullable[string] `json:"branch,omitempty"`
	BuildTime                     *time.Time                `json:"buildTime,omitempty"`
	DatabaseType                  *DatabaseType             `json:"databaseType,omitempty"`
	DatabaseVersion               nullable.Nullable[string] `json:"databaseVersion,omitempty"`
	InstanceName                  nullable.Nullable[string] `json:"instanceName,omitempty"`
	IsAdmin                       *bool                     `json:"isAdmin,omitempty"`
	IsDebug                       *bool                     `json:"isDebug,omitempty"`
	IsDocker                      *bool                     `json:"isDocker,omitempty"`
	IsLinux                       *bool                     `json:"isLinux,omitempty"`
	IsNetCore                     *bool                     `json:"isNetCore,omitempty"`
	IsOsx                         *bool                     `json:"isOsx,omitempty"`
	IsProduction                  *bool                     `json:"isProduction,omitempty"`
	IsUserInteractive             *bool                     `json:"isUserInteractive,omitempty"`
	IsWindows                     *bool                     `json:"isWindows,omitempty"`
	MigrationVersion              *int32                    `json:"migrationVersion,omitempty"`
	Mode                          *RuntimeMode              `json:"mode,omitempty"`
	OsName                        nullable.Nullable[string] `json:"osName,omitempty"`
	OsVersion                     nullable.Nullable[string] `json:"osVersion,omitempty"`
	PackageAuthor                 nullable.Nullable[string] `json:"packageAuthor,omitempty"`
	PackageUpdateMechanism        *UpdateMechanism          `json:"packageUpdateMechanism,omitempty"`
	PackageUpdateMechanismMessage nullable.Nullable[string] `json:"packageUpdateMechanismMessage,omitempty"`
	PackageVersion                nullable.Nullable[string] `json:"packageVersion,omitempty"`
	RuntimeName                   nullable.Nullable[string] `json:"runtimeName,omitempty"`
	RuntimeVersion                nullable.Nullable[string] `json:"runtimeVersion,omitempty"`
	StartTime                     *time.Time                `json:"startTime,omitempty"`
	StartupPath                   nullable.Nullable[string] `json:"startupPath,omitempty"`
	URLBase                       nullable.Nullable[string] `json:"urlBase,omitempty"`
	Version                       nullable.Nullable[string] `json:"version,omitempty"`
}

// TagDetailsResource defines model for TagDetailsResource.
type TagDetailsResource struct {
	ApplicationIds  nullable.Nullable[[]int32] `json:"applicationIds,omitempty"`
	ID              *int32                     `json:"id,omitempty"`
	IndexerIds      nullable.Nullable[[]int32] `json:"indexerIds,omitempty"`
	IndexerProxyIds nullable.Nullable[[]int32] `json:"indexerProxyIds,omitempty"`
	Label           nullable.Nullable[string]  `json:"label,omitempty"`
	NotificationIds nullable.Nullable[[]int32] `json:"notificationIds,omitempty"`
}

// TagResource defines model for TagResource.
type TagResource struct {
	ID    *int32                    `json:"id,omitempty"`
	Label nullable.Nullable[string] `json:"label,omitempty"`
}

// TaskResource defines model for TaskResource.
type TaskResource struct {
	ID            *int32                    `json:"id,omitempty"`
	Interval      *int32                    `json:"interval,omitempty"`
	LastDuration  *string                   `json:"lastDuration,omitempty"`
	LastExecution *time.Time                `json:"lastExecution,omitempty"`
	LastStartTime *time.Time                `json:"lastStartTime,omitempty"`
	Name          nullable.Nullable[string] `json:"name,omitempty"`
	NextExecution *time.Time                `json:"nextExecution,omitempty"`
	TaskName      nullable.Nullable[string] `json:"taskName,omitempty"`
}

// TvSearchParam defines model for TvSearchParam.
type TvSearchParam string

// UIConfigResource defines model for UiConfigResource.
type UIConfigResource struct {
	CalendarWeekColumnHeader nullable.Nullable[string] `json:"calendarWeekColumnHeader,omitempty"`
	EnableColorImpairedMode  *bool                     `json:"enableColorImpairedMode,omitempty"`
	FirstDayOfWeek           *int32                    `json:"firstDayOfWeek,omitempty"`
	ID                       *int32                    `json:"id,omitempty"`
	LongDateFormat           nullable.Nullable[string] `json:"longDateFormat,omitempty"`
	ShortDateFormat          nullable.Nullable[string] `json:"shortDateFormat,omitempty"`
	ShowRelativeDates        *bool                     `json:"showRelativeDates,omitempty"`
	Theme                    nullable.Nullable[string] `json:"theme,omitempty"`
	TimeFormat               nullable.Nullable[string] `json:"timeFormat,omitempty"`
	UILanguage               nullable.Nullable[string] `json:"uiLanguage,omitempty"`
}

// UpdateChanges defines model for UpdateChanges.
type UpdateChanges struct {
	Fixed nullable.Nullable[[]string] `json:"fixed,omitempty"`
	New   nullable.Nullable[[]string] `json:"new,omitempty"`
}

// UpdateMechanism defines model for UpdateMechanism.
type UpdateMechanism string

// UpdateResource defines model for UpdateResource.
type UpdateResource struct {
	Branch      nullable.Nullable[string]    `json:"branch,omitempty"`
	Changes     *UpdateChanges               `json:"changes,omitempty"`
	FileName    nullable.Nullable[string]    `json:"fileName,omitempty"`
	Hash        nullable.Nullable[string]    `json:"hash,omitempty"`
	ID          *int32                       `json:"id,omitempty"`
	Installable *bool                        `json:"installable,omitempty"`
	Installed   *bool                        `json:"installed,omitempty"`
	InstalledOn nullable.Nullable[time.Time] `json:"installedOn,omitempty"`
	Latest      *bool                        `json:"latest,omitempty"`
	ReleaseDate *time.Time                   `json:"releaseDate,omitempty"`
	URL         nullable.Nullable[string]    `json:"url,omitempty"`
	Version     nullable.Nullable[string]    `json:"version,omitempty"`
}

// UserAgentStatistics defines model for UserAgentStatistics.
type UserAgentStatistics struct {
	NumberOfGrabs   *int32                    `json:"numberOfGrabs,omitempty"`
	NumberOfQueries *int32                    `json:"numberOfQueries,omitempty"`
	UserAgent       nullable.Nullable[string] `json:"userAgent,omitempty"`
}

// PostAPIV1ApplicationsParams defines parameters for PostAPIV1Applications.
type PostAPIV1ApplicationsParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostAPIV1ApplicationsTestParams defines parameters for PostAPIV1ApplicationsTest.
type PostAPIV1ApplicationsTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutAPIV1ApplicationsIDParams defines parameters for PutAPIV1ApplicationsID.
type PutAPIV1ApplicationsIDParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostAPIV1DownloadclientParams defines parameters for PostAPIV1Downloadclient.
type PostAPIV1DownloadclientParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostAPIV1DownloadclientTestParams defines parameters for PostAPIV1DownloadclientTest.
type PostAPIV1DownloadclientTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutAPIV1DownloadclientIDParams defines parameters for PutAPIV1DownloadclientID.
type PutAPIV1DownloadclientIDParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetAPIV1FilesystemParams defines parameters for GetAPIV1Filesystem.
type GetAPIV1FilesystemParams struct {
	Path                               *string `form:"path,omitempty" json:"path,omitempty"`
	IncludeFiles                       *bool   `form:"includeFiles,omitempty" json:"includeFiles,omitempty"`
	AllowFoldersWithoutTrailingSlashes *bool   `form:"allowFoldersWithoutTrailingSlashes,omitempty" json:"allowFoldersWithoutTrailingSlashes,omitempty"`
}

// GetAPIV1FilesystemTypeParams defines parameters for GetAPIV1FilesystemType.
type GetAPIV1FilesystemTypeParams struct {
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// GetAPIV1HistoryParams defines parameters for GetAPIV1History.
type GetAPIV1HistoryParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	EventType     *[]int32       `form:"eventType,omitempty" json:"eventType,omitempty"`
	Successful    *bool          `form:"successful,omitempty" json:"successful,omitempty"`
	DownloadID    *string        `form:"downloadId,omitempty" json:"downloadId,omitempty"`
	IndexerIds    *[]int32       `form:"indexerIds,omitempty" json:"indexerIds,omitempty"`
}

// GetAPIV1HistoryIndexerParams defines parameters for GetAPIV1HistoryIndexer.
type GetAPIV1HistoryIndexerParams struct {
	IndexerID *int32            `form:"indexerId,omitempty" json:"indexerId,omitempty"`
	EventType *HistoryEventType `form:"eventType,omitempty" json:"eventType,omitempty"`
	Limit     *int32            `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAPIV1HistorySinceParams defines parameters for GetAPIV1HistorySince.
type GetAPIV1HistorySinceParams struct {
	Date      *time.Time        `form:"date,omitempty" json:"date,omitempty"`
	EventType *HistoryEventType `form:"eventType,omitempty" json:"eventType,omitempty"`
}

// PostAPIV1IndexerParams defines parameters for PostAPIV1Indexer.
type PostAPIV1IndexerParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostAPIV1IndexerTestParams defines parameters for PostAPIV1IndexerTest.
type PostAPIV1IndexerTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutAPIV1IndexerIDParams defines parameters for PutAPIV1IndexerID.
type PutAPIV1IndexerIDParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetAPIV1IndexerIDDownloadParams defines parameters for GetAPIV1IndexerIDDownload.
type GetAPIV1IndexerIDDownloadParams struct {
	Link *string `form:"link,omitempty" json:"link,omitempty"`
	File *string `form:"file,omitempty" json:"file,omitempty"`
}

// GetAPIV1IndexerIDNewznabParams defines parameters for GetAPIV1IndexerIDNewznab.
type GetAPIV1IndexerIDNewznabParams struct {
	T          *string `form:"t,omitempty" json:"t,omitempty"`
	Q          *string `form:"q,omitempty" json:"q,omitempty"`
	Cat        *string `form:"cat,omitempty" json:"cat,omitempty"`
	Imdbid     *string `form:"imdbid,omitempty" json:"imdbid,omitempty"`
	Tmdbid     *int32  `form:"tmdbid,omitempty" json:"tmdbid,omitempty"`
	Extended   *string `form:"extended,omitempty" json:"extended,omitempty"`
	Limit      *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset     *int32  `form:"offset,omitempty" json:"offset,omitempty"`
	Minage     *int32  `form:"minage,omitempty" json:"minage,omitempty"`
	Maxage     *int32  `form:"maxage,omitempty" json:"maxage,omitempty"`
	Minsize    *int64  `form:"minsize,omitempty" json:"minsize,omitempty"`
	Maxsize    *int64  `form:"maxsize,omitempty" json:"maxsize,omitempty"`
	Rid        *int32  `form:"rid,omitempty" json:"rid,omitempty"`
	Tvmazeid   *int32  `form:"tvmazeid,omitempty" json:"tvmazeid,omitempty"`
	Traktid    *int32  `form:"traktid,omitempty" json:"traktid,omitempty"`
	Tvdbid     *int32  `form:"tvdbid,omitempty" json:"tvdbid,omitempty"`
	Doubanid   *int32  `form:"doubanid,omitempty" json:"doubanid,omitempty"`
	Season     *int32  `form:"season,omitempty" json:"season,omitempty"`
	Ep         *string `form:"ep,omitempty" json:"ep,omitempty"`
	Album      *string `form:"album,omitempty" json:"album,omitempty"`
	Artist     *string `form:"artist,omitempty" json:"artist,omitempty"`
	Label      *string `form:"label,omitempty" json:"label,omitempty"`
	Track      *string `form:"track,omitempty" json:"track,omitempty"`
	Year       *int32  `form:"year,omitempty" json:"year,omitempty"`
	Genre      *string `form:"genre,omitempty" json:"genre,omitempty"`
	Author     *string `form:"author,omitempty" json:"author,omitempty"`
	Title      *string `form:"title,omitempty" json:"title,omitempty"`
	Publisher  *string `form:"publisher,omitempty" json:"publisher,omitempty"`
	Configured *string `form:"configured,omitempty" json:"configured,omitempty"`
	Source     *string `form:"source,omitempty" json:"source,omitempty"`
	Host       *string `form:"host,omitempty" json:"host,omitempty"`
	Server     *string `form:"server,omitempty" json:"server,omitempty"`
}

// PostAPIV1IndexerproxyParams defines parameters for PostAPIV1Indexerproxy.
type PostAPIV1IndexerproxyParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostAPIV1IndexerproxyTestParams defines parameters for PostAPIV1IndexerproxyTest.
type PostAPIV1IndexerproxyTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutAPIV1IndexerproxyIDParams defines parameters for PutAPIV1IndexerproxyID.
type PutAPIV1IndexerproxyIDParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetAPIV1IndexerstatsParams defines parameters for GetAPIV1Indexerstats.
type GetAPIV1IndexerstatsParams struct {
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`
	EndDate   *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`
	Indexers  *string    `form:"indexers,omitempty" json:"indexers,omitempty"`
	Protocols *string    `form:"protocols,omitempty" json:"protocols,omitempty"`
	Tags      *string    `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetAPIV1LogParams defines parameters for GetAPIV1Log.
type GetAPIV1LogParams struct {
	Page          *int32         `form:"page,omitempty" json:"page,omitempty"`
	PageSize      *int32         `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	SortKey       *string        `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortDirection *SortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Level         *string        `form:"level,omitempty" json:"level,omitempty"`
}

// PostAPIV1NotificationParams defines parameters for PostAPIV1Notification.
type PostAPIV1NotificationParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// PostAPIV1NotificationTestParams defines parameters for PostAPIV1NotificationTest.
type PostAPIV1NotificationTestParams struct {
	ForceTest *bool `form:"forceTest,omitempty" json:"forceTest,omitempty"`
}

// PutAPIV1NotificationIDParams defines parameters for PutAPIV1NotificationID.
type PutAPIV1NotificationIDParams struct {
	ForceSave *bool `form:"forceSave,omitempty" json:"forceSave,omitempty"`
}

// GetAPIV1SearchParams defines parameters for GetAPIV1Search.
type GetAPIV1SearchParams struct {
	Query      *string  `form:"query,omitempty" json:"query,omitempty"`
	Type       *string  `form:"type,omitempty" json:"type,omitempty"`
	IndexerIds *[]int32 `form:"indexerIds,omitempty" json:"indexerIds,omitempty"`
	Categories *[]int32 `form:"categories,omitempty" json:"categories,omitempty"`
	Limit      *int32   `form:"limit,omitempty" json:"limit,omitempty"`
	Offset     *int32   `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostAPIV1SearchBulkJSONBody defines parameters for PostAPIV1SearchBulk.
type PostAPIV1SearchBulkJSONBody = []ReleaseResource

// PostLoginMultipartBody defines parameters for PostLogin.
type PostLoginMultipartBody struct {
	Password   *string `json:"password,omitempty"`
	RememberMe *string `json:"rememberMe,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// PostLoginParams defines parameters for PostLogin.
type PostLoginParams struct {
	ReturnURL *string `form:"returnUrl,omitempty" json:"returnUrl,omitempty"`
}

// GetIDAPIParams defines parameters for GetIDAPI.
type GetIDAPIParams struct {
	T          *string `form:"t,omitempty" json:"t,omitempty"`
	Q          *string `form:"q,omitempty" json:"q,omitempty"`
	Cat        *string `form:"cat,omitempty" json:"cat,omitempty"`
	Imdbid     *string `form:"imdbid,omitempty" json:"imdbid,omitempty"`
	Tmdbid     *int32  `form:"tmdbid,omitempty" json:"tmdbid,omitempty"`
	Extended   *string `form:"extended,omitempty" json:"extended,omitempty"`
	Limit      *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset     *int32  `form:"offset,omitempty" json:"offset,omitempty"`
	Minage     *int32  `form:"minage,omitempty" json:"minage,omitempty"`
	Maxage     *int32  `form:"maxage,omitempty" json:"maxage,omitempty"`
	Minsize    *int64  `form:"minsize,omitempty" json:"minsize,omitempty"`
	Maxsize    *int64  `form:"maxsize,omitempty" json:"maxsize,omitempty"`
	Rid        *int32  `form:"rid,omitempty" json:"rid,omitempty"`
	Tvmazeid   *int32  `form:"tvmazeid,omitempty" json:"tvmazeid,omitempty"`
	Traktid    *int32  `form:"traktid,omitempty" json:"traktid,omitempty"`
	Tvdbid     *int32  `form:"tvdbid,omitempty" json:"tvdbid,omitempty"`
	Doubanid   *int32  `form:"doubanid,omitempty" json:"doubanid,omitempty"`
	Season     *int32  `form:"season,omitempty" json:"season,omitempty"`
	Ep         *string `form:"ep,omitempty" json:"ep,omitempty"`
	Album      *string `form:"album,omitempty" json:"album,omitempty"`
	Artist     *string `form:"artist,omitempty" json:"artist,omitempty"`
	Label      *string `form:"label,omitempty" json:"label,omitempty"`
	Track      *string `form:"track,omitempty" json:"track,omitempty"`
	Year       *int32  `form:"year,omitempty" json:"year,omitempty"`
	Genre      *string `form:"genre,omitempty" json:"genre,omitempty"`
	Author     *string `form:"author,omitempty" json:"author,omitempty"`
	Title      *string `form:"title,omitempty" json:"title,omitempty"`
	Publisher  *string `form:"publisher,omitempty" json:"publisher,omitempty"`
	Configured *string `form:"configured,omitempty" json:"configured,omitempty"`
	Source     *string `form:"source,omitempty" json:"source,omitempty"`
	Host       *string `form:"host,omitempty" json:"host,omitempty"`
	Server     *string `form:"server,omitempty" json:"server,omitempty"`
}

// GetIDDownloadParams defines parameters for GetIDDownload.
type GetIDDownloadParams struct {
	Link *string `form:"link,omitempty" json:"link,omitempty"`
	File *string `form:"file,omitempty" json:"file,omitempty"`
}

// PostAPIV1ApplicationsJSONRequestBody defines body for PostAPIV1Applications for application/json ContentType.
type PostAPIV1ApplicationsJSONRequestBody = ApplicationResource

// PostAPIV1ApplicationsActionNameJSONRequestBody defines body for PostAPIV1ApplicationsActionName for application/json ContentType.
type PostAPIV1ApplicationsActionNameJSONRequestBody = ApplicationResource

// DeleteAPIV1ApplicationsBulkJSONRequestBody defines body for DeleteAPIV1ApplicationsBulk for application/json ContentType.
type DeleteAPIV1ApplicationsBulkJSONRequestBody = ApplicationBulkResource

// PutAPIV1ApplicationsBulkJSONRequestBody defines body for PutAPIV1ApplicationsBulk for application/json ContentType.
type PutAPIV1ApplicationsBulkJSONRequestBody = ApplicationBulkResource

// PostAPIV1ApplicationsTestJSONRequestBody defines body for PostAPIV1ApplicationsTest for application/json ContentType.
type PostAPIV1ApplicationsTestJSONRequestBody = ApplicationResource

// PutAPIV1ApplicationsIDJSONRequestBody defines body for PutAPIV1ApplicationsID for application/json ContentType.
type PutAPIV1ApplicationsIDJSONRequestBody = ApplicationResource

// PostAPIV1AppprofileJSONRequestBody defines body for PostAPIV1Appprofile for application/json ContentType.
type PostAPIV1AppprofileJSONRequestBody = AppProfileResource

// PutAPIV1AppprofileIDJSONRequestBody defines body for PutAPIV1AppprofileID for application/json ContentType.
type PutAPIV1AppprofileIDJSONRequestBody = AppProfileResource

// PostAPIV1CommandJSONRequestBody defines body for PostAPIV1Command for application/json ContentType.
type PostAPIV1CommandJSONRequestBody = CommandResource

// PutAPIV1ConfigDevelopmentIDJSONRequestBody defines body for PutAPIV1ConfigDevelopmentID for application/json ContentType.
type PutAPIV1ConfigDevelopmentIDJSONRequestBody = DevelopmentConfigResource

// PutAPIV1ConfigDownloadclientIDJSONRequestBody defines body for PutAPIV1ConfigDownloadclientID for application/json ContentType.
type PutAPIV1ConfigDownloadclientIDJSONRequestBody = DownloadClientConfigResource

// PutAPIV1ConfigHostIDJSONRequestBody defines body for PutAPIV1ConfigHostID for application/json ContentType.
type PutAPIV1ConfigHostIDJSONRequestBody = HostConfigResource

// PutAPIV1ConfigUIIDJSONRequestBody defines body for PutAPIV1ConfigUIID for application/json ContentType.
type PutAPIV1ConfigUIIDJSONRequestBody = UIConfigResource

// PostAPIV1CustomfilterJSONRequestBody defines body for PostAPIV1Customfilter for application/json ContentType.
type PostAPIV1CustomfilterJSONRequestBody = CustomFilterResource

// PutAPIV1CustomfilterIDJSONRequestBody defines body for PutAPIV1CustomfilterID for application/json ContentType.
type PutAPIV1CustomfilterIDJSONRequestBody = CustomFilterResource

// PostAPIV1DownloadclientJSONRequestBody defines body for PostAPIV1Downloadclient for application/json ContentType.
type PostAPIV1DownloadclientJSONRequestBody = DownloadClientResource

// PostAPIV1DownloadclientActionNameJSONRequestBody defines body for PostAPIV1DownloadclientActionName for application/json ContentType.
type PostAPIV1DownloadclientActionNameJSONRequestBody = DownloadClientResource

// DeleteAPIV1DownloadclientBulkJSONRequestBody defines body for DeleteAPIV1DownloadclientBulk for application/json ContentType.
type DeleteAPIV1DownloadclientBulkJSONRequestBody = DownloadClientBulkResource

// PutAPIV1DownloadclientBulkJSONRequestBody defines body for PutAPIV1DownloadclientBulk for application/json ContentType.
type PutAPIV1DownloadclientBulkJSONRequestBody = DownloadClientBulkResource

// PostAPIV1DownloadclientTestJSONRequestBody defines body for PostAPIV1DownloadclientTest for application/json ContentType.
type PostAPIV1DownloadclientTestJSONRequestBody = DownloadClientResource

// PutAPIV1DownloadclientIDJSONRequestBody defines body for PutAPIV1DownloadclientID for application/json ContentType.
type PutAPIV1DownloadclientIDJSONRequestBody = DownloadClientResource

// PostAPIV1IndexerJSONRequestBody defines body for PostAPIV1Indexer for application/json ContentType.
type PostAPIV1IndexerJSONRequestBody = IndexerResource

// PostAPIV1IndexerActionNameJSONRequestBody defines body for PostAPIV1IndexerActionName for application/json ContentType.
type PostAPIV1IndexerActionNameJSONRequestBody = IndexerResource

// DeleteAPIV1IndexerBulkJSONRequestBody defines body for DeleteAPIV1IndexerBulk for application/json ContentType.
type DeleteAPIV1IndexerBulkJSONRequestBody = IndexerBulkResource

// PutAPIV1IndexerBulkJSONRequestBody defines body for PutAPIV1IndexerBulk for application/json ContentType.
type PutAPIV1IndexerBulkJSONRequestBody = IndexerBulkResource

// PostAPIV1IndexerTestJSONRequestBody defines body for PostAPIV1IndexerTest for application/json ContentType.
type PostAPIV1IndexerTestJSONRequestBody = IndexerResource

// PutAPIV1IndexerIDJSONRequestBody defines body for PutAPIV1IndexerID for application/json ContentType.
type PutAPIV1IndexerIDJSONRequestBody = IndexerResource

// PostAPIV1IndexerproxyJSONRequestBody defines body for PostAPIV1Indexerproxy for application/json ContentType.
type PostAPIV1IndexerproxyJSONRequestBody = IndexerProxyResource

// PostAPIV1IndexerproxyActionNameJSONRequestBody defines body for PostAPIV1IndexerproxyActionName for application/json ContentType.
type PostAPIV1IndexerproxyActionNameJSONRequestBody = IndexerProxyResource

// PostAPIV1IndexerproxyTestJSONRequestBody defines body for PostAPIV1IndexerproxyTest for application/json ContentType.
type PostAPIV1IndexerproxyTestJSONRequestBody = IndexerProxyResource

// PutAPIV1IndexerproxyIDJSONRequestBody defines body for PutAPIV1IndexerproxyID for application/json ContentType.
type PutAPIV1IndexerproxyIDJSONRequestBody = IndexerProxyResource

// PostAPIV1NotificationJSONRequestBody defines body for PostAPIV1Notification for application/json ContentType.
type PostAPIV1NotificationJSONRequestBody = NotificationResource

// PostAPIV1NotificationActionNameJSONRequestBody defines body for PostAPIV1NotificationActionName for application/json ContentType.
type PostAPIV1NotificationActionNameJSONRequestBody = NotificationResource

// PostAPIV1NotificationTestJSONRequestBody defines body for PostAPIV1NotificationTest for application/json ContentType.
type PostAPIV1NotificationTestJSONRequestBody = NotificationResource

// PutAPIV1NotificationIDJSONRequestBody defines body for PutAPIV1NotificationID for application/json ContentType.
type PutAPIV1NotificationIDJSONRequestBody = NotificationResource

// PostAPIV1SearchJSONRequestBody defines body for PostAPIV1Search for application/json ContentType.
type PostAPIV1SearchJSONRequestBody = ReleaseResource

// PostAPIV1SearchBulkJSONRequestBody defines body for PostAPIV1SearchBulk for application/json ContentType.
type PostAPIV1SearchBulkJSONRequestBody = PostAPIV1SearchBulkJSONBody

// PostAPIV1TagJSONRequestBody defines body for PostAPIV1Tag for application/json ContentType.
type PostAPIV1TagJSONRequestBody = TagResource

// PutAPIV1TagIDJSONRequestBody defines body for PutAPIV1TagID for application/json ContentType.
type PutAPIV1TagIDJSONRequestBody = TagResource

// PostLoginMultipartRequestBody defines body for PostLogin for multipart/form-data ContentType.
type PostLoginMultipartRequestBody PostLoginMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAPI request
	GetAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Applications request
	GetAPIV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1ApplicationsWithBody request with any body
	PostAPIV1ApplicationsWithBody(ctx context.Context, params *PostAPIV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Applications(ctx context.Context, params *PostAPIV1ApplicationsParams, body PostAPIV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1ApplicationsActionNameWithBody request with any body
	PostAPIV1ApplicationsActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1ApplicationsActionName(ctx context.Context, name string, body PostAPIV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1ApplicationsBulkWithBody request with any body
	DeleteAPIV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAPIV1ApplicationsBulk(ctx context.Context, body DeleteAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1ApplicationsBulkWithBody request with any body
	PutAPIV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1ApplicationsBulk(ctx context.Context, body PutAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ApplicationsSchema request
	GetAPIV1ApplicationsSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1ApplicationsTestWithBody request with any body
	PostAPIV1ApplicationsTestWithBody(ctx context.Context, params *PostAPIV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1ApplicationsTest(ctx context.Context, params *PostAPIV1ApplicationsTestParams, body PostAPIV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1ApplicationsTestall request
	PostAPIV1ApplicationsTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1ApplicationsID request
	DeleteAPIV1ApplicationsID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ApplicationsID request
	GetAPIV1ApplicationsID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1ApplicationsIDWithBody request with any body
	PutAPIV1ApplicationsIDWithBody(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1ApplicationsID(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, body PutAPIV1ApplicationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Appprofile request
	GetAPIV1Appprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1AppprofileWithBody request with any body
	PostAPIV1AppprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Appprofile(ctx context.Context, body PostAPIV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1AppprofileSchema request
	GetAPIV1AppprofileSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1AppprofileID request
	DeleteAPIV1AppprofileID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1AppprofileID request
	GetAPIV1AppprofileID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1AppprofileIDWithBody request with any body
	PutAPIV1AppprofileIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1AppprofileID(ctx context.Context, id string, body PutAPIV1AppprofileIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Command request
	GetAPIV1Command(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1CommandWithBody request with any body
	PostAPIV1CommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Command(ctx context.Context, body PostAPIV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1CommandID request
	DeleteAPIV1CommandID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1CommandID request
	GetAPIV1CommandID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigDevelopment request
	GetAPIV1ConfigDevelopment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigDevelopmentID request
	GetAPIV1ConfigDevelopmentID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1ConfigDevelopmentIDWithBody request with any body
	PutAPIV1ConfigDevelopmentIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1ConfigDevelopmentID(ctx context.Context, id string, body PutAPIV1ConfigDevelopmentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigDownloadclient request
	GetAPIV1ConfigDownloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigDownloadclientID request
	GetAPIV1ConfigDownloadclientID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1ConfigDownloadclientIDWithBody request with any body
	PutAPIV1ConfigDownloadclientIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1ConfigDownloadclientID(ctx context.Context, id string, body PutAPIV1ConfigDownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigHost request
	GetAPIV1ConfigHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigHostID request
	GetAPIV1ConfigHostID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1ConfigHostIDWithBody request with any body
	PutAPIV1ConfigHostIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1ConfigHostID(ctx context.Context, id string, body PutAPIV1ConfigHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigUI request
	GetAPIV1ConfigUI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1ConfigUIID request
	GetAPIV1ConfigUIID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1ConfigUIIDWithBody request with any body
	PutAPIV1ConfigUIIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1ConfigUIID(ctx context.Context, id string, body PutAPIV1ConfigUIIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Customfilter request
	GetAPIV1Customfilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1CustomfilterWithBody request with any body
	PostAPIV1CustomfilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Customfilter(ctx context.Context, body PostAPIV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1CustomfilterID request
	DeleteAPIV1CustomfilterID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1CustomfilterID request
	GetAPIV1CustomfilterID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1CustomfilterIDWithBody request with any body
	PutAPIV1CustomfilterIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1CustomfilterID(ctx context.Context, id string, body PutAPIV1CustomfilterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Downloadclient request
	GetAPIV1Downloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1DownloadclientWithBody request with any body
	PostAPIV1DownloadclientWithBody(ctx context.Context, params *PostAPIV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Downloadclient(ctx context.Context, params *PostAPIV1DownloadclientParams, body PostAPIV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1DownloadclientActionNameWithBody request with any body
	PostAPIV1DownloadclientActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1DownloadclientActionName(ctx context.Context, name string, body PostAPIV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1DownloadclientBulkWithBody request with any body
	DeleteAPIV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAPIV1DownloadclientBulk(ctx context.Context, body DeleteAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1DownloadclientBulkWithBody request with any body
	PutAPIV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1DownloadclientBulk(ctx context.Context, body PutAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1DownloadclientSchema request
	GetAPIV1DownloadclientSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1DownloadclientTestWithBody request with any body
	PostAPIV1DownloadclientTestWithBody(ctx context.Context, params *PostAPIV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1DownloadclientTest(ctx context.Context, params *PostAPIV1DownloadclientTestParams, body PostAPIV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1DownloadclientTestall request
	PostAPIV1DownloadclientTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1DownloadclientID request
	DeleteAPIV1DownloadclientID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1DownloadclientID request
	GetAPIV1DownloadclientID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1DownloadclientIDWithBody request with any body
	PutAPIV1DownloadclientIDWithBody(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1DownloadclientID(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, body PutAPIV1DownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Filesystem request
	GetAPIV1Filesystem(ctx context.Context, params *GetAPIV1FilesystemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1FilesystemType request
	GetAPIV1FilesystemType(ctx context.Context, params *GetAPIV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Health request
	GetAPIV1Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1History request
	GetAPIV1History(ctx context.Context, params *GetAPIV1HistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1HistoryIndexer request
	GetAPIV1HistoryIndexer(ctx context.Context, params *GetAPIV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1HistorySince request
	GetAPIV1HistorySince(ctx context.Context, params *GetAPIV1HistorySinceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Indexer request
	GetAPIV1Indexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerWithBody request with any body
	PostAPIV1IndexerWithBody(ctx context.Context, params *PostAPIV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Indexer(ctx context.Context, params *PostAPIV1IndexerParams, body PostAPIV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerActionNameWithBody request with any body
	PostAPIV1IndexerActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1IndexerActionName(ctx context.Context, name string, body PostAPIV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1IndexerBulkWithBody request with any body
	DeleteAPIV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAPIV1IndexerBulk(ctx context.Context, body DeleteAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1IndexerBulkWithBody request with any body
	PutAPIV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1IndexerBulk(ctx context.Context, body PutAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1IndexerCategories request
	GetAPIV1IndexerCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1IndexerSchema request
	GetAPIV1IndexerSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerTestWithBody request with any body
	PostAPIV1IndexerTestWithBody(ctx context.Context, params *PostAPIV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1IndexerTest(ctx context.Context, params *PostAPIV1IndexerTestParams, body PostAPIV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerTestall request
	PostAPIV1IndexerTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1IndexerID request
	DeleteAPIV1IndexerID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1IndexerID request
	GetAPIV1IndexerID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1IndexerIDWithBody request with any body
	PutAPIV1IndexerIDWithBody(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1IndexerID(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, body PutAPIV1IndexerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1IndexerIDDownload request
	GetAPIV1IndexerIDDownload(ctx context.Context, id int32, params *GetAPIV1IndexerIDDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1IndexerIDNewznab request
	GetAPIV1IndexerIDNewznab(ctx context.Context, id int32, params *GetAPIV1IndexerIDNewznabParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Indexerproxy request
	GetAPIV1Indexerproxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerproxyWithBody request with any body
	PostAPIV1IndexerproxyWithBody(ctx context.Context, params *PostAPIV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Indexerproxy(ctx context.Context, params *PostAPIV1IndexerproxyParams, body PostAPIV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerproxyActionNameWithBody request with any body
	PostAPIV1IndexerproxyActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1IndexerproxyActionName(ctx context.Context, name string, body PostAPIV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1IndexerproxySchema request
	GetAPIV1IndexerproxySchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerproxyTestWithBody request with any body
	PostAPIV1IndexerproxyTestWithBody(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1IndexerproxyTest(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, body PostAPIV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1IndexerproxyTestall request
	PostAPIV1IndexerproxyTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1IndexerproxyID request
	DeleteAPIV1IndexerproxyID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1IndexerproxyID request
	GetAPIV1IndexerproxyID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1IndexerproxyIDWithBody request with any body
	PutAPIV1IndexerproxyIDWithBody(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1IndexerproxyID(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, body PutAPIV1IndexerproxyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Indexerstats request
	GetAPIV1Indexerstats(ctx context.Context, params *GetAPIV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Indexerstatus request
	GetAPIV1Indexerstatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Localization request
	GetAPIV1Localization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1LocalizationOptions request
	GetAPIV1LocalizationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Log request
	GetAPIV1Log(ctx context.Context, params *GetAPIV1LogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1LogFile request
	GetAPIV1LogFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1LogFileUpdate request
	GetAPIV1LogFileUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1LogFileUpdateFilename request
	GetAPIV1LogFileUpdateFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1LogFileFilename request
	GetAPIV1LogFileFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Notification request
	GetAPIV1Notification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1NotificationWithBody request with any body
	PostAPIV1NotificationWithBody(ctx context.Context, params *PostAPIV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Notification(ctx context.Context, params *PostAPIV1NotificationParams, body PostAPIV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1NotificationActionNameWithBody request with any body
	PostAPIV1NotificationActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1NotificationActionName(ctx context.Context, name string, body PostAPIV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1NotificationSchema request
	GetAPIV1NotificationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1NotificationTestWithBody request with any body
	PostAPIV1NotificationTestWithBody(ctx context.Context, params *PostAPIV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1NotificationTest(ctx context.Context, params *PostAPIV1NotificationTestParams, body PostAPIV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1NotificationTestall request
	PostAPIV1NotificationTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1NotificationID request
	DeleteAPIV1NotificationID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1NotificationID request
	GetAPIV1NotificationID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1NotificationIDWithBody request with any body
	PutAPIV1NotificationIDWithBody(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1NotificationID(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, body PutAPIV1NotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Search request
	GetAPIV1Search(ctx context.Context, params *GetAPIV1SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1SearchWithBody request with any body
	PostAPIV1SearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Search(ctx context.Context, body PostAPIV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1SearchBulkWithBody request with any body
	PostAPIV1SearchBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1SearchBulk(ctx context.Context, body PostAPIV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1SystemBackup request
	GetAPIV1SystemBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1SystemBackupRestoreUpload request
	PostAPIV1SystemBackupRestoreUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1SystemBackupRestoreID request
	PostAPIV1SystemBackupRestoreID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1SystemBackupID request
	DeleteAPIV1SystemBackupID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1SystemRestart request
	PostAPIV1SystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1SystemRoutes request
	GetAPIV1SystemRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1SystemRoutesDuplicate request
	GetAPIV1SystemRoutesDuplicate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1SystemShutdown request
	PostAPIV1SystemShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1SystemStatus request
	GetAPIV1SystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1SystemTask request
	GetAPIV1SystemTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1SystemTaskID request
	GetAPIV1SystemTaskID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Tag request
	GetAPIV1Tag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAPIV1TagWithBody request with any body
	PostAPIV1TagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAPIV1Tag(ctx context.Context, body PostAPIV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1TagDetail request
	GetAPIV1TagDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1TagDetailID request
	GetAPIV1TagDetailID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAPIV1TagID request
	DeleteAPIV1TagID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1TagID request
	GetAPIV1TagID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAPIV1TagIDWithBody request with any body
	PutAPIV1TagIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAPIV1TagID(ctx context.Context, id string, body PutAPIV1TagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIV1Update request
	GetAPIV1Update(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentPath request
	GetContentPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogin request
	GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLoginWithBody request with any body
	PostLoginWithBody(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogout request
	GetLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadPing request
	HeadPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIDAPI request
	GetIDAPI(ctx context.Context, id int32, params *GetIDAPIParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIDDownload request
	GetIDDownload(ctx context.Context, id int32, params *GetIDDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPath request
	GetPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1ApplicationsWithBody(ctx context.Context, params *PostAPIV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1ApplicationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Applications(ctx context.Context, params *PostAPIV1ApplicationsParams, body PostAPIV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1ApplicationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1ApplicationsActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1ApplicationsActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1ApplicationsActionName(ctx context.Context, name string, body PostAPIV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1ApplicationsActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1ApplicationsBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1ApplicationsBulk(ctx context.Context, body DeleteAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1ApplicationsBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ApplicationsBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ApplicationsBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ApplicationsBulk(ctx context.Context, body PutAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ApplicationsBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ApplicationsSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ApplicationsSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1ApplicationsTestWithBody(ctx context.Context, params *PostAPIV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1ApplicationsTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1ApplicationsTest(ctx context.Context, params *PostAPIV1ApplicationsTestParams, body PostAPIV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1ApplicationsTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1ApplicationsTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1ApplicationsTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1ApplicationsID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1ApplicationsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ApplicationsID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ApplicationsIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ApplicationsIDWithBody(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ApplicationsIDRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ApplicationsID(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, body PutAPIV1ApplicationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ApplicationsIDRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Appprofile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1AppprofileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1AppprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1AppprofileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Appprofile(ctx context.Context, body PostAPIV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1AppprofileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1AppprofileSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1AppprofileSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1AppprofileID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1AppprofileIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1AppprofileID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1AppprofileIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1AppprofileIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1AppprofileIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1AppprofileID(ctx context.Context, id string, body PutAPIV1AppprofileIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1AppprofileIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Command(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1CommandRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1CommandWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1CommandRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Command(ctx context.Context, body PostAPIV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1CommandRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1CommandID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1CommandIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1CommandID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1CommandIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigDevelopment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigDevelopmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigDevelopmentID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigDevelopmentIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigDevelopmentIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigDevelopmentIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigDevelopmentID(ctx context.Context, id string, body PutAPIV1ConfigDevelopmentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigDevelopmentIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigDownloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigDownloadclientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigDownloadclientID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigDownloadclientIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigDownloadclientIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigDownloadclientIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigDownloadclientID(ctx context.Context, id string, body PutAPIV1ConfigDownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigDownloadclientIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigHostID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigHostIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigHostIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigHostIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigHostID(ctx context.Context, id string, body PutAPIV1ConfigHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigHostIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigUI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigUIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1ConfigUIID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1ConfigUIIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigUIIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigUIIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1ConfigUIID(ctx context.Context, id string, body PutAPIV1ConfigUIIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1ConfigUIIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Customfilter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1CustomfilterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1CustomfilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1CustomfilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Customfilter(ctx context.Context, body PostAPIV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1CustomfilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1CustomfilterID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1CustomfilterIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1CustomfilterID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1CustomfilterIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1CustomfilterIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1CustomfilterIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1CustomfilterID(ctx context.Context, id string, body PutAPIV1CustomfilterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1CustomfilterIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Downloadclient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1DownloadclientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1DownloadclientWithBody(ctx context.Context, params *PostAPIV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1DownloadclientRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Downloadclient(ctx context.Context, params *PostAPIV1DownloadclientParams, body PostAPIV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1DownloadclientRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1DownloadclientActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1DownloadclientActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1DownloadclientActionName(ctx context.Context, name string, body PostAPIV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1DownloadclientActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1DownloadclientBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1DownloadclientBulk(ctx context.Context, body DeleteAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1DownloadclientBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1DownloadclientBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1DownloadclientBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1DownloadclientBulk(ctx context.Context, body PutAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1DownloadclientBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1DownloadclientSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1DownloadclientSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1DownloadclientTestWithBody(ctx context.Context, params *PostAPIV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1DownloadclientTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1DownloadclientTest(ctx context.Context, params *PostAPIV1DownloadclientTestParams, body PostAPIV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1DownloadclientTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1DownloadclientTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1DownloadclientTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1DownloadclientID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1DownloadclientIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1DownloadclientID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1DownloadclientIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1DownloadclientIDWithBody(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1DownloadclientIDRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1DownloadclientID(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, body PutAPIV1DownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1DownloadclientIDRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Filesystem(ctx context.Context, params *GetAPIV1FilesystemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1FilesystemRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1FilesystemType(ctx context.Context, params *GetAPIV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1FilesystemTypeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1HealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1History(ctx context.Context, params *GetAPIV1HistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1HistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1HistoryIndexer(ctx context.Context, params *GetAPIV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1HistoryIndexerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1HistorySince(ctx context.Context, params *GetAPIV1HistorySinceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1HistorySinceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Indexer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerWithBody(ctx context.Context, params *PostAPIV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Indexer(ctx context.Context, params *PostAPIV1IndexerParams, body PostAPIV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerActionName(ctx context.Context, name string, body PostAPIV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1IndexerBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1IndexerBulk(ctx context.Context, body DeleteAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1IndexerBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1IndexerBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1IndexerBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1IndexerBulk(ctx context.Context, body PutAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1IndexerBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1IndexerCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1IndexerSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerTestWithBody(ctx context.Context, params *PostAPIV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerTest(ctx context.Context, params *PostAPIV1IndexerTestParams, body PostAPIV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1IndexerID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1IndexerIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1IndexerID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1IndexerIDWithBody(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1IndexerIDRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1IndexerID(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, body PutAPIV1IndexerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1IndexerIDRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1IndexerIDDownload(ctx context.Context, id int32, params *GetAPIV1IndexerIDDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerIDDownloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1IndexerIDNewznab(ctx context.Context, id int32, params *GetAPIV1IndexerIDNewznabParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerIDNewznabRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Indexerproxy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerproxyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerproxyWithBody(ctx context.Context, params *PostAPIV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerproxyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Indexerproxy(ctx context.Context, params *PostAPIV1IndexerproxyParams, body PostAPIV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerproxyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerproxyActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerproxyActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerproxyActionName(ctx context.Context, name string, body PostAPIV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerproxyActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1IndexerproxySchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerproxySchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerproxyTestWithBody(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerproxyTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerproxyTest(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, body PostAPIV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerproxyTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1IndexerproxyTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1IndexerproxyTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1IndexerproxyID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1IndexerproxyIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1IndexerproxyID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerproxyIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1IndexerproxyIDWithBody(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1IndexerproxyIDRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1IndexerproxyID(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, body PutAPIV1IndexerproxyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1IndexerproxyIDRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Indexerstats(ctx context.Context, params *GetAPIV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerstatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Indexerstatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1IndexerstatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Localization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1LocalizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1LocalizationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1LocalizationOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Log(ctx context.Context, params *GetAPIV1LogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1LogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1LogFile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1LogFileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1LogFileUpdate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1LogFileUpdateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1LogFileUpdateFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1LogFileUpdateFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1LogFileFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1LogFileFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Notification(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1NotificationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1NotificationWithBody(ctx context.Context, params *PostAPIV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1NotificationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Notification(ctx context.Context, params *PostAPIV1NotificationParams, body PostAPIV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1NotificationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1NotificationActionNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1NotificationActionNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1NotificationActionName(ctx context.Context, name string, body PostAPIV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1NotificationActionNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1NotificationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1NotificationSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1NotificationTestWithBody(ctx context.Context, params *PostAPIV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1NotificationTestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1NotificationTest(ctx context.Context, params *PostAPIV1NotificationTestParams, body PostAPIV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1NotificationTestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1NotificationTestall(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1NotificationTestallRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1NotificationID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1NotificationIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1NotificationID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1NotificationIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1NotificationIDWithBody(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1NotificationIDRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1NotificationID(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, body PutAPIV1NotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1NotificationIDRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Search(ctx context.Context, params *GetAPIV1SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1SearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1SearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)

	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Search(ctx context.Context, body PostAPIV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1SearchBulkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SearchBulkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1SearchBulk(ctx context.Context, body PostAPIV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SearchBulkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1SystemBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1SystemBackupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1SystemBackupRestoreUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SystemBackupRestoreUploadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1SystemBackupRestoreID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SystemBackupRestoreIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1SystemBackupID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1SystemBackupIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1SystemRestart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SystemRestartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1SystemRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1SystemRoutesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1SystemRoutesDuplicate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1SystemRoutesDuplicateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1SystemShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1SystemShutdownRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1SystemStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1SystemStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1SystemTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1SystemTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1SystemTaskID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1SystemTaskIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Tag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1TagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1TagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1TagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAPIV1Tag(ctx context.Context, body PostAPIV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAPIV1TagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1TagDetail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1TagDetailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1TagDetailID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1TagDetailIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAPIV1TagID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAPIV1TagIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1TagID(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1TagIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1TagIDWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1TagIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAPIV1TagID(ctx context.Context, id string, body PutAPIV1TagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAPIV1TagIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIV1Update(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIV1UpdateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentPathRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIDAPI(ctx context.Context, id int32, params *GetIDAPIParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIDAPIRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIDDownload(ctx context.Context, id int32, params *GetIDDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIDDownloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPath(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPathRequest(c.Server, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAPIRequest generates requests for GetAPI
func NewGetAPIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1ApplicationsRequest generates requests for GetAPIV1Applications
func NewGetAPIV1ApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1ApplicationsRequest calls the generic PostAPIV1Applications builder with application/json body
func NewPostAPIV1ApplicationsRequest(server string, params *PostAPIV1ApplicationsParams, body PostAPIV1ApplicationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1ApplicationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1ApplicationsRequestWithBody generates requests for PostAPIV1Applications with any type of body
func NewPostAPIV1ApplicationsRequestWithBody(server string, params *PostAPIV1ApplicationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1ApplicationsActionNameRequest calls the generic PostAPIV1ApplicationsActionName builder with application/json body
func NewPostAPIV1ApplicationsActionNameRequest(server string, name string, body PostAPIV1ApplicationsActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1ApplicationsActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostAPIV1ApplicationsActionNameRequestWithBody generates requests for PostAPIV1ApplicationsActionName with any type of body
func NewPostAPIV1ApplicationsActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIV1ApplicationsBulkRequest calls the generic DeleteAPIV1ApplicationsBulk builder with application/json body
func NewDeleteAPIV1ApplicationsBulkRequest(server string, body DeleteAPIV1ApplicationsBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAPIV1ApplicationsBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAPIV1ApplicationsBulkRequestWithBody generates requests for DeleteAPIV1ApplicationsBulk with any type of body
func NewDeleteAPIV1ApplicationsBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAPIV1ApplicationsBulkRequest calls the generic PutAPIV1ApplicationsBulk builder with application/json body
func NewPutAPIV1ApplicationsBulkRequest(server string, body PutAPIV1ApplicationsBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1ApplicationsBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAPIV1ApplicationsBulkRequestWithBody generates requests for PutAPIV1ApplicationsBulk with any type of body
func NewPutAPIV1ApplicationsBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1ApplicationsSchemaRequest generates requests for GetAPIV1ApplicationsSchema
func NewGetAPIV1ApplicationsSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1ApplicationsTestRequest calls the generic PostAPIV1ApplicationsTest builder with application/json body
func NewPostAPIV1ApplicationsTestRequest(server string, params *PostAPIV1ApplicationsTestParams, body PostAPIV1ApplicationsTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1ApplicationsTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1ApplicationsTestRequestWithBody generates requests for PostAPIV1ApplicationsTest with any type of body
func NewPostAPIV1ApplicationsTestRequestWithBody(server string, params *PostAPIV1ApplicationsTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1ApplicationsTestallRequest generates requests for PostAPIV1ApplicationsTestall
func NewPostAPIV1ApplicationsTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1ApplicationsIDRequest generates requests for DeleteAPIV1ApplicationsID
func NewDeleteAPIV1ApplicationsIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1ApplicationsIDRequest generates requests for GetAPIV1ApplicationsID
func NewGetAPIV1ApplicationsIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1ApplicationsIDRequest calls the generic PutAPIV1ApplicationsID builder with application/json body
func NewPutAPIV1ApplicationsIDRequest(server string, id string, params *PutAPIV1ApplicationsIDParams, body PutAPIV1ApplicationsIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1ApplicationsIDRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutAPIV1ApplicationsIDRequestWithBody generates requests for PutAPIV1ApplicationsID with any type of body
func NewPutAPIV1ApplicationsIDRequestWithBody(server string, id string, params *PutAPIV1ApplicationsIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1AppprofileRequest generates requests for GetAPIV1Appprofile
func NewGetAPIV1AppprofileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1AppprofileRequest calls the generic PostAPIV1Appprofile builder with application/json body
func NewPostAPIV1AppprofileRequest(server string, body PostAPIV1AppprofileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1AppprofileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIV1AppprofileRequestWithBody generates requests for PostAPIV1Appprofile with any type of body
func NewPostAPIV1AppprofileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1AppprofileSchemaRequest generates requests for GetAPIV1AppprofileSchema
func NewGetAPIV1AppprofileSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1AppprofileIDRequest generates requests for DeleteAPIV1AppprofileID
func NewDeleteAPIV1AppprofileIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1AppprofileIDRequest generates requests for GetAPIV1AppprofileID
func NewGetAPIV1AppprofileIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1AppprofileIDRequest calls the generic PutAPIV1AppprofileID builder with application/json body
func NewPutAPIV1AppprofileIDRequest(server string, id string, body PutAPIV1AppprofileIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1AppprofileIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAPIV1AppprofileIDRequestWithBody generates requests for PutAPIV1AppprofileID with any type of body
func NewPutAPIV1AppprofileIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/appprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1CommandRequest generates requests for GetAPIV1Command
func NewGetAPIV1CommandRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1CommandRequest calls the generic PostAPIV1Command builder with application/json body
func NewPostAPIV1CommandRequest(server string, body PostAPIV1CommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1CommandRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIV1CommandRequestWithBody generates requests for PostAPIV1Command with any type of body
func NewPostAPIV1CommandRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIV1CommandIDRequest generates requests for DeleteAPIV1CommandID
func NewDeleteAPIV1CommandIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1CommandIDRequest generates requests for GetAPIV1CommandID
func NewGetAPIV1CommandIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/command/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1ConfigDevelopmentRequest generates requests for GetAPIV1ConfigDevelopment
func NewGetAPIV1ConfigDevelopmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/development")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1ConfigDevelopmentIDRequest generates requests for GetAPIV1ConfigDevelopmentID
func NewGetAPIV1ConfigDevelopmentIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/development/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1ConfigDevelopmentIDRequest calls the generic PutAPIV1ConfigDevelopmentID builder with application/json body
func NewPutAPIV1ConfigDevelopmentIDRequest(server string, id string, body PutAPIV1ConfigDevelopmentIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1ConfigDevelopmentIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAPIV1ConfigDevelopmentIDRequestWithBody generates requests for PutAPIV1ConfigDevelopmentID with any type of body
func NewPutAPIV1ConfigDevelopmentIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/development/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1ConfigDownloadclientRequest generates requests for GetAPIV1ConfigDownloadclient
func NewGetAPIV1ConfigDownloadclientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1ConfigDownloadclientIDRequest generates requests for GetAPIV1ConfigDownloadclientID
func NewGetAPIV1ConfigDownloadclientIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1ConfigDownloadclientIDRequest calls the generic PutAPIV1ConfigDownloadclientID builder with application/json body
func NewPutAPIV1ConfigDownloadclientIDRequest(server string, id string, body PutAPIV1ConfigDownloadclientIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1ConfigDownloadclientIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAPIV1ConfigDownloadclientIDRequestWithBody generates requests for PutAPIV1ConfigDownloadclientID with any type of body
func NewPutAPIV1ConfigDownloadclientIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1ConfigHostRequest generates requests for GetAPIV1ConfigHost
func NewGetAPIV1ConfigHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/host")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1ConfigHostIDRequest generates requests for GetAPIV1ConfigHostID
func NewGetAPIV1ConfigHostIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1ConfigHostIDRequest calls the generic PutAPIV1ConfigHostID builder with application/json body
func NewPutAPIV1ConfigHostIDRequest(server string, id string, body PutAPIV1ConfigHostIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1ConfigHostIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAPIV1ConfigHostIDRequestWithBody generates requests for PutAPIV1ConfigHostID with any type of body
func NewPutAPIV1ConfigHostIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1ConfigUIRequest generates requests for GetAPIV1ConfigUI
func NewGetAPIV1ConfigUIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/ui")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1ConfigUIIDRequest generates requests for GetAPIV1ConfigUIID
func NewGetAPIV1ConfigUIIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/ui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1ConfigUIIDRequest calls the generic PutAPIV1ConfigUIID builder with application/json body
func NewPutAPIV1ConfigUIIDRequest(server string, id string, body PutAPIV1ConfigUIIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1ConfigUIIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAPIV1ConfigUIIDRequestWithBody generates requests for PutAPIV1ConfigUIID with any type of body
func NewPutAPIV1ConfigUIIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config/ui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1CustomfilterRequest generates requests for GetAPIV1Customfilter
func NewGetAPIV1CustomfilterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1CustomfilterRequest calls the generic PostAPIV1Customfilter builder with application/json body
func NewPostAPIV1CustomfilterRequest(server string, body PostAPIV1CustomfilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1CustomfilterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIV1CustomfilterRequestWithBody generates requests for PostAPIV1Customfilter with any type of body
func NewPostAPIV1CustomfilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIV1CustomfilterIDRequest generates requests for DeleteAPIV1CustomfilterID
func NewDeleteAPIV1CustomfilterIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1CustomfilterIDRequest generates requests for GetAPIV1CustomfilterID
func NewGetAPIV1CustomfilterIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1CustomfilterIDRequest calls the generic PutAPIV1CustomfilterID builder with application/json body
func NewPutAPIV1CustomfilterIDRequest(server string, id string, body PutAPIV1CustomfilterIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1CustomfilterIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAPIV1CustomfilterIDRequestWithBody generates requests for PutAPIV1CustomfilterID with any type of body
func NewPutAPIV1CustomfilterIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customfilter/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1DownloadclientRequest generates requests for GetAPIV1Downloadclient
func NewGetAPIV1DownloadclientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1DownloadclientRequest calls the generic PostAPIV1Downloadclient builder with application/json body
func NewPostAPIV1DownloadclientRequest(server string, params *PostAPIV1DownloadclientParams, body PostAPIV1DownloadclientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1DownloadclientRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1DownloadclientRequestWithBody generates requests for PostAPIV1Downloadclient with any type of body
func NewPostAPIV1DownloadclientRequestWithBody(server string, params *PostAPIV1DownloadclientParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1DownloadclientActionNameRequest calls the generic PostAPIV1DownloadclientActionName builder with application/json body
func NewPostAPIV1DownloadclientActionNameRequest(server string, name string, body PostAPIV1DownloadclientActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1DownloadclientActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostAPIV1DownloadclientActionNameRequestWithBody generates requests for PostAPIV1DownloadclientActionName with any type of body
func NewPostAPIV1DownloadclientActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIV1DownloadclientBulkRequest calls the generic DeleteAPIV1DownloadclientBulk builder with application/json body
func NewDeleteAPIV1DownloadclientBulkRequest(server string, body DeleteAPIV1DownloadclientBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAPIV1DownloadclientBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAPIV1DownloadclientBulkRequestWithBody generates requests for DeleteAPIV1DownloadclientBulk with any type of body
func NewDeleteAPIV1DownloadclientBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAPIV1DownloadclientBulkRequest calls the generic PutAPIV1DownloadclientBulk builder with application/json body
func NewPutAPIV1DownloadclientBulkRequest(server string, body PutAPIV1DownloadclientBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1DownloadclientBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAPIV1DownloadclientBulkRequestWithBody generates requests for PutAPIV1DownloadclientBulk with any type of body
func NewPutAPIV1DownloadclientBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1DownloadclientSchemaRequest generates requests for GetAPIV1DownloadclientSchema
func NewGetAPIV1DownloadclientSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1DownloadclientTestRequest calls the generic PostAPIV1DownloadclientTest builder with application/json body
func NewPostAPIV1DownloadclientTestRequest(server string, params *PostAPIV1DownloadclientTestParams, body PostAPIV1DownloadclientTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1DownloadclientTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1DownloadclientTestRequestWithBody generates requests for PostAPIV1DownloadclientTest with any type of body
func NewPostAPIV1DownloadclientTestRequestWithBody(server string, params *PostAPIV1DownloadclientTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1DownloadclientTestallRequest generates requests for PostAPIV1DownloadclientTestall
func NewPostAPIV1DownloadclientTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1DownloadclientIDRequest generates requests for DeleteAPIV1DownloadclientID
func NewDeleteAPIV1DownloadclientIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1DownloadclientIDRequest generates requests for GetAPIV1DownloadclientID
func NewGetAPIV1DownloadclientIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1DownloadclientIDRequest calls the generic PutAPIV1DownloadclientID builder with application/json body
func NewPutAPIV1DownloadclientIDRequest(server string, id string, params *PutAPIV1DownloadclientIDParams, body PutAPIV1DownloadclientIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1DownloadclientIDRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutAPIV1DownloadclientIDRequestWithBody generates requests for PutAPIV1DownloadclientID with any type of body
func NewPutAPIV1DownloadclientIDRequestWithBody(server string, id string, params *PutAPIV1DownloadclientIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/downloadclient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1FilesystemRequest generates requests for GetAPIV1Filesystem
func NewGetAPIV1FilesystemRequest(server string, params *GetAPIV1FilesystemParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/filesystem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeFiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeFiles", runtime.ParamLocationQuery, *params.IncludeFiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllowFoldersWithoutTrailingSlashes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allowFoldersWithoutTrailingSlashes", runtime.ParamLocationQuery, *params.AllowFoldersWithoutTrailingSlashes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1FilesystemTypeRequest generates requests for GetAPIV1FilesystemType
func NewGetAPIV1FilesystemTypeRequest(server string, params *GetAPIV1FilesystemTypeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/filesystem/type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1HealthRequest generates requests for GetAPIV1Health
func NewGetAPIV1HealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1HistoryRequest generates requests for GetAPIV1History
func NewGetAPIV1HistoryRequest(server string, params *GetAPIV1HistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Successful != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "successful", runtime.ParamLocationQuery, *params.Successful); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DownloadID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "downloadId", runtime.ParamLocationQuery, *params.DownloadID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexerIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexerIds", runtime.ParamLocationQuery, *params.IndexerIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1HistoryIndexerRequest generates requests for GetAPIV1HistoryIndexer
func NewGetAPIV1HistoryIndexerRequest(server string, params *GetAPIV1HistoryIndexerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/history/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IndexerID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexerId", runtime.ParamLocationQuery, *params.IndexerID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1HistorySinceRequest generates requests for GetAPIV1HistorySince
func NewGetAPIV1HistorySinceRequest(server string, params *GetAPIV1HistorySinceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/history/since")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1IndexerRequest generates requests for GetAPIV1Indexer
func NewGetAPIV1IndexerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1IndexerRequest calls the generic PostAPIV1Indexer builder with application/json body
func NewPostAPIV1IndexerRequest(server string, params *PostAPIV1IndexerParams, body PostAPIV1IndexerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1IndexerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1IndexerRequestWithBody generates requests for PostAPIV1Indexer with any type of body
func NewPostAPIV1IndexerRequestWithBody(server string, params *PostAPIV1IndexerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1IndexerActionNameRequest calls the generic PostAPIV1IndexerActionName builder with application/json body
func NewPostAPIV1IndexerActionNameRequest(server string, name string, body PostAPIV1IndexerActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1IndexerActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostAPIV1IndexerActionNameRequestWithBody generates requests for PostAPIV1IndexerActionName with any type of body
func NewPostAPIV1IndexerActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAPIV1IndexerBulkRequest calls the generic DeleteAPIV1IndexerBulk builder with application/json body
func NewDeleteAPIV1IndexerBulkRequest(server string, body DeleteAPIV1IndexerBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAPIV1IndexerBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAPIV1IndexerBulkRequestWithBody generates requests for DeleteAPIV1IndexerBulk with any type of body
func NewDeleteAPIV1IndexerBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAPIV1IndexerBulkRequest calls the generic PutAPIV1IndexerBulk builder with application/json body
func NewPutAPIV1IndexerBulkRequest(server string, body PutAPIV1IndexerBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1IndexerBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAPIV1IndexerBulkRequestWithBody generates requests for PutAPIV1IndexerBulk with any type of body
func NewPutAPIV1IndexerBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1IndexerCategoriesRequest generates requests for GetAPIV1IndexerCategories
func NewGetAPIV1IndexerCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1IndexerSchemaRequest generates requests for GetAPIV1IndexerSchema
func NewGetAPIV1IndexerSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1IndexerTestRequest calls the generic PostAPIV1IndexerTest builder with application/json body
func NewPostAPIV1IndexerTestRequest(server string, params *PostAPIV1IndexerTestParams, body PostAPIV1IndexerTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1IndexerTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1IndexerTestRequestWithBody generates requests for PostAPIV1IndexerTest with any type of body
func NewPostAPIV1IndexerTestRequestWithBody(server string, params *PostAPIV1IndexerTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1IndexerTestallRequest generates requests for PostAPIV1IndexerTestall
func NewPostAPIV1IndexerTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1IndexerIDRequest generates requests for DeleteAPIV1IndexerID
func NewDeleteAPIV1IndexerIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1IndexerIDRequest generates requests for GetAPIV1IndexerID
func NewGetAPIV1IndexerIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1IndexerIDRequest calls the generic PutAPIV1IndexerID builder with application/json body
func NewPutAPIV1IndexerIDRequest(server string, id string, params *PutAPIV1IndexerIDParams, body PutAPIV1IndexerIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1IndexerIDRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutAPIV1IndexerIDRequestWithBody generates requests for PutAPIV1IndexerID with any type of body
func NewPutAPIV1IndexerIDRequestWithBody(server string, id string, params *PutAPIV1IndexerIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1IndexerIDDownloadRequest generates requests for GetAPIV1IndexerIDDownload
func NewGetAPIV1IndexerIDDownloadRequest(server string, id int32, params *GetAPIV1IndexerIDDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Link != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link", runtime.ParamLocationQuery, *params.Link); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.File != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1IndexerIDNewznabRequest generates requests for GetAPIV1IndexerIDNewznab
func NewGetAPIV1IndexerIDNewznabRequest(server string, id int32, params *GetAPIV1IndexerIDNewznabParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexer/%s/newznab", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.T != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t", runtime.ParamLocationQuery, *params.T); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cat", runtime.ParamLocationQuery, *params.Cat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Imdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "imdbid", runtime.ParamLocationQuery, *params.Imdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tmdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tmdbid", runtime.ParamLocationQuery, *params.Tmdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extended != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extended", runtime.ParamLocationQuery, *params.Extended); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minage", runtime.ParamLocationQuery, *params.Minage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxage", runtime.ParamLocationQuery, *params.Maxage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minsize", runtime.ParamLocationQuery, *params.Minsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxsize", runtime.ParamLocationQuery, *params.Maxsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, *params.Rid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvmazeid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvmazeid", runtime.ParamLocationQuery, *params.Tvmazeid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Traktid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traktid", runtime.ParamLocationQuery, *params.Traktid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvdbid", runtime.ParamLocationQuery, *params.Tvdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Doubanid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "doubanid", runtime.ParamLocationQuery, *params.Doubanid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Season != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "season", runtime.ParamLocationQuery, *params.Season); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ep", runtime.ParamLocationQuery, *params.Ep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Album != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "album", runtime.ParamLocationQuery, *params.Album); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Artist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artist", runtime.ParamLocationQuery, *params.Artist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Track != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "track", runtime.ParamLocationQuery, *params.Track); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Publisher != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publisher", runtime.ParamLocationQuery, *params.Publisher); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Configured != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configured", runtime.ParamLocationQuery, *params.Configured); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Host != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, *params.Host); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Server != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, *params.Server); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1IndexerproxyRequest generates requests for GetAPIV1Indexerproxy
func NewGetAPIV1IndexerproxyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1IndexerproxyRequest calls the generic PostAPIV1Indexerproxy builder with application/json body
func NewPostAPIV1IndexerproxyRequest(server string, params *PostAPIV1IndexerproxyParams, body PostAPIV1IndexerproxyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1IndexerproxyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1IndexerproxyRequestWithBody generates requests for PostAPIV1Indexerproxy with any type of body
func NewPostAPIV1IndexerproxyRequestWithBody(server string, params *PostAPIV1IndexerproxyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1IndexerproxyActionNameRequest calls the generic PostAPIV1IndexerproxyActionName builder with application/json body
func NewPostAPIV1IndexerproxyActionNameRequest(server string, name string, body PostAPIV1IndexerproxyActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1IndexerproxyActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostAPIV1IndexerproxyActionNameRequestWithBody generates requests for PostAPIV1IndexerproxyActionName with any type of body
func NewPostAPIV1IndexerproxyActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1IndexerproxySchemaRequest generates requests for GetAPIV1IndexerproxySchema
func NewGetAPIV1IndexerproxySchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1IndexerproxyTestRequest calls the generic PostAPIV1IndexerproxyTest builder with application/json body
func NewPostAPIV1IndexerproxyTestRequest(server string, params *PostAPIV1IndexerproxyTestParams, body PostAPIV1IndexerproxyTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1IndexerproxyTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1IndexerproxyTestRequestWithBody generates requests for PostAPIV1IndexerproxyTest with any type of body
func NewPostAPIV1IndexerproxyTestRequestWithBody(server string, params *PostAPIV1IndexerproxyTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1IndexerproxyTestallRequest generates requests for PostAPIV1IndexerproxyTestall
func NewPostAPIV1IndexerproxyTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1IndexerproxyIDRequest generates requests for DeleteAPIV1IndexerproxyID
func NewDeleteAPIV1IndexerproxyIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1IndexerproxyIDRequest generates requests for GetAPIV1IndexerproxyID
func NewGetAPIV1IndexerproxyIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1IndexerproxyIDRequest calls the generic PutAPIV1IndexerproxyID builder with application/json body
func NewPutAPIV1IndexerproxyIDRequest(server string, id string, params *PutAPIV1IndexerproxyIDParams, body PutAPIV1IndexerproxyIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1IndexerproxyIDRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutAPIV1IndexerproxyIDRequestWithBody generates requests for PutAPIV1IndexerproxyID with any type of body
func NewPutAPIV1IndexerproxyIDRequestWithBody(server string, id string, params *PutAPIV1IndexerproxyIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerproxy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1IndexerstatsRequest generates requests for GetAPIV1Indexerstats
func NewGetAPIV1IndexerstatsRequest(server string, params *GetAPIV1IndexerstatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerstats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Indexers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexers", runtime.ParamLocationQuery, *params.Indexers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Protocols != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocols", runtime.ParamLocationQuery, *params.Protocols); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1IndexerstatusRequest generates requests for GetAPIV1Indexerstatus
func NewGetAPIV1IndexerstatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/indexerstatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1LocalizationRequest generates requests for GetAPIV1Localization
func NewGetAPIV1LocalizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/localization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1LocalizationOptionsRequest generates requests for GetAPIV1LocalizationOptions
func NewGetAPIV1LocalizationOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/localization/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1LogRequest generates requests for GetAPIV1Log
func NewGetAPIV1LogRequest(server string, params *GetAPIV1LogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1LogFileRequest generates requests for GetAPIV1LogFile
func NewGetAPIV1LogFileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1LogFileUpdateRequest generates requests for GetAPIV1LogFileUpdate
func NewGetAPIV1LogFileUpdateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1LogFileUpdateFilenameRequest generates requests for GetAPIV1LogFileUpdateFilename
func NewGetAPIV1LogFileUpdateFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file/update/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1LogFileFilenameRequest generates requests for GetAPIV1LogFileFilename
func NewGetAPIV1LogFileFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/log/file/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1NotificationRequest generates requests for GetAPIV1Notification
func NewGetAPIV1NotificationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1NotificationRequest calls the generic PostAPIV1Notification builder with application/json body
func NewPostAPIV1NotificationRequest(server string, params *PostAPIV1NotificationParams, body PostAPIV1NotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1NotificationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1NotificationRequestWithBody generates requests for PostAPIV1Notification with any type of body
func NewPostAPIV1NotificationRequestWithBody(server string, params *PostAPIV1NotificationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1NotificationActionNameRequest calls the generic PostAPIV1NotificationActionName builder with application/json body
func NewPostAPIV1NotificationActionNameRequest(server string, name string, body PostAPIV1NotificationActionNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1NotificationActionNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostAPIV1NotificationActionNameRequestWithBody generates requests for PostAPIV1NotificationActionName with any type of body
func NewPostAPIV1NotificationActionNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1NotificationSchemaRequest generates requests for GetAPIV1NotificationSchema
func NewGetAPIV1NotificationSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1NotificationTestRequest calls the generic PostAPIV1NotificationTest builder with application/json body
func NewPostAPIV1NotificationTestRequest(server string, params *PostAPIV1NotificationTestParams, body PostAPIV1NotificationTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1NotificationTestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAPIV1NotificationTestRequestWithBody generates requests for PostAPIV1NotificationTest with any type of body
func NewPostAPIV1NotificationTestRequestWithBody(server string, params *PostAPIV1NotificationTestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceTest", runtime.ParamLocationQuery, *params.ForceTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1NotificationTestallRequest generates requests for PostAPIV1NotificationTestall
func NewPostAPIV1NotificationTestallRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/testall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1NotificationIDRequest generates requests for DeleteAPIV1NotificationID
func NewDeleteAPIV1NotificationIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1NotificationIDRequest generates requests for GetAPIV1NotificationID
func NewGetAPIV1NotificationIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1NotificationIDRequest calls the generic PutAPIV1NotificationID builder with application/json body
func NewPutAPIV1NotificationIDRequest(server string, id string, params *PutAPIV1NotificationIDParams, body PutAPIV1NotificationIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1NotificationIDRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutAPIV1NotificationIDRequestWithBody generates requests for PutAPIV1NotificationID with any type of body
func NewPutAPIV1NotificationIDRequestWithBody(server string, id string, params *PutAPIV1NotificationIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceSave != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceSave", runtime.ParamLocationQuery, *params.ForceSave); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1SearchRequest generates requests for GetAPIV1Search
func NewGetAPIV1SearchRequest(server string, params *GetAPIV1SearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexerIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "indexerIds", runtime.ParamLocationQuery, *params.IndexerIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Categories != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categories", runtime.ParamLocationQuery, *params.Categories); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1SearchRequest calls the generic PostAPIV1Search builder with application/json body
func NewPostAPIV1SearchRequest(server string, body PostAPIV1SearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1SearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIV1SearchRequestWithBody generates requests for PostAPIV1Search with any type of body
func NewPostAPIV1SearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAPIV1SearchBulkRequest calls the generic PostAPIV1SearchBulk builder with application/json body
func NewPostAPIV1SearchBulkRequest(server string, body PostAPIV1SearchBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1SearchBulkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIV1SearchBulkRequestWithBody generates requests for PostAPIV1SearchBulk with any type of body
func NewPostAPIV1SearchBulkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/search/bulk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1SystemBackupRequest generates requests for GetAPIV1SystemBackup
func NewGetAPIV1SystemBackupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1SystemBackupRestoreUploadRequest generates requests for PostAPIV1SystemBackupRestoreUpload
func NewPostAPIV1SystemBackupRestoreUploadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup/restore/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1SystemBackupRestoreIDRequest generates requests for PostAPIV1SystemBackupRestoreID
func NewPostAPIV1SystemBackupRestoreIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup/restore/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1SystemBackupIDRequest generates requests for DeleteAPIV1SystemBackupID
func NewDeleteAPIV1SystemBackupIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/backup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1SystemRestartRequest generates requests for PostAPIV1SystemRestart
func NewPostAPIV1SystemRestartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1SystemRoutesRequest generates requests for GetAPIV1SystemRoutes
func NewGetAPIV1SystemRoutesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1SystemRoutesDuplicateRequest generates requests for GetAPIV1SystemRoutesDuplicate
func NewGetAPIV1SystemRoutesDuplicateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/routes/duplicate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1SystemShutdownRequest generates requests for PostAPIV1SystemShutdown
func NewPostAPIV1SystemShutdownRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1SystemStatusRequest generates requests for GetAPIV1SystemStatus
func NewGetAPIV1SystemStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1SystemTaskRequest generates requests for GetAPIV1SystemTask
func NewGetAPIV1SystemTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1SystemTaskIDRequest generates requests for GetAPIV1SystemTaskID
func NewGetAPIV1SystemTaskIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/system/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1TagRequest generates requests for GetAPIV1Tag
func NewGetAPIV1TagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAPIV1TagRequest calls the generic PostAPIV1Tag builder with application/json body
func NewPostAPIV1TagRequest(server string, body PostAPIV1TagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAPIV1TagRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAPIV1TagRequestWithBody generates requests for PostAPIV1Tag with any type of body
func NewPostAPIV1TagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1TagDetailRequest generates requests for GetAPIV1TagDetail
func NewGetAPIV1TagDetailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1TagDetailIDRequest generates requests for GetAPIV1TagDetailID
func NewGetAPIV1TagDetailIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAPIV1TagIDRequest generates requests for DeleteAPIV1TagID
func NewDeleteAPIV1TagIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIV1TagIDRequest generates requests for GetAPIV1TagID
func NewGetAPIV1TagIDRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAPIV1TagIDRequest calls the generic PutAPIV1TagID builder with application/json body
func NewPutAPIV1TagIDRequest(server string, id string, body PutAPIV1TagIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAPIV1TagIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAPIV1TagIDRequestWithBody generates requests for PutAPIV1TagID with any type of body
func NewPutAPIV1TagIDRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAPIV1UpdateRequest generates requests for GetAPIV1Update
func NewGetAPIV1UpdateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentPathRequest generates requests for GetContentPath
func NewGetContentPathRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoginRequest generates requests for GetLogin
func NewGetLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, params *PostLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReturnURL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "returnUrl", runtime.ParamLocationQuery, *params.ReturnURL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogoutRequest generates requests for GetLogout
func NewGetLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadPingRequest generates requests for HeadPing
func NewHeadPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIDAPIRequest generates requests for GetIDAPI
func NewGetIDAPIRequest(server string, id int32, params *GetIDAPIParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/api", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.T != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "t", runtime.ParamLocationQuery, *params.T); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cat", runtime.ParamLocationQuery, *params.Cat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Imdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "imdbid", runtime.ParamLocationQuery, *params.Imdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tmdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tmdbid", runtime.ParamLocationQuery, *params.Tmdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extended != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extended", runtime.ParamLocationQuery, *params.Extended); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minage", runtime.ParamLocationQuery, *params.Minage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxage", runtime.ParamLocationQuery, *params.Maxage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minsize", runtime.ParamLocationQuery, *params.Minsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxsize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxsize", runtime.ParamLocationQuery, *params.Maxsize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rid", runtime.ParamLocationQuery, *params.Rid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvmazeid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvmazeid", runtime.ParamLocationQuery, *params.Tvmazeid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Traktid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traktid", runtime.ParamLocationQuery, *params.Traktid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tvdbid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tvdbid", runtime.ParamLocationQuery, *params.Tvdbid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Doubanid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "doubanid", runtime.ParamLocationQuery, *params.Doubanid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Season != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "season", runtime.ParamLocationQuery, *params.Season); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ep", runtime.ParamLocationQuery, *params.Ep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Album != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "album", runtime.ParamLocationQuery, *params.Album); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Artist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artist", runtime.ParamLocationQuery, *params.Artist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Track != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "track", runtime.ParamLocationQuery, *params.Track); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Genre != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Publisher != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publisher", runtime.ParamLocationQuery, *params.Publisher); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Configured != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "configured", runtime.ParamLocationQuery, *params.Configured); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Host != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, *params.Host); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Server != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "server", runtime.ParamLocationQuery, *params.Server); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIDDownloadRequest generates requests for GetIDDownload
func NewGetIDDownloadRequest(server string, id int32, params *GetIDDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Link != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link", runtime.ParamLocationQuery, *params.Link); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.File != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPathRequest generates requests for GetPath
func NewGetPathRequest(server string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAPIWithResponse request
	GetAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIResponse, error)

	// GetAPIV1ApplicationsWithResponse request
	GetAPIV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ApplicationsResponse, error)

	// PostAPIV1ApplicationsWithBodyWithResponse request with any body
	PostAPIV1ApplicationsWithBodyWithResponse(ctx context.Context, params *PostAPIV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsResponse, error)

	PostAPIV1ApplicationsWithResponse(ctx context.Context, params *PostAPIV1ApplicationsParams, body PostAPIV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsResponse, error)

	// PostAPIV1ApplicationsActionNameWithBodyWithResponse request with any body
	PostAPIV1ApplicationsActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsActionNameResponse, error)

	PostAPIV1ApplicationsActionNameWithResponse(ctx context.Context, name string, body PostAPIV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsActionNameResponse, error)

	// DeleteAPIV1ApplicationsBulkWithBodyWithResponse request with any body
	DeleteAPIV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAPIV1ApplicationsBulkResponse, error)

	DeleteAPIV1ApplicationsBulkWithResponse(ctx context.Context, body DeleteAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAPIV1ApplicationsBulkResponse, error)

	// PutAPIV1ApplicationsBulkWithBodyWithResponse request with any body
	PutAPIV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsBulkResponse, error)

	PutAPIV1ApplicationsBulkWithResponse(ctx context.Context, body PutAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsBulkResponse, error)

	// GetAPIV1ApplicationsSchemaWithResponse request
	GetAPIV1ApplicationsSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ApplicationsSchemaResponse, error)

	// PostAPIV1ApplicationsTestWithBodyWithResponse request with any body
	PostAPIV1ApplicationsTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsTestResponse, error)

	PostAPIV1ApplicationsTestWithResponse(ctx context.Context, params *PostAPIV1ApplicationsTestParams, body PostAPIV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsTestResponse, error)

	// PostAPIV1ApplicationsTestallWithResponse request
	PostAPIV1ApplicationsTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsTestallResponse, error)

	// DeleteAPIV1ApplicationsIDWithResponse request
	DeleteAPIV1ApplicationsIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1ApplicationsIDResponse, error)

	// GetAPIV1ApplicationsIDWithResponse request
	GetAPIV1ApplicationsIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ApplicationsIDResponse, error)

	// PutAPIV1ApplicationsIDWithBodyWithResponse request with any body
	PutAPIV1ApplicationsIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsIDResponse, error)

	PutAPIV1ApplicationsIDWithResponse(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, body PutAPIV1ApplicationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsIDResponse, error)

	// GetAPIV1AppprofileWithResponse request
	GetAPIV1AppprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1AppprofileResponse, error)

	// PostAPIV1AppprofileWithBodyWithResponse request with any body
	PostAPIV1AppprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1AppprofileResponse, error)

	PostAPIV1AppprofileWithResponse(ctx context.Context, body PostAPIV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1AppprofileResponse, error)

	// GetAPIV1AppprofileSchemaWithResponse request
	GetAPIV1AppprofileSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1AppprofileSchemaResponse, error)

	// DeleteAPIV1AppprofileIDWithResponse request
	DeleteAPIV1AppprofileIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1AppprofileIDResponse, error)

	// GetAPIV1AppprofileIDWithResponse request
	GetAPIV1AppprofileIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1AppprofileIDResponse, error)

	// PutAPIV1AppprofileIDWithBodyWithResponse request with any body
	PutAPIV1AppprofileIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1AppprofileIDResponse, error)

	PutAPIV1AppprofileIDWithResponse(ctx context.Context, id string, body PutAPIV1AppprofileIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1AppprofileIDResponse, error)

	// GetAPIV1CommandWithResponse request
	GetAPIV1CommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1CommandResponse, error)

	// PostAPIV1CommandWithBodyWithResponse request with any body
	PostAPIV1CommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1CommandResponse, error)

	PostAPIV1CommandWithResponse(ctx context.Context, body PostAPIV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1CommandResponse, error)

	// DeleteAPIV1CommandIDWithResponse request
	DeleteAPIV1CommandIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1CommandIDResponse, error)

	// GetAPIV1CommandIDWithResponse request
	GetAPIV1CommandIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1CommandIDResponse, error)

	// GetAPIV1ConfigDevelopmentWithResponse request
	GetAPIV1ConfigDevelopmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDevelopmentResponse, error)

	// GetAPIV1ConfigDevelopmentIDWithResponse request
	GetAPIV1ConfigDevelopmentIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDevelopmentIDResponse, error)

	// PutAPIV1ConfigDevelopmentIDWithBodyWithResponse request with any body
	PutAPIV1ConfigDevelopmentIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDevelopmentIDResponse, error)

	PutAPIV1ConfigDevelopmentIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigDevelopmentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDevelopmentIDResponse, error)

	// GetAPIV1ConfigDownloadclientWithResponse request
	GetAPIV1ConfigDownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDownloadclientResponse, error)

	// GetAPIV1ConfigDownloadclientIDWithResponse request
	GetAPIV1ConfigDownloadclientIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDownloadclientIDResponse, error)

	// PutAPIV1ConfigDownloadclientIDWithBodyWithResponse request with any body
	PutAPIV1ConfigDownloadclientIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDownloadclientIDResponse, error)

	PutAPIV1ConfigDownloadclientIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigDownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDownloadclientIDResponse, error)

	// GetAPIV1ConfigHostWithResponse request
	GetAPIV1ConfigHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigHostResponse, error)

	// GetAPIV1ConfigHostIDWithResponse request
	GetAPIV1ConfigHostIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigHostIDResponse, error)

	// PutAPIV1ConfigHostIDWithBodyWithResponse request with any body
	PutAPIV1ConfigHostIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigHostIDResponse, error)

	PutAPIV1ConfigHostIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigHostIDResponse, error)

	// GetAPIV1ConfigUIWithResponse request
	GetAPIV1ConfigUIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigUIResponse, error)

	// GetAPIV1ConfigUIIDWithResponse request
	GetAPIV1ConfigUIIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigUIIDResponse, error)

	// PutAPIV1ConfigUIIDWithBodyWithResponse request with any body
	PutAPIV1ConfigUIIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigUIIDResponse, error)

	PutAPIV1ConfigUIIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigUIIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigUIIDResponse, error)

	// GetAPIV1CustomfilterWithResponse request
	GetAPIV1CustomfilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1CustomfilterResponse, error)

	// PostAPIV1CustomfilterWithBodyWithResponse request with any body
	PostAPIV1CustomfilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1CustomfilterResponse, error)

	PostAPIV1CustomfilterWithResponse(ctx context.Context, body PostAPIV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1CustomfilterResponse, error)

	// DeleteAPIV1CustomfilterIDWithResponse request
	DeleteAPIV1CustomfilterIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1CustomfilterIDResponse, error)

	// GetAPIV1CustomfilterIDWithResponse request
	GetAPIV1CustomfilterIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1CustomfilterIDResponse, error)

	// PutAPIV1CustomfilterIDWithBodyWithResponse request with any body
	PutAPIV1CustomfilterIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1CustomfilterIDResponse, error)

	PutAPIV1CustomfilterIDWithResponse(ctx context.Context, id string, body PutAPIV1CustomfilterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1CustomfilterIDResponse, error)

	// GetAPIV1DownloadclientWithResponse request
	GetAPIV1DownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1DownloadclientResponse, error)

	// PostAPIV1DownloadclientWithBodyWithResponse request with any body
	PostAPIV1DownloadclientWithBodyWithResponse(ctx context.Context, params *PostAPIV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientResponse, error)

	PostAPIV1DownloadclientWithResponse(ctx context.Context, params *PostAPIV1DownloadclientParams, body PostAPIV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientResponse, error)

	// PostAPIV1DownloadclientActionNameWithBodyWithResponse request with any body
	PostAPIV1DownloadclientActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientActionNameResponse, error)

	PostAPIV1DownloadclientActionNameWithResponse(ctx context.Context, name string, body PostAPIV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientActionNameResponse, error)

	// DeleteAPIV1DownloadclientBulkWithBodyWithResponse request with any body
	DeleteAPIV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAPIV1DownloadclientBulkResponse, error)

	DeleteAPIV1DownloadclientBulkWithResponse(ctx context.Context, body DeleteAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAPIV1DownloadclientBulkResponse, error)

	// PutAPIV1DownloadclientBulkWithBodyWithResponse request with any body
	PutAPIV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientBulkResponse, error)

	PutAPIV1DownloadclientBulkWithResponse(ctx context.Context, body PutAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientBulkResponse, error)

	// GetAPIV1DownloadclientSchemaWithResponse request
	GetAPIV1DownloadclientSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1DownloadclientSchemaResponse, error)

	// PostAPIV1DownloadclientTestWithBodyWithResponse request with any body
	PostAPIV1DownloadclientTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientTestResponse, error)

	PostAPIV1DownloadclientTestWithResponse(ctx context.Context, params *PostAPIV1DownloadclientTestParams, body PostAPIV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientTestResponse, error)

	// PostAPIV1DownloadclientTestallWithResponse request
	PostAPIV1DownloadclientTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientTestallResponse, error)

	// DeleteAPIV1DownloadclientIDWithResponse request
	DeleteAPIV1DownloadclientIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1DownloadclientIDResponse, error)

	// GetAPIV1DownloadclientIDWithResponse request
	GetAPIV1DownloadclientIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1DownloadclientIDResponse, error)

	// PutAPIV1DownloadclientIDWithBodyWithResponse request with any body
	PutAPIV1DownloadclientIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientIDResponse, error)

	PutAPIV1DownloadclientIDWithResponse(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, body PutAPIV1DownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientIDResponse, error)

	// GetAPIV1FilesystemWithResponse request
	GetAPIV1FilesystemWithResponse(ctx context.Context, params *GetAPIV1FilesystemParams, reqEditors ...RequestEditorFn) (*GetAPIV1FilesystemResponse, error)

	// GetAPIV1FilesystemTypeWithResponse request
	GetAPIV1FilesystemTypeWithResponse(ctx context.Context, params *GetAPIV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*GetAPIV1FilesystemTypeResponse, error)

	// GetAPIV1HealthWithResponse request
	GetAPIV1HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1HealthResponse, error)

	// GetAPIV1HistoryWithResponse request
	GetAPIV1HistoryWithResponse(ctx context.Context, params *GetAPIV1HistoryParams, reqEditors ...RequestEditorFn) (*GetAPIV1HistoryResponse, error)

	// GetAPIV1HistoryIndexerWithResponse request
	GetAPIV1HistoryIndexerWithResponse(ctx context.Context, params *GetAPIV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*GetAPIV1HistoryIndexerResponse, error)

	// GetAPIV1HistorySinceWithResponse request
	GetAPIV1HistorySinceWithResponse(ctx context.Context, params *GetAPIV1HistorySinceParams, reqEditors ...RequestEditorFn) (*GetAPIV1HistorySinceResponse, error)

	// GetAPIV1IndexerWithResponse request
	GetAPIV1IndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerResponse, error)

	// PostAPIV1IndexerWithBodyWithResponse request with any body
	PostAPIV1IndexerWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerResponse, error)

	PostAPIV1IndexerWithResponse(ctx context.Context, params *PostAPIV1IndexerParams, body PostAPIV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerResponse, error)

	// PostAPIV1IndexerActionNameWithBodyWithResponse request with any body
	PostAPIV1IndexerActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerActionNameResponse, error)

	PostAPIV1IndexerActionNameWithResponse(ctx context.Context, name string, body PostAPIV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerActionNameResponse, error)

	// DeleteAPIV1IndexerBulkWithBodyWithResponse request with any body
	DeleteAPIV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerBulkResponse, error)

	DeleteAPIV1IndexerBulkWithResponse(ctx context.Context, body DeleteAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerBulkResponse, error)

	// PutAPIV1IndexerBulkWithBodyWithResponse request with any body
	PutAPIV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerBulkResponse, error)

	PutAPIV1IndexerBulkWithResponse(ctx context.Context, body PutAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerBulkResponse, error)

	// GetAPIV1IndexerCategoriesWithResponse request
	GetAPIV1IndexerCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerCategoriesResponse, error)

	// GetAPIV1IndexerSchemaWithResponse request
	GetAPIV1IndexerSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerSchemaResponse, error)

	// PostAPIV1IndexerTestWithBodyWithResponse request with any body
	PostAPIV1IndexerTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerTestResponse, error)

	PostAPIV1IndexerTestWithResponse(ctx context.Context, params *PostAPIV1IndexerTestParams, body PostAPIV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerTestResponse, error)

	// PostAPIV1IndexerTestallWithResponse request
	PostAPIV1IndexerTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerTestallResponse, error)

	// DeleteAPIV1IndexerIDWithResponse request
	DeleteAPIV1IndexerIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerIDResponse, error)

	// GetAPIV1IndexerIDWithResponse request
	GetAPIV1IndexerIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerIDResponse, error)

	// PutAPIV1IndexerIDWithBodyWithResponse request with any body
	PutAPIV1IndexerIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerIDResponse, error)

	PutAPIV1IndexerIDWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, body PutAPIV1IndexerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerIDResponse, error)

	// GetAPIV1IndexerIDDownloadWithResponse request
	GetAPIV1IndexerIDDownloadWithResponse(ctx context.Context, id int32, params *GetAPIV1IndexerIDDownloadParams, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerIDDownloadResponse, error)

	// GetAPIV1IndexerIDNewznabWithResponse request
	GetAPIV1IndexerIDNewznabWithResponse(ctx context.Context, id int32, params *GetAPIV1IndexerIDNewznabParams, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerIDNewznabResponse, error)

	// GetAPIV1IndexerproxyWithResponse request
	GetAPIV1IndexerproxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerproxyResponse, error)

	// PostAPIV1IndexerproxyWithBodyWithResponse request with any body
	PostAPIV1IndexerproxyWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyResponse, error)

	PostAPIV1IndexerproxyWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyParams, body PostAPIV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyResponse, error)

	// PostAPIV1IndexerproxyActionNameWithBodyWithResponse request with any body
	PostAPIV1IndexerproxyActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyActionNameResponse, error)

	PostAPIV1IndexerproxyActionNameWithResponse(ctx context.Context, name string, body PostAPIV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyActionNameResponse, error)

	// GetAPIV1IndexerproxySchemaWithResponse request
	GetAPIV1IndexerproxySchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerproxySchemaResponse, error)

	// PostAPIV1IndexerproxyTestWithBodyWithResponse request with any body
	PostAPIV1IndexerproxyTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyTestResponse, error)

	PostAPIV1IndexerproxyTestWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, body PostAPIV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyTestResponse, error)

	// PostAPIV1IndexerproxyTestallWithResponse request
	PostAPIV1IndexerproxyTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyTestallResponse, error)

	// DeleteAPIV1IndexerproxyIDWithResponse request
	DeleteAPIV1IndexerproxyIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerproxyIDResponse, error)

	// GetAPIV1IndexerproxyIDWithResponse request
	GetAPIV1IndexerproxyIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerproxyIDResponse, error)

	// PutAPIV1IndexerproxyIDWithBodyWithResponse request with any body
	PutAPIV1IndexerproxyIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerproxyIDResponse, error)

	PutAPIV1IndexerproxyIDWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, body PutAPIV1IndexerproxyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerproxyIDResponse, error)

	// GetAPIV1IndexerstatsWithResponse request
	GetAPIV1IndexerstatsWithResponse(ctx context.Context, params *GetAPIV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerstatsResponse, error)

	// GetAPIV1IndexerstatusWithResponse request
	GetAPIV1IndexerstatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerstatusResponse, error)

	// GetAPIV1LocalizationWithResponse request
	GetAPIV1LocalizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LocalizationResponse, error)

	// GetAPIV1LocalizationOptionsWithResponse request
	GetAPIV1LocalizationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LocalizationOptionsResponse, error)

	// GetAPIV1LogWithResponse request
	GetAPIV1LogWithResponse(ctx context.Context, params *GetAPIV1LogParams, reqEditors ...RequestEditorFn) (*GetAPIV1LogResponse, error)

	// GetAPIV1LogFileWithResponse request
	GetAPIV1LogFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileResponse, error)

	// GetAPIV1LogFileUpdateWithResponse request
	GetAPIV1LogFileUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileUpdateResponse, error)

	// GetAPIV1LogFileUpdateFilenameWithResponse request
	GetAPIV1LogFileUpdateFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileUpdateFilenameResponse, error)

	// GetAPIV1LogFileFilenameWithResponse request
	GetAPIV1LogFileFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileFilenameResponse, error)

	// GetAPIV1NotificationWithResponse request
	GetAPIV1NotificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1NotificationResponse, error)

	// PostAPIV1NotificationWithBodyWithResponse request with any body
	PostAPIV1NotificationWithBodyWithResponse(ctx context.Context, params *PostAPIV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationResponse, error)

	PostAPIV1NotificationWithResponse(ctx context.Context, params *PostAPIV1NotificationParams, body PostAPIV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationResponse, error)

	// PostAPIV1NotificationActionNameWithBodyWithResponse request with any body
	PostAPIV1NotificationActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationActionNameResponse, error)

	PostAPIV1NotificationActionNameWithResponse(ctx context.Context, name string, body PostAPIV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationActionNameResponse, error)

	// GetAPIV1NotificationSchemaWithResponse request
	GetAPIV1NotificationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1NotificationSchemaResponse, error)

	// PostAPIV1NotificationTestWithBodyWithResponse request with any body
	PostAPIV1NotificationTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationTestResponse, error)

	PostAPIV1NotificationTestWithResponse(ctx context.Context, params *PostAPIV1NotificationTestParams, body PostAPIV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationTestResponse, error)

	// PostAPIV1NotificationTestallWithResponse request
	PostAPIV1NotificationTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationTestallResponse, error)

	// DeleteAPIV1NotificationIDWithResponse request
	DeleteAPIV1NotificationIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1NotificationIDResponse, error)

	// GetAPIV1NotificationIDWithResponse request
	GetAPIV1NotificationIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1NotificationIDResponse, error)

	// PutAPIV1NotificationIDWithBodyWithResponse request with any body
	PutAPIV1NotificationIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1NotificationIDResponse, error)

	PutAPIV1NotificationIDWithResponse(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, body PutAPIV1NotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1NotificationIDResponse, error)

	// GetAPIV1SearchWithResponse request
	GetAPIV1SearchWithResponse(ctx context.Context, params *GetAPIV1SearchParams, reqEditors ...RequestEditorFn) (*GetAPIV1SearchResponse, error)

	// PostAPIV1SearchWithBodyWithResponse request with any body
	PostAPIV1SearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1SearchResponse, error)

	PostAPIV1SearchWithResponse(ctx context.Context, body PostAPIV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1SearchResponse, error)

	// PostAPIV1SearchBulkWithBodyWithResponse request with any body
	PostAPIV1SearchBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1SearchBulkResponse, error)

	PostAPIV1SearchBulkWithResponse(ctx context.Context, body PostAPIV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1SearchBulkResponse, error)

	// GetAPIV1SystemBackupWithResponse request
	GetAPIV1SystemBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemBackupResponse, error)

	// PostAPIV1SystemBackupRestoreUploadWithResponse request
	PostAPIV1SystemBackupRestoreUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1SystemBackupRestoreUploadResponse, error)

	// PostAPIV1SystemBackupRestoreIDWithResponse request
	PostAPIV1SystemBackupRestoreIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostAPIV1SystemBackupRestoreIDResponse, error)

	// DeleteAPIV1SystemBackupIDWithResponse request
	DeleteAPIV1SystemBackupIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1SystemBackupIDResponse, error)

	// PostAPIV1SystemRestartWithResponse request
	PostAPIV1SystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1SystemRestartResponse, error)

	// GetAPIV1SystemRoutesWithResponse request
	GetAPIV1SystemRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemRoutesResponse, error)

	// GetAPIV1SystemRoutesDuplicateWithResponse request
	GetAPIV1SystemRoutesDuplicateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemRoutesDuplicateResponse, error)

	// PostAPIV1SystemShutdownWithResponse request
	PostAPIV1SystemShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1SystemShutdownResponse, error)

	// GetAPIV1SystemStatusWithResponse request
	GetAPIV1SystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemStatusResponse, error)

	// GetAPIV1SystemTaskWithResponse request
	GetAPIV1SystemTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemTaskResponse, error)

	// GetAPIV1SystemTaskIDWithResponse request
	GetAPIV1SystemTaskIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1SystemTaskIDResponse, error)

	// GetAPIV1TagWithResponse request
	GetAPIV1TagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1TagResponse, error)

	// PostAPIV1TagWithBodyWithResponse request with any body
	PostAPIV1TagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1TagResponse, error)

	PostAPIV1TagWithResponse(ctx context.Context, body PostAPIV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1TagResponse, error)

	// GetAPIV1TagDetailWithResponse request
	GetAPIV1TagDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1TagDetailResponse, error)

	// GetAPIV1TagDetailIDWithResponse request
	GetAPIV1TagDetailIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1TagDetailIDResponse, error)

	// DeleteAPIV1TagIDWithResponse request
	DeleteAPIV1TagIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1TagIDResponse, error)

	// GetAPIV1TagIDWithResponse request
	GetAPIV1TagIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1TagIDResponse, error)

	// PutAPIV1TagIDWithBodyWithResponse request with any body
	PutAPIV1TagIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1TagIDResponse, error)

	PutAPIV1TagIDWithResponse(ctx context.Context, id string, body PutAPIV1TagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1TagIDResponse, error)

	// GetAPIV1UpdateWithResponse request
	GetAPIV1UpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1UpdateResponse, error)

	// GetContentPathWithResponse request
	GetContentPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetContentPathResponse, error)

	// GetLoginWithResponse request
	GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error)

	// PostLoginWithBodyWithResponse request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// GetLogoutWithResponse request
	GetLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogoutResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// HeadPingWithResponse request
	HeadPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadPingResponse, error)

	// GetIDAPIWithResponse request
	GetIDAPIWithResponse(ctx context.Context, id int32, params *GetIDAPIParams, reqEditors ...RequestEditorFn) (*GetIDAPIResponse, error)

	// GetIDDownloadWithResponse request
	GetIDDownloadWithResponse(ctx context.Context, id int32, params *GetIDDownloadParams, reqEditors ...RequestEditorFn) (*GetIDDownloadResponse, error)

	// GetPathWithResponse request
	GetPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetPathResponse, error)
}

type GetAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIInfoResource
}

// Status returns HTTPResponse.Status
func (r GetAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1ApplicationsActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1ApplicationsActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1ApplicationsActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1ApplicationsBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1ApplicationsBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1ApplicationsBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1ApplicationsBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1ApplicationsBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1ApplicationsBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ApplicationsSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ApplicationsSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ApplicationsSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1ApplicationsTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1ApplicationsTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1ApplicationsTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1ApplicationsTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1ApplicationsTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1ApplicationsTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1ApplicationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1ApplicationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1ApplicationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ApplicationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ApplicationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ApplicationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1ApplicationsIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1ApplicationsIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1ApplicationsIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1AppprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppProfileResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1AppprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1AppprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1AppprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1AppprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1AppprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1AppprofileSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1AppprofileSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1AppprofileSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1AppprofileIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1AppprofileIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1AppprofileIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1AppprofileIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
	JSON404      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetAPIV1AppprofileIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1AppprofileIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1AppprofileIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppProfileResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1AppprofileIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1AppprofileIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1CommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommandResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1CommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1CommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1CommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1CommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1CommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1CommandIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1CommandIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1CommandIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1CommandIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1CommandIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1CommandIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigDevelopmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigDevelopmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigDevelopmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigDevelopmentIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigDevelopmentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigDevelopmentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1ConfigDevelopmentIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentConfigResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1ConfigDevelopmentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1ConfigDevelopmentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigDownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigDownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigDownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigDownloadclientIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigDownloadclientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigDownloadclientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1ConfigDownloadclientIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientConfigResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1ConfigDownloadclientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1ConfigDownloadclientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1ConfigHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostConfigResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1ConfigHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1ConfigHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigUIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UIConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigUIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigUIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1ConfigUIIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UIConfigResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1ConfigUIIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1ConfigUIIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1ConfigUIIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UIConfigResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1ConfigUIIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1ConfigUIIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1CustomfilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1CustomfilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1CustomfilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1CustomfilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1CustomfilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1CustomfilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1CustomfilterIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1CustomfilterIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1CustomfilterIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1CustomfilterIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1CustomfilterIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1CustomfilterIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1CustomfilterIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomFilterResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1CustomfilterIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1CustomfilterIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1DownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1DownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1DownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1DownloadclientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1DownloadclientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1DownloadclientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1DownloadclientActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1DownloadclientActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1DownloadclientActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1DownloadclientBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1DownloadclientBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1DownloadclientBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1DownloadclientBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1DownloadclientBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1DownloadclientBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1DownloadclientSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1DownloadclientSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1DownloadclientSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1DownloadclientTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1DownloadclientTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1DownloadclientTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1DownloadclientTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1DownloadclientTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1DownloadclientTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1DownloadclientIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1DownloadclientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1DownloadclientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1DownloadclientIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1DownloadclientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1DownloadclientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1DownloadclientIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DownloadClientResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1DownloadclientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1DownloadclientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1FilesystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1FilesystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1FilesystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1FilesystemTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1FilesystemTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1FilesystemTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HealthResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1HistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistoryResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1HistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1HistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1HistoryIndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HistoryResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1HistoryIndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1HistoryIndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1HistorySinceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HistoryResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1HistorySinceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1HistorySinceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1IndexerBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1IndexerBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1IndexerBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1IndexerBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1IndexerBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1IndexerBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerCategory
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1IndexerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1IndexerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1IndexerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1IndexerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1IndexerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1IndexerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerIDDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerIDDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerIDDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerIDNewznabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerIDNewznabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerIDNewznabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerproxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerproxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerproxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerproxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerproxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerproxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerproxyActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerproxyActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerproxyActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerproxySchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerproxySchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerproxySchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerproxyTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerproxyTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerproxyTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1IndexerproxyTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1IndexerproxyTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1IndexerproxyTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1IndexerproxyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1IndexerproxyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1IndexerproxyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerproxyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerproxyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerproxyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1IndexerproxyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerProxyResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1IndexerproxyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1IndexerproxyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerstatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndexerStatsResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerstatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerstatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1IndexerstatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IndexerStatusResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1IndexerstatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1IndexerstatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1LocalizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1LocalizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1LocalizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1LocalizationOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LocalizationOption
}

// Status returns HTTPResponse.Status
func (r GetAPIV1LocalizationOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1LocalizationOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1LogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogResourcePagingResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1LogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1LogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1LogFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogFileResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1LogFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1LogFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1LogFileUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LogFileResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1LogFileUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1LogFileUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1LogFileUpdateFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1LogFileUpdateFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1LogFileUpdateFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1LogFileFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1LogFileFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1LogFileFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1NotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1NotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1NotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1NotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1NotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1NotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1NotificationActionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1NotificationActionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1NotificationActionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1NotificationSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1NotificationSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1NotificationSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1NotificationTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1NotificationTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1NotificationTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1NotificationTestallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1NotificationTestallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1NotificationTestallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1NotificationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1NotificationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1NotificationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1NotificationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1NotificationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1NotificationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1NotificationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1NotificationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1NotificationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReleaseResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReleaseResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1SearchBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReleaseResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1SearchBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1SearchBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1SystemBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BackupResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1SystemBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1SystemBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1SystemBackupRestoreUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1SystemBackupRestoreUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1SystemBackupRestoreUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1SystemBackupRestoreIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1SystemBackupRestoreIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1SystemBackupRestoreIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1SystemBackupIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1SystemBackupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1SystemBackupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1SystemRestartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1SystemRestartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1SystemRestartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1SystemRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1SystemRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1SystemRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1SystemRoutesDuplicateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAPIV1SystemRoutesDuplicateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1SystemRoutesDuplicateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1SystemShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAPIV1SystemShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1SystemShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1SystemStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1SystemStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1SystemStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1SystemTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaskResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1SystemTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1SystemTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1SystemTaskIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1SystemTaskIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1SystemTaskIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1TagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1TagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1TagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAPIV1TagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r PostAPIV1TagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAPIV1TagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1TagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagDetailsResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1TagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1TagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1TagDetailIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagDetailsResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1TagDetailIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1TagDetailIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAPIV1TagIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAPIV1TagIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAPIV1TagIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1TagIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1TagIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1TagIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAPIV1TagIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResource
}

// Status returns HTTPResponse.Status
func (r PutAPIV1TagIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAPIV1TagIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UpdateResource
}

// Status returns HTTPResponse.Status
func (r GetAPIV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContentPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResource
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResource
}

// Status returns HTTPResponse.Status
func (r HeadPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIDAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIDAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIDAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIDDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIDDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIDDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAPIWithResponse request returning *GetAPIResponse
func (c *ClientWithResponses) GetAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIResponse, error) {
	rsp, err := c.GetAPI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIResponse(rsp)
}

// GetAPIV1ApplicationsWithResponse request returning *GetAPIV1ApplicationsResponse
func (c *ClientWithResponses) GetAPIV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ApplicationsResponse, error) {
	rsp, err := c.GetAPIV1Applications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ApplicationsResponse(rsp)
}

// PostAPIV1ApplicationsWithBodyWithResponse request with arbitrary body returning *PostAPIV1ApplicationsResponse
func (c *ClientWithResponses) PostAPIV1ApplicationsWithBodyWithResponse(ctx context.Context, params *PostAPIV1ApplicationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsResponse, error) {
	rsp, err := c.PostAPIV1ApplicationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1ApplicationsResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1ApplicationsWithResponse(ctx context.Context, params *PostAPIV1ApplicationsParams, body PostAPIV1ApplicationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsResponse, error) {
	rsp, err := c.PostAPIV1Applications(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1ApplicationsResponse(rsp)
}

// PostAPIV1ApplicationsActionNameWithBodyWithResponse request with arbitrary body returning *PostAPIV1ApplicationsActionNameResponse
func (c *ClientWithResponses) PostAPIV1ApplicationsActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsActionNameResponse, error) {
	rsp, err := c.PostAPIV1ApplicationsActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1ApplicationsActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1ApplicationsActionNameWithResponse(ctx context.Context, name string, body PostAPIV1ApplicationsActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsActionNameResponse, error) {
	rsp, err := c.PostAPIV1ApplicationsActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1ApplicationsActionNameResponse(rsp)
}

// DeleteAPIV1ApplicationsBulkWithBodyWithResponse request with arbitrary body returning *DeleteAPIV1ApplicationsBulkResponse
func (c *ClientWithResponses) DeleteAPIV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAPIV1ApplicationsBulkResponse, error) {
	rsp, err := c.DeleteAPIV1ApplicationsBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1ApplicationsBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteAPIV1ApplicationsBulkWithResponse(ctx context.Context, body DeleteAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAPIV1ApplicationsBulkResponse, error) {
	rsp, err := c.DeleteAPIV1ApplicationsBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1ApplicationsBulkResponse(rsp)
}

// PutAPIV1ApplicationsBulkWithBodyWithResponse request with arbitrary body returning *PutAPIV1ApplicationsBulkResponse
func (c *ClientWithResponses) PutAPIV1ApplicationsBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsBulkResponse, error) {
	rsp, err := c.PutAPIV1ApplicationsBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ApplicationsBulkResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1ApplicationsBulkWithResponse(ctx context.Context, body PutAPIV1ApplicationsBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsBulkResponse, error) {
	rsp, err := c.PutAPIV1ApplicationsBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ApplicationsBulkResponse(rsp)
}

// GetAPIV1ApplicationsSchemaWithResponse request returning *GetAPIV1ApplicationsSchemaResponse
func (c *ClientWithResponses) GetAPIV1ApplicationsSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ApplicationsSchemaResponse, error) {
	rsp, err := c.GetAPIV1ApplicationsSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ApplicationsSchemaResponse(rsp)
}

// PostAPIV1ApplicationsTestWithBodyWithResponse request with arbitrary body returning *PostAPIV1ApplicationsTestResponse
func (c *ClientWithResponses) PostAPIV1ApplicationsTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1ApplicationsTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsTestResponse, error) {
	rsp, err := c.PostAPIV1ApplicationsTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1ApplicationsTestResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1ApplicationsTestWithResponse(ctx context.Context, params *PostAPIV1ApplicationsTestParams, body PostAPIV1ApplicationsTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsTestResponse, error) {
	rsp, err := c.PostAPIV1ApplicationsTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1ApplicationsTestResponse(rsp)
}

// PostAPIV1ApplicationsTestallWithResponse request returning *PostAPIV1ApplicationsTestallResponse
func (c *ClientWithResponses) PostAPIV1ApplicationsTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1ApplicationsTestallResponse, error) {
	rsp, err := c.PostAPIV1ApplicationsTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1ApplicationsTestallResponse(rsp)
}

// DeleteAPIV1ApplicationsIDWithResponse request returning *DeleteAPIV1ApplicationsIDResponse
func (c *ClientWithResponses) DeleteAPIV1ApplicationsIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1ApplicationsIDResponse, error) {
	rsp, err := c.DeleteAPIV1ApplicationsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1ApplicationsIDResponse(rsp)
}

// GetAPIV1ApplicationsIDWithResponse request returning *GetAPIV1ApplicationsIDResponse
func (c *ClientWithResponses) GetAPIV1ApplicationsIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ApplicationsIDResponse, error) {
	rsp, err := c.GetAPIV1ApplicationsID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ApplicationsIDResponse(rsp)
}

// PutAPIV1ApplicationsIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1ApplicationsIDResponse
func (c *ClientWithResponses) PutAPIV1ApplicationsIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsIDResponse, error) {
	rsp, err := c.PutAPIV1ApplicationsIDWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ApplicationsIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1ApplicationsIDWithResponse(ctx context.Context, id string, params *PutAPIV1ApplicationsIDParams, body PutAPIV1ApplicationsIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ApplicationsIDResponse, error) {
	rsp, err := c.PutAPIV1ApplicationsID(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ApplicationsIDResponse(rsp)
}

// GetAPIV1AppprofileWithResponse request returning *GetAPIV1AppprofileResponse
func (c *ClientWithResponses) GetAPIV1AppprofileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1AppprofileResponse, error) {
	rsp, err := c.GetAPIV1Appprofile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1AppprofileResponse(rsp)
}

// PostAPIV1AppprofileWithBodyWithResponse request with arbitrary body returning *PostAPIV1AppprofileResponse
func (c *ClientWithResponses) PostAPIV1AppprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1AppprofileResponse, error) {
	rsp, err := c.PostAPIV1AppprofileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1AppprofileResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1AppprofileWithResponse(ctx context.Context, body PostAPIV1AppprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1AppprofileResponse, error) {
	rsp, err := c.PostAPIV1Appprofile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1AppprofileResponse(rsp)
}

// GetAPIV1AppprofileSchemaWithResponse request returning *GetAPIV1AppprofileSchemaResponse
func (c *ClientWithResponses) GetAPIV1AppprofileSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1AppprofileSchemaResponse, error) {
	rsp, err := c.GetAPIV1AppprofileSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1AppprofileSchemaResponse(rsp)
}

// DeleteAPIV1AppprofileIDWithResponse request returning *DeleteAPIV1AppprofileIDResponse
func (c *ClientWithResponses) DeleteAPIV1AppprofileIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1AppprofileIDResponse, error) {
	rsp, err := c.DeleteAPIV1AppprofileID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1AppprofileIDResponse(rsp)
}

// GetAPIV1AppprofileIDWithResponse request returning *GetAPIV1AppprofileIDResponse
func (c *ClientWithResponses) GetAPIV1AppprofileIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1AppprofileIDResponse, error) {
	rsp, err := c.GetAPIV1AppprofileID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1AppprofileIDResponse(rsp)
}

// PutAPIV1AppprofileIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1AppprofileIDResponse
func (c *ClientWithResponses) PutAPIV1AppprofileIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1AppprofileIDResponse, error) {
	rsp, err := c.PutAPIV1AppprofileIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1AppprofileIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1AppprofileIDWithResponse(ctx context.Context, id string, body PutAPIV1AppprofileIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1AppprofileIDResponse, error) {
	rsp, err := c.PutAPIV1AppprofileID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1AppprofileIDResponse(rsp)
}

// GetAPIV1CommandWithResponse request returning *GetAPIV1CommandResponse
func (c *ClientWithResponses) GetAPIV1CommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1CommandResponse, error) {
	rsp, err := c.GetAPIV1Command(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1CommandResponse(rsp)
}

// PostAPIV1CommandWithBodyWithResponse request with arbitrary body returning *PostAPIV1CommandResponse
func (c *ClientWithResponses) PostAPIV1CommandWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1CommandResponse, error) {
	rsp, err := c.PostAPIV1CommandWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1CommandResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1CommandWithResponse(ctx context.Context, body PostAPIV1CommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1CommandResponse, error) {
	rsp, err := c.PostAPIV1Command(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1CommandResponse(rsp)
}

// DeleteAPIV1CommandIDWithResponse request returning *DeleteAPIV1CommandIDResponse
func (c *ClientWithResponses) DeleteAPIV1CommandIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1CommandIDResponse, error) {
	rsp, err := c.DeleteAPIV1CommandID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1CommandIDResponse(rsp)
}

// GetAPIV1CommandIDWithResponse request returning *GetAPIV1CommandIDResponse
func (c *ClientWithResponses) GetAPIV1CommandIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1CommandIDResponse, error) {
	rsp, err := c.GetAPIV1CommandID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1CommandIDResponse(rsp)
}

// GetAPIV1ConfigDevelopmentWithResponse request returning *GetAPIV1ConfigDevelopmentResponse
func (c *ClientWithResponses) GetAPIV1ConfigDevelopmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDevelopmentResponse, error) {
	rsp, err := c.GetAPIV1ConfigDevelopment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigDevelopmentResponse(rsp)
}

// GetAPIV1ConfigDevelopmentIDWithResponse request returning *GetAPIV1ConfigDevelopmentIDResponse
func (c *ClientWithResponses) GetAPIV1ConfigDevelopmentIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDevelopmentIDResponse, error) {
	rsp, err := c.GetAPIV1ConfigDevelopmentID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigDevelopmentIDResponse(rsp)
}

// PutAPIV1ConfigDevelopmentIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1ConfigDevelopmentIDResponse
func (c *ClientWithResponses) PutAPIV1ConfigDevelopmentIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDevelopmentIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigDevelopmentIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigDevelopmentIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1ConfigDevelopmentIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigDevelopmentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDevelopmentIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigDevelopmentID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigDevelopmentIDResponse(rsp)
}

// GetAPIV1ConfigDownloadclientWithResponse request returning *GetAPIV1ConfigDownloadclientResponse
func (c *ClientWithResponses) GetAPIV1ConfigDownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDownloadclientResponse, error) {
	rsp, err := c.GetAPIV1ConfigDownloadclient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigDownloadclientResponse(rsp)
}

// GetAPIV1ConfigDownloadclientIDWithResponse request returning *GetAPIV1ConfigDownloadclientIDResponse
func (c *ClientWithResponses) GetAPIV1ConfigDownloadclientIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigDownloadclientIDResponse, error) {
	rsp, err := c.GetAPIV1ConfigDownloadclientID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigDownloadclientIDResponse(rsp)
}

// PutAPIV1ConfigDownloadclientIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1ConfigDownloadclientIDResponse
func (c *ClientWithResponses) PutAPIV1ConfigDownloadclientIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDownloadclientIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigDownloadclientIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigDownloadclientIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1ConfigDownloadclientIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigDownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigDownloadclientIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigDownloadclientID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigDownloadclientIDResponse(rsp)
}

// GetAPIV1ConfigHostWithResponse request returning *GetAPIV1ConfigHostResponse
func (c *ClientWithResponses) GetAPIV1ConfigHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigHostResponse, error) {
	rsp, err := c.GetAPIV1ConfigHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigHostResponse(rsp)
}

// GetAPIV1ConfigHostIDWithResponse request returning *GetAPIV1ConfigHostIDResponse
func (c *ClientWithResponses) GetAPIV1ConfigHostIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigHostIDResponse, error) {
	rsp, err := c.GetAPIV1ConfigHostID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigHostIDResponse(rsp)
}

// PutAPIV1ConfigHostIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1ConfigHostIDResponse
func (c *ClientWithResponses) PutAPIV1ConfigHostIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigHostIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigHostIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigHostIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1ConfigHostIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigHostIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigHostID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigHostIDResponse(rsp)
}

// GetAPIV1ConfigUIWithResponse request returning *GetAPIV1ConfigUIResponse
func (c *ClientWithResponses) GetAPIV1ConfigUIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigUIResponse, error) {
	rsp, err := c.GetAPIV1ConfigUI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigUIResponse(rsp)
}

// GetAPIV1ConfigUIIDWithResponse request returning *GetAPIV1ConfigUIIDResponse
func (c *ClientWithResponses) GetAPIV1ConfigUIIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1ConfigUIIDResponse, error) {
	rsp, err := c.GetAPIV1ConfigUIID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1ConfigUIIDResponse(rsp)
}

// PutAPIV1ConfigUIIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1ConfigUIIDResponse
func (c *ClientWithResponses) PutAPIV1ConfigUIIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigUIIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigUIIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigUIIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1ConfigUIIDWithResponse(ctx context.Context, id string, body PutAPIV1ConfigUIIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1ConfigUIIDResponse, error) {
	rsp, err := c.PutAPIV1ConfigUIID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1ConfigUIIDResponse(rsp)
}

// GetAPIV1CustomfilterWithResponse request returning *GetAPIV1CustomfilterResponse
func (c *ClientWithResponses) GetAPIV1CustomfilterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1CustomfilterResponse, error) {
	rsp, err := c.GetAPIV1Customfilter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1CustomfilterResponse(rsp)
}

// PostAPIV1CustomfilterWithBodyWithResponse request with arbitrary body returning *PostAPIV1CustomfilterResponse
func (c *ClientWithResponses) PostAPIV1CustomfilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1CustomfilterResponse, error) {
	rsp, err := c.PostAPIV1CustomfilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1CustomfilterResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1CustomfilterWithResponse(ctx context.Context, body PostAPIV1CustomfilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1CustomfilterResponse, error) {
	rsp, err := c.PostAPIV1Customfilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1CustomfilterResponse(rsp)
}

// DeleteAPIV1CustomfilterIDWithResponse request returning *DeleteAPIV1CustomfilterIDResponse
func (c *ClientWithResponses) DeleteAPIV1CustomfilterIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1CustomfilterIDResponse, error) {
	rsp, err := c.DeleteAPIV1CustomfilterID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1CustomfilterIDResponse(rsp)
}

// GetAPIV1CustomfilterIDWithResponse request returning *GetAPIV1CustomfilterIDResponse
func (c *ClientWithResponses) GetAPIV1CustomfilterIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1CustomfilterIDResponse, error) {
	rsp, err := c.GetAPIV1CustomfilterID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1CustomfilterIDResponse(rsp)
}

// PutAPIV1CustomfilterIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1CustomfilterIDResponse
func (c *ClientWithResponses) PutAPIV1CustomfilterIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1CustomfilterIDResponse, error) {
	rsp, err := c.PutAPIV1CustomfilterIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1CustomfilterIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1CustomfilterIDWithResponse(ctx context.Context, id string, body PutAPIV1CustomfilterIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1CustomfilterIDResponse, error) {
	rsp, err := c.PutAPIV1CustomfilterID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1CustomfilterIDResponse(rsp)
}

// GetAPIV1DownloadclientWithResponse request returning *GetAPIV1DownloadclientResponse
func (c *ClientWithResponses) GetAPIV1DownloadclientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1DownloadclientResponse, error) {
	rsp, err := c.GetAPIV1Downloadclient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1DownloadclientResponse(rsp)
}

// PostAPIV1DownloadclientWithBodyWithResponse request with arbitrary body returning *PostAPIV1DownloadclientResponse
func (c *ClientWithResponses) PostAPIV1DownloadclientWithBodyWithResponse(ctx context.Context, params *PostAPIV1DownloadclientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientResponse, error) {
	rsp, err := c.PostAPIV1DownloadclientWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1DownloadclientResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1DownloadclientWithResponse(ctx context.Context, params *PostAPIV1DownloadclientParams, body PostAPIV1DownloadclientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientResponse, error) {
	rsp, err := c.PostAPIV1Downloadclient(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1DownloadclientResponse(rsp)
}

// PostAPIV1DownloadclientActionNameWithBodyWithResponse request with arbitrary body returning *PostAPIV1DownloadclientActionNameResponse
func (c *ClientWithResponses) PostAPIV1DownloadclientActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientActionNameResponse, error) {
	rsp, err := c.PostAPIV1DownloadclientActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1DownloadclientActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1DownloadclientActionNameWithResponse(ctx context.Context, name string, body PostAPIV1DownloadclientActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientActionNameResponse, error) {
	rsp, err := c.PostAPIV1DownloadclientActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1DownloadclientActionNameResponse(rsp)
}

// DeleteAPIV1DownloadclientBulkWithBodyWithResponse request with arbitrary body returning *DeleteAPIV1DownloadclientBulkResponse
func (c *ClientWithResponses) DeleteAPIV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAPIV1DownloadclientBulkResponse, error) {
	rsp, err := c.DeleteAPIV1DownloadclientBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1DownloadclientBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteAPIV1DownloadclientBulkWithResponse(ctx context.Context, body DeleteAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAPIV1DownloadclientBulkResponse, error) {
	rsp, err := c.DeleteAPIV1DownloadclientBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1DownloadclientBulkResponse(rsp)
}

// PutAPIV1DownloadclientBulkWithBodyWithResponse request with arbitrary body returning *PutAPIV1DownloadclientBulkResponse
func (c *ClientWithResponses) PutAPIV1DownloadclientBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientBulkResponse, error) {
	rsp, err := c.PutAPIV1DownloadclientBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1DownloadclientBulkResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1DownloadclientBulkWithResponse(ctx context.Context, body PutAPIV1DownloadclientBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientBulkResponse, error) {
	rsp, err := c.PutAPIV1DownloadclientBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1DownloadclientBulkResponse(rsp)
}

// GetAPIV1DownloadclientSchemaWithResponse request returning *GetAPIV1DownloadclientSchemaResponse
func (c *ClientWithResponses) GetAPIV1DownloadclientSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1DownloadclientSchemaResponse, error) {
	rsp, err := c.GetAPIV1DownloadclientSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1DownloadclientSchemaResponse(rsp)
}

// PostAPIV1DownloadclientTestWithBodyWithResponse request with arbitrary body returning *PostAPIV1DownloadclientTestResponse
func (c *ClientWithResponses) PostAPIV1DownloadclientTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1DownloadclientTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientTestResponse, error) {
	rsp, err := c.PostAPIV1DownloadclientTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1DownloadclientTestResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1DownloadclientTestWithResponse(ctx context.Context, params *PostAPIV1DownloadclientTestParams, body PostAPIV1DownloadclientTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientTestResponse, error) {
	rsp, err := c.PostAPIV1DownloadclientTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1DownloadclientTestResponse(rsp)
}

// PostAPIV1DownloadclientTestallWithResponse request returning *PostAPIV1DownloadclientTestallResponse
func (c *ClientWithResponses) PostAPIV1DownloadclientTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1DownloadclientTestallResponse, error) {
	rsp, err := c.PostAPIV1DownloadclientTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1DownloadclientTestallResponse(rsp)
}

// DeleteAPIV1DownloadclientIDWithResponse request returning *DeleteAPIV1DownloadclientIDResponse
func (c *ClientWithResponses) DeleteAPIV1DownloadclientIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1DownloadclientIDResponse, error) {
	rsp, err := c.DeleteAPIV1DownloadclientID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1DownloadclientIDResponse(rsp)
}

// GetAPIV1DownloadclientIDWithResponse request returning *GetAPIV1DownloadclientIDResponse
func (c *ClientWithResponses) GetAPIV1DownloadclientIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1DownloadclientIDResponse, error) {
	rsp, err := c.GetAPIV1DownloadclientID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1DownloadclientIDResponse(rsp)
}

// PutAPIV1DownloadclientIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1DownloadclientIDResponse
func (c *ClientWithResponses) PutAPIV1DownloadclientIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientIDResponse, error) {
	rsp, err := c.PutAPIV1DownloadclientIDWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1DownloadclientIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1DownloadclientIDWithResponse(ctx context.Context, id string, params *PutAPIV1DownloadclientIDParams, body PutAPIV1DownloadclientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1DownloadclientIDResponse, error) {
	rsp, err := c.PutAPIV1DownloadclientID(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1DownloadclientIDResponse(rsp)
}

// GetAPIV1FilesystemWithResponse request returning *GetAPIV1FilesystemResponse
func (c *ClientWithResponses) GetAPIV1FilesystemWithResponse(ctx context.Context, params *GetAPIV1FilesystemParams, reqEditors ...RequestEditorFn) (*GetAPIV1FilesystemResponse, error) {
	rsp, err := c.GetAPIV1Filesystem(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1FilesystemResponse(rsp)
}

// GetAPIV1FilesystemTypeWithResponse request returning *GetAPIV1FilesystemTypeResponse
func (c *ClientWithResponses) GetAPIV1FilesystemTypeWithResponse(ctx context.Context, params *GetAPIV1FilesystemTypeParams, reqEditors ...RequestEditorFn) (*GetAPIV1FilesystemTypeResponse, error) {
	rsp, err := c.GetAPIV1FilesystemType(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1FilesystemTypeResponse(rsp)
}

// GetAPIV1HealthWithResponse request returning *GetAPIV1HealthResponse
func (c *ClientWithResponses) GetAPIV1HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1HealthResponse, error) {
	rsp, err := c.GetAPIV1Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1HealthResponse(rsp)
}

// GetAPIV1HistoryWithResponse request returning *GetAPIV1HistoryResponse
func (c *ClientWithResponses) GetAPIV1HistoryWithResponse(ctx context.Context, params *GetAPIV1HistoryParams, reqEditors ...RequestEditorFn) (*GetAPIV1HistoryResponse, error) {
	rsp, err := c.GetAPIV1History(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1HistoryResponse(rsp)
}

// GetAPIV1HistoryIndexerWithResponse request returning *GetAPIV1HistoryIndexerResponse
func (c *ClientWithResponses) GetAPIV1HistoryIndexerWithResponse(ctx context.Context, params *GetAPIV1HistoryIndexerParams, reqEditors ...RequestEditorFn) (*GetAPIV1HistoryIndexerResponse, error) {
	rsp, err := c.GetAPIV1HistoryIndexer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1HistoryIndexerResponse(rsp)
}

// GetAPIV1HistorySinceWithResponse request returning *GetAPIV1HistorySinceResponse
func (c *ClientWithResponses) GetAPIV1HistorySinceWithResponse(ctx context.Context, params *GetAPIV1HistorySinceParams, reqEditors ...RequestEditorFn) (*GetAPIV1HistorySinceResponse, error) {
	rsp, err := c.GetAPIV1HistorySince(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1HistorySinceResponse(rsp)
}

// GetAPIV1IndexerWithResponse request returning *GetAPIV1IndexerResponse
func (c *ClientWithResponses) GetAPIV1IndexerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerResponse, error) {
	rsp, err := c.GetAPIV1Indexer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerResponse(rsp)
}

// PostAPIV1IndexerWithBodyWithResponse request with arbitrary body returning *PostAPIV1IndexerResponse
func (c *ClientWithResponses) PostAPIV1IndexerWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerResponse, error) {
	rsp, err := c.PostAPIV1IndexerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1IndexerWithResponse(ctx context.Context, params *PostAPIV1IndexerParams, body PostAPIV1IndexerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerResponse, error) {
	rsp, err := c.PostAPIV1Indexer(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerResponse(rsp)
}

// PostAPIV1IndexerActionNameWithBodyWithResponse request with arbitrary body returning *PostAPIV1IndexerActionNameResponse
func (c *ClientWithResponses) PostAPIV1IndexerActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerActionNameResponse, error) {
	rsp, err := c.PostAPIV1IndexerActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1IndexerActionNameWithResponse(ctx context.Context, name string, body PostAPIV1IndexerActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerActionNameResponse, error) {
	rsp, err := c.PostAPIV1IndexerActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerActionNameResponse(rsp)
}

// DeleteAPIV1IndexerBulkWithBodyWithResponse request with arbitrary body returning *DeleteAPIV1IndexerBulkResponse
func (c *ClientWithResponses) DeleteAPIV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerBulkResponse, error) {
	rsp, err := c.DeleteAPIV1IndexerBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1IndexerBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteAPIV1IndexerBulkWithResponse(ctx context.Context, body DeleteAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerBulkResponse, error) {
	rsp, err := c.DeleteAPIV1IndexerBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1IndexerBulkResponse(rsp)
}

// PutAPIV1IndexerBulkWithBodyWithResponse request with arbitrary body returning *PutAPIV1IndexerBulkResponse
func (c *ClientWithResponses) PutAPIV1IndexerBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerBulkResponse, error) {
	rsp, err := c.PutAPIV1IndexerBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1IndexerBulkResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1IndexerBulkWithResponse(ctx context.Context, body PutAPIV1IndexerBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerBulkResponse, error) {
	rsp, err := c.PutAPIV1IndexerBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1IndexerBulkResponse(rsp)
}

// GetAPIV1IndexerCategoriesWithResponse request returning *GetAPIV1IndexerCategoriesResponse
func (c *ClientWithResponses) GetAPIV1IndexerCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerCategoriesResponse, error) {
	rsp, err := c.GetAPIV1IndexerCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerCategoriesResponse(rsp)
}

// GetAPIV1IndexerSchemaWithResponse request returning *GetAPIV1IndexerSchemaResponse
func (c *ClientWithResponses) GetAPIV1IndexerSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerSchemaResponse, error) {
	rsp, err := c.GetAPIV1IndexerSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerSchemaResponse(rsp)
}

// PostAPIV1IndexerTestWithBodyWithResponse request with arbitrary body returning *PostAPIV1IndexerTestResponse
func (c *ClientWithResponses) PostAPIV1IndexerTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerTestResponse, error) {
	rsp, err := c.PostAPIV1IndexerTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerTestResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1IndexerTestWithResponse(ctx context.Context, params *PostAPIV1IndexerTestParams, body PostAPIV1IndexerTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerTestResponse, error) {
	rsp, err := c.PostAPIV1IndexerTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerTestResponse(rsp)
}

// PostAPIV1IndexerTestallWithResponse request returning *PostAPIV1IndexerTestallResponse
func (c *ClientWithResponses) PostAPIV1IndexerTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerTestallResponse, error) {
	rsp, err := c.PostAPIV1IndexerTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerTestallResponse(rsp)
}

// DeleteAPIV1IndexerIDWithResponse request returning *DeleteAPIV1IndexerIDResponse
func (c *ClientWithResponses) DeleteAPIV1IndexerIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerIDResponse, error) {
	rsp, err := c.DeleteAPIV1IndexerID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1IndexerIDResponse(rsp)
}

// GetAPIV1IndexerIDWithResponse request returning *GetAPIV1IndexerIDResponse
func (c *ClientWithResponses) GetAPIV1IndexerIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerIDResponse, error) {
	rsp, err := c.GetAPIV1IndexerID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerIDResponse(rsp)
}

// PutAPIV1IndexerIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1IndexerIDResponse
func (c *ClientWithResponses) PutAPIV1IndexerIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerIDResponse, error) {
	rsp, err := c.PutAPIV1IndexerIDWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1IndexerIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1IndexerIDWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerIDParams, body PutAPIV1IndexerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerIDResponse, error) {
	rsp, err := c.PutAPIV1IndexerID(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1IndexerIDResponse(rsp)
}

// GetAPIV1IndexerIDDownloadWithResponse request returning *GetAPIV1IndexerIDDownloadResponse
func (c *ClientWithResponses) GetAPIV1IndexerIDDownloadWithResponse(ctx context.Context, id int32, params *GetAPIV1IndexerIDDownloadParams, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerIDDownloadResponse, error) {
	rsp, err := c.GetAPIV1IndexerIDDownload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerIDDownloadResponse(rsp)
}

// GetAPIV1IndexerIDNewznabWithResponse request returning *GetAPIV1IndexerIDNewznabResponse
func (c *ClientWithResponses) GetAPIV1IndexerIDNewznabWithResponse(ctx context.Context, id int32, params *GetAPIV1IndexerIDNewznabParams, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerIDNewznabResponse, error) {
	rsp, err := c.GetAPIV1IndexerIDNewznab(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerIDNewznabResponse(rsp)
}

// GetAPIV1IndexerproxyWithResponse request returning *GetAPIV1IndexerproxyResponse
func (c *ClientWithResponses) GetAPIV1IndexerproxyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerproxyResponse, error) {
	rsp, err := c.GetAPIV1Indexerproxy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerproxyResponse(rsp)
}

// PostAPIV1IndexerproxyWithBodyWithResponse request with arbitrary body returning *PostAPIV1IndexerproxyResponse
func (c *ClientWithResponses) PostAPIV1IndexerproxyWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyResponse, error) {
	rsp, err := c.PostAPIV1IndexerproxyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerproxyResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1IndexerproxyWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyParams, body PostAPIV1IndexerproxyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyResponse, error) {
	rsp, err := c.PostAPIV1Indexerproxy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerproxyResponse(rsp)
}

// PostAPIV1IndexerproxyActionNameWithBodyWithResponse request with arbitrary body returning *PostAPIV1IndexerproxyActionNameResponse
func (c *ClientWithResponses) PostAPIV1IndexerproxyActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyActionNameResponse, error) {
	rsp, err := c.PostAPIV1IndexerproxyActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerproxyActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1IndexerproxyActionNameWithResponse(ctx context.Context, name string, body PostAPIV1IndexerproxyActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyActionNameResponse, error) {
	rsp, err := c.PostAPIV1IndexerproxyActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerproxyActionNameResponse(rsp)
}

// GetAPIV1IndexerproxySchemaWithResponse request returning *GetAPIV1IndexerproxySchemaResponse
func (c *ClientWithResponses) GetAPIV1IndexerproxySchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerproxySchemaResponse, error) {
	rsp, err := c.GetAPIV1IndexerproxySchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerproxySchemaResponse(rsp)
}

// PostAPIV1IndexerproxyTestWithBodyWithResponse request with arbitrary body returning *PostAPIV1IndexerproxyTestResponse
func (c *ClientWithResponses) PostAPIV1IndexerproxyTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyTestResponse, error) {
	rsp, err := c.PostAPIV1IndexerproxyTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerproxyTestResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1IndexerproxyTestWithResponse(ctx context.Context, params *PostAPIV1IndexerproxyTestParams, body PostAPIV1IndexerproxyTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyTestResponse, error) {
	rsp, err := c.PostAPIV1IndexerproxyTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerproxyTestResponse(rsp)
}

// PostAPIV1IndexerproxyTestallWithResponse request returning *PostAPIV1IndexerproxyTestallResponse
func (c *ClientWithResponses) PostAPIV1IndexerproxyTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1IndexerproxyTestallResponse, error) {
	rsp, err := c.PostAPIV1IndexerproxyTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1IndexerproxyTestallResponse(rsp)
}

// DeleteAPIV1IndexerproxyIDWithResponse request returning *DeleteAPIV1IndexerproxyIDResponse
func (c *ClientWithResponses) DeleteAPIV1IndexerproxyIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1IndexerproxyIDResponse, error) {
	rsp, err := c.DeleteAPIV1IndexerproxyID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1IndexerproxyIDResponse(rsp)
}

// GetAPIV1IndexerproxyIDWithResponse request returning *GetAPIV1IndexerproxyIDResponse
func (c *ClientWithResponses) GetAPIV1IndexerproxyIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerproxyIDResponse, error) {
	rsp, err := c.GetAPIV1IndexerproxyID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerproxyIDResponse(rsp)
}

// PutAPIV1IndexerproxyIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1IndexerproxyIDResponse
func (c *ClientWithResponses) PutAPIV1IndexerproxyIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerproxyIDResponse, error) {
	rsp, err := c.PutAPIV1IndexerproxyIDWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1IndexerproxyIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1IndexerproxyIDWithResponse(ctx context.Context, id string, params *PutAPIV1IndexerproxyIDParams, body PutAPIV1IndexerproxyIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1IndexerproxyIDResponse, error) {
	rsp, err := c.PutAPIV1IndexerproxyID(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1IndexerproxyIDResponse(rsp)
}

// GetAPIV1IndexerstatsWithResponse request returning *GetAPIV1IndexerstatsResponse
func (c *ClientWithResponses) GetAPIV1IndexerstatsWithResponse(ctx context.Context, params *GetAPIV1IndexerstatsParams, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerstatsResponse, error) {
	rsp, err := c.GetAPIV1Indexerstats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerstatsResponse(rsp)
}

// GetAPIV1IndexerstatusWithResponse request returning *GetAPIV1IndexerstatusResponse
func (c *ClientWithResponses) GetAPIV1IndexerstatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1IndexerstatusResponse, error) {
	rsp, err := c.GetAPIV1Indexerstatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1IndexerstatusResponse(rsp)
}

// GetAPIV1LocalizationWithResponse request returning *GetAPIV1LocalizationResponse
func (c *ClientWithResponses) GetAPIV1LocalizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LocalizationResponse, error) {
	rsp, err := c.GetAPIV1Localization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1LocalizationResponse(rsp)
}

// GetAPIV1LocalizationOptionsWithResponse request returning *GetAPIV1LocalizationOptionsResponse
func (c *ClientWithResponses) GetAPIV1LocalizationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LocalizationOptionsResponse, error) {
	rsp, err := c.GetAPIV1LocalizationOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1LocalizationOptionsResponse(rsp)
}

// GetAPIV1LogWithResponse request returning *GetAPIV1LogResponse
func (c *ClientWithResponses) GetAPIV1LogWithResponse(ctx context.Context, params *GetAPIV1LogParams, reqEditors ...RequestEditorFn) (*GetAPIV1LogResponse, error) {
	rsp, err := c.GetAPIV1Log(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1LogResponse(rsp)
}

// GetAPIV1LogFileWithResponse request returning *GetAPIV1LogFileResponse
func (c *ClientWithResponses) GetAPIV1LogFileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileResponse, error) {
	rsp, err := c.GetAPIV1LogFile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1LogFileResponse(rsp)
}

// GetAPIV1LogFileUpdateWithResponse request returning *GetAPIV1LogFileUpdateResponse
func (c *ClientWithResponses) GetAPIV1LogFileUpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileUpdateResponse, error) {
	rsp, err := c.GetAPIV1LogFileUpdate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1LogFileUpdateResponse(rsp)
}

// GetAPIV1LogFileUpdateFilenameWithResponse request returning *GetAPIV1LogFileUpdateFilenameResponse
func (c *ClientWithResponses) GetAPIV1LogFileUpdateFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileUpdateFilenameResponse, error) {
	rsp, err := c.GetAPIV1LogFileUpdateFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1LogFileUpdateFilenameResponse(rsp)
}

// GetAPIV1LogFileFilenameWithResponse request returning *GetAPIV1LogFileFilenameResponse
func (c *ClientWithResponses) GetAPIV1LogFileFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetAPIV1LogFileFilenameResponse, error) {
	rsp, err := c.GetAPIV1LogFileFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1LogFileFilenameResponse(rsp)
}

// GetAPIV1NotificationWithResponse request returning *GetAPIV1NotificationResponse
func (c *ClientWithResponses) GetAPIV1NotificationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1NotificationResponse, error) {
	rsp, err := c.GetAPIV1Notification(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1NotificationResponse(rsp)
}

// PostAPIV1NotificationWithBodyWithResponse request with arbitrary body returning *PostAPIV1NotificationResponse
func (c *ClientWithResponses) PostAPIV1NotificationWithBodyWithResponse(ctx context.Context, params *PostAPIV1NotificationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationResponse, error) {
	rsp, err := c.PostAPIV1NotificationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1NotificationResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1NotificationWithResponse(ctx context.Context, params *PostAPIV1NotificationParams, body PostAPIV1NotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationResponse, error) {
	rsp, err := c.PostAPIV1Notification(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1NotificationResponse(rsp)
}

// PostAPIV1NotificationActionNameWithBodyWithResponse request with arbitrary body returning *PostAPIV1NotificationActionNameResponse
func (c *ClientWithResponses) PostAPIV1NotificationActionNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationActionNameResponse, error) {
	rsp, err := c.PostAPIV1NotificationActionNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1NotificationActionNameResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1NotificationActionNameWithResponse(ctx context.Context, name string, body PostAPIV1NotificationActionNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationActionNameResponse, error) {
	rsp, err := c.PostAPIV1NotificationActionName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1NotificationActionNameResponse(rsp)
}

// GetAPIV1NotificationSchemaWithResponse request returning *GetAPIV1NotificationSchemaResponse
func (c *ClientWithResponses) GetAPIV1NotificationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1NotificationSchemaResponse, error) {
	rsp, err := c.GetAPIV1NotificationSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1NotificationSchemaResponse(rsp)
}

// PostAPIV1NotificationTestWithBodyWithResponse request with arbitrary body returning *PostAPIV1NotificationTestResponse
func (c *ClientWithResponses) PostAPIV1NotificationTestWithBodyWithResponse(ctx context.Context, params *PostAPIV1NotificationTestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationTestResponse, error) {
	rsp, err := c.PostAPIV1NotificationTestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1NotificationTestResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1NotificationTestWithResponse(ctx context.Context, params *PostAPIV1NotificationTestParams, body PostAPIV1NotificationTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationTestResponse, error) {
	rsp, err := c.PostAPIV1NotificationTest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1NotificationTestResponse(rsp)
}

// PostAPIV1NotificationTestallWithResponse request returning *PostAPIV1NotificationTestallResponse
func (c *ClientWithResponses) PostAPIV1NotificationTestallWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1NotificationTestallResponse, error) {
	rsp, err := c.PostAPIV1NotificationTestall(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1NotificationTestallResponse(rsp)
}

// DeleteAPIV1NotificationIDWithResponse request returning *DeleteAPIV1NotificationIDResponse
func (c *ClientWithResponses) DeleteAPIV1NotificationIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1NotificationIDResponse, error) {
	rsp, err := c.DeleteAPIV1NotificationID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1NotificationIDResponse(rsp)
}

// GetAPIV1NotificationIDWithResponse request returning *GetAPIV1NotificationIDResponse
func (c *ClientWithResponses) GetAPIV1NotificationIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1NotificationIDResponse, error) {
	rsp, err := c.GetAPIV1NotificationID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1NotificationIDResponse(rsp)
}

// PutAPIV1NotificationIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1NotificationIDResponse
func (c *ClientWithResponses) PutAPIV1NotificationIDWithBodyWithResponse(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1NotificationIDResponse, error) {
	rsp, err := c.PutAPIV1NotificationIDWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1NotificationIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1NotificationIDWithResponse(ctx context.Context, id string, params *PutAPIV1NotificationIDParams, body PutAPIV1NotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1NotificationIDResponse, error) {
	rsp, err := c.PutAPIV1NotificationID(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1NotificationIDResponse(rsp)
}

// GetAPIV1SearchWithResponse request returning *GetAPIV1SearchResponse
func (c *ClientWithResponses) GetAPIV1SearchWithResponse(ctx context.Context, params *GetAPIV1SearchParams, reqEditors ...RequestEditorFn) (*GetAPIV1SearchResponse, error) {
	rsp, err := c.GetAPIV1Search(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1SearchResponse(rsp)
}

// PostAPIV1SearchWithBodyWithResponse request with arbitrary body returning *PostAPIV1SearchResponse
func (c *ClientWithResponses) PostAPIV1SearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1SearchResponse, error) {
	rsp, err := c.PostAPIV1SearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SearchResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1SearchWithResponse(ctx context.Context, body PostAPIV1SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1SearchResponse, error) {
	rsp, err := c.PostAPIV1Search(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SearchResponse(rsp)
}

// PostAPIV1SearchBulkWithBodyWithResponse request with arbitrary body returning *PostAPIV1SearchBulkResponse
func (c *ClientWithResponses) PostAPIV1SearchBulkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1SearchBulkResponse, error) {
	rsp, err := c.PostAPIV1SearchBulkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SearchBulkResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1SearchBulkWithResponse(ctx context.Context, body PostAPIV1SearchBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1SearchBulkResponse, error) {
	rsp, err := c.PostAPIV1SearchBulk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SearchBulkResponse(rsp)
}

// GetAPIV1SystemBackupWithResponse request returning *GetAPIV1SystemBackupResponse
func (c *ClientWithResponses) GetAPIV1SystemBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemBackupResponse, error) {
	rsp, err := c.GetAPIV1SystemBackup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1SystemBackupResponse(rsp)
}

// PostAPIV1SystemBackupRestoreUploadWithResponse request returning *PostAPIV1SystemBackupRestoreUploadResponse
func (c *ClientWithResponses) PostAPIV1SystemBackupRestoreUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1SystemBackupRestoreUploadResponse, error) {
	rsp, err := c.PostAPIV1SystemBackupRestoreUpload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SystemBackupRestoreUploadResponse(rsp)
}

// PostAPIV1SystemBackupRestoreIDWithResponse request returning *PostAPIV1SystemBackupRestoreIDResponse
func (c *ClientWithResponses) PostAPIV1SystemBackupRestoreIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostAPIV1SystemBackupRestoreIDResponse, error) {
	rsp, err := c.PostAPIV1SystemBackupRestoreID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SystemBackupRestoreIDResponse(rsp)
}

// DeleteAPIV1SystemBackupIDWithResponse request returning *DeleteAPIV1SystemBackupIDResponse
func (c *ClientWithResponses) DeleteAPIV1SystemBackupIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1SystemBackupIDResponse, error) {
	rsp, err := c.DeleteAPIV1SystemBackupID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1SystemBackupIDResponse(rsp)
}

// PostAPIV1SystemRestartWithResponse request returning *PostAPIV1SystemRestartResponse
func (c *ClientWithResponses) PostAPIV1SystemRestartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1SystemRestartResponse, error) {
	rsp, err := c.PostAPIV1SystemRestart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SystemRestartResponse(rsp)
}

// GetAPIV1SystemRoutesWithResponse request returning *GetAPIV1SystemRoutesResponse
func (c *ClientWithResponses) GetAPIV1SystemRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemRoutesResponse, error) {
	rsp, err := c.GetAPIV1SystemRoutes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1SystemRoutesResponse(rsp)
}

// GetAPIV1SystemRoutesDuplicateWithResponse request returning *GetAPIV1SystemRoutesDuplicateResponse
func (c *ClientWithResponses) GetAPIV1SystemRoutesDuplicateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemRoutesDuplicateResponse, error) {
	rsp, err := c.GetAPIV1SystemRoutesDuplicate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1SystemRoutesDuplicateResponse(rsp)
}

// PostAPIV1SystemShutdownWithResponse request returning *PostAPIV1SystemShutdownResponse
func (c *ClientWithResponses) PostAPIV1SystemShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAPIV1SystemShutdownResponse, error) {
	rsp, err := c.PostAPIV1SystemShutdown(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1SystemShutdownResponse(rsp)
}

// GetAPIV1SystemStatusWithResponse request returning *GetAPIV1SystemStatusResponse
func (c *ClientWithResponses) GetAPIV1SystemStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemStatusResponse, error) {
	rsp, err := c.GetAPIV1SystemStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1SystemStatusResponse(rsp)
}

// GetAPIV1SystemTaskWithResponse request returning *GetAPIV1SystemTaskResponse
func (c *ClientWithResponses) GetAPIV1SystemTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1SystemTaskResponse, error) {
	rsp, err := c.GetAPIV1SystemTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1SystemTaskResponse(rsp)
}

// GetAPIV1SystemTaskIDWithResponse request returning *GetAPIV1SystemTaskIDResponse
func (c *ClientWithResponses) GetAPIV1SystemTaskIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1SystemTaskIDResponse, error) {
	rsp, err := c.GetAPIV1SystemTaskID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1SystemTaskIDResponse(rsp)
}

// GetAPIV1TagWithResponse request returning *GetAPIV1TagResponse
func (c *ClientWithResponses) GetAPIV1TagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1TagResponse, error) {
	rsp, err := c.GetAPIV1Tag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1TagResponse(rsp)
}

// PostAPIV1TagWithBodyWithResponse request with arbitrary body returning *PostAPIV1TagResponse
func (c *ClientWithResponses) PostAPIV1TagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAPIV1TagResponse, error) {
	rsp, err := c.PostAPIV1TagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1TagResponse(rsp)
}

func (c *ClientWithResponses) PostAPIV1TagWithResponse(ctx context.Context, body PostAPIV1TagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAPIV1TagResponse, error) {
	rsp, err := c.PostAPIV1Tag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAPIV1TagResponse(rsp)
}

// GetAPIV1TagDetailWithResponse request returning *GetAPIV1TagDetailResponse
func (c *ClientWithResponses) GetAPIV1TagDetailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1TagDetailResponse, error) {
	rsp, err := c.GetAPIV1TagDetail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1TagDetailResponse(rsp)
}

// GetAPIV1TagDetailIDWithResponse request returning *GetAPIV1TagDetailIDResponse
func (c *ClientWithResponses) GetAPIV1TagDetailIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1TagDetailIDResponse, error) {
	rsp, err := c.GetAPIV1TagDetailID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1TagDetailIDResponse(rsp)
}

// DeleteAPIV1TagIDWithResponse request returning *DeleteAPIV1TagIDResponse
func (c *ClientWithResponses) DeleteAPIV1TagIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteAPIV1TagIDResponse, error) {
	rsp, err := c.DeleteAPIV1TagID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAPIV1TagIDResponse(rsp)
}

// GetAPIV1TagIDWithResponse request returning *GetAPIV1TagIDResponse
func (c *ClientWithResponses) GetAPIV1TagIDWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetAPIV1TagIDResponse, error) {
	rsp, err := c.GetAPIV1TagID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1TagIDResponse(rsp)
}

// PutAPIV1TagIDWithBodyWithResponse request with arbitrary body returning *PutAPIV1TagIDResponse
func (c *ClientWithResponses) PutAPIV1TagIDWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAPIV1TagIDResponse, error) {
	rsp, err := c.PutAPIV1TagIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1TagIDResponse(rsp)
}

func (c *ClientWithResponses) PutAPIV1TagIDWithResponse(ctx context.Context, id string, body PutAPIV1TagIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAPIV1TagIDResponse, error) {
	rsp, err := c.PutAPIV1TagID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAPIV1TagIDResponse(rsp)
}

// GetAPIV1UpdateWithResponse request returning *GetAPIV1UpdateResponse
func (c *ClientWithResponses) GetAPIV1UpdateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIV1UpdateResponse, error) {
	rsp, err := c.GetAPIV1Update(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIV1UpdateResponse(rsp)
}

// GetContentPathWithResponse request returning *GetContentPathResponse
func (c *ClientWithResponses) GetContentPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetContentPathResponse, error) {
	rsp, err := c.GetContentPath(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentPathResponse(rsp)
}

// GetLoginWithResponse request returning *GetLoginResponse
func (c *ClientWithResponses) GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error) {
	rsp, err := c.GetLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoginResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, params *PostLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// GetLogoutWithResponse request returning *GetLogoutResponse
func (c *ClientWithResponses) GetLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLogoutResponse, error) {
	rsp, err := c.GetLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogoutResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// HeadPingWithResponse request returning *HeadPingResponse
func (c *ClientWithResponses) HeadPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HeadPingResponse, error) {
	rsp, err := c.HeadPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadPingResponse(rsp)
}

// GetIDAPIWithResponse request returning *GetIDAPIResponse
func (c *ClientWithResponses) GetIDAPIWithResponse(ctx context.Context, id int32, params *GetIDAPIParams, reqEditors ...RequestEditorFn) (*GetIDAPIResponse, error) {
	rsp, err := c.GetIDAPI(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIDAPIResponse(rsp)
}

// GetIDDownloadWithResponse request returning *GetIDDownloadResponse
func (c *ClientWithResponses) GetIDDownloadWithResponse(ctx context.Context, id int32, params *GetIDDownloadParams, reqEditors ...RequestEditorFn) (*GetIDDownloadResponse, error) {
	rsp, err := c.GetIDDownload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIDDownloadResponse(rsp)
}

// GetPathWithResponse request returning *GetPathResponse
func (c *ClientWithResponses) GetPathWithResponse(ctx context.Context, path string, reqEditors ...RequestEditorFn) (*GetPathResponse, error) {
	rsp, err := c.GetPath(ctx, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPathResponse(rsp)
}

// ParseGetAPIResponse parses an HTTP response from a GetAPIWithResponse call
func ParseGetAPIResponse(rsp *http.Response) (*GetAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIInfoResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ApplicationsResponse parses an HTTP response from a GetAPIV1ApplicationsWithResponse call
func ParseGetAPIV1ApplicationsResponse(rsp *http.Response) (*GetAPIV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1ApplicationsResponse parses an HTTP response from a PostAPIV1ApplicationsWithResponse call
func ParsePostAPIV1ApplicationsResponse(rsp *http.Response) (*PostAPIV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1ApplicationsActionNameResponse parses an HTTP response from a PostAPIV1ApplicationsActionNameWithResponse call
func ParsePostAPIV1ApplicationsActionNameResponse(rsp *http.Response) (*PostAPIV1ApplicationsActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1ApplicationsActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1ApplicationsBulkResponse parses an HTTP response from a DeleteAPIV1ApplicationsBulkWithResponse call
func ParseDeleteAPIV1ApplicationsBulkResponse(rsp *http.Response) (*DeleteAPIV1ApplicationsBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1ApplicationsBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAPIV1ApplicationsBulkResponse parses an HTTP response from a PutAPIV1ApplicationsBulkWithResponse call
func ParsePutAPIV1ApplicationsBulkResponse(rsp *http.Response) (*PutAPIV1ApplicationsBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1ApplicationsBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ApplicationsSchemaResponse parses an HTTP response from a GetAPIV1ApplicationsSchemaWithResponse call
func ParseGetAPIV1ApplicationsSchemaResponse(rsp *http.Response) (*GetAPIV1ApplicationsSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ApplicationsSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1ApplicationsTestResponse parses an HTTP response from a PostAPIV1ApplicationsTestWithResponse call
func ParsePostAPIV1ApplicationsTestResponse(rsp *http.Response) (*PostAPIV1ApplicationsTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1ApplicationsTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1ApplicationsTestallResponse parses an HTTP response from a PostAPIV1ApplicationsTestallWithResponse call
func ParsePostAPIV1ApplicationsTestallResponse(rsp *http.Response) (*PostAPIV1ApplicationsTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1ApplicationsTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1ApplicationsIDResponse parses an HTTP response from a DeleteAPIV1ApplicationsIDWithResponse call
func ParseDeleteAPIV1ApplicationsIDResponse(rsp *http.Response) (*DeleteAPIV1ApplicationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1ApplicationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1ApplicationsIDResponse parses an HTTP response from a GetAPIV1ApplicationsIDWithResponse call
func ParseGetAPIV1ApplicationsIDResponse(rsp *http.Response) (*GetAPIV1ApplicationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ApplicationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1ApplicationsIDResponse parses an HTTP response from a PutAPIV1ApplicationsIDWithResponse call
func ParsePutAPIV1ApplicationsIDResponse(rsp *http.Response) (*PutAPIV1ApplicationsIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1ApplicationsIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1AppprofileResponse parses an HTTP response from a GetAPIV1AppprofileWithResponse call
func ParseGetAPIV1AppprofileResponse(rsp *http.Response) (*GetAPIV1AppprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1AppprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1AppprofileResponse parses an HTTP response from a PostAPIV1AppprofileWithResponse call
func ParsePostAPIV1AppprofileResponse(rsp *http.Response) (*PostAPIV1AppprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1AppprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1AppprofileSchemaResponse parses an HTTP response from a GetAPIV1AppprofileSchemaWithResponse call
func ParseGetAPIV1AppprofileSchemaResponse(rsp *http.Response) (*GetAPIV1AppprofileSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1AppprofileSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAPIV1AppprofileIDResponse parses an HTTP response from a DeleteAPIV1AppprofileIDWithResponse call
func ParseDeleteAPIV1AppprofileIDResponse(rsp *http.Response) (*DeleteAPIV1AppprofileIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1AppprofileIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1AppprofileIDResponse parses an HTTP response from a GetAPIV1AppprofileIDWithResponse call
func ParseGetAPIV1AppprofileIDResponse(rsp *http.Response) (*GetAPIV1AppprofileIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1AppprofileIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutAPIV1AppprofileIDResponse parses an HTTP response from a PutAPIV1AppprofileIDWithResponse call
func ParsePutAPIV1AppprofileIDResponse(rsp *http.Response) (*PutAPIV1AppprofileIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1AppprofileIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1CommandResponse parses an HTTP response from a GetAPIV1CommandWithResponse call
func ParseGetAPIV1CommandResponse(rsp *http.Response) (*GetAPIV1CommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1CommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1CommandResponse parses an HTTP response from a PostAPIV1CommandWithResponse call
func ParsePostAPIV1CommandResponse(rsp *http.Response) (*PostAPIV1CommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1CommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAPIV1CommandIDResponse parses an HTTP response from a DeleteAPIV1CommandIDWithResponse call
func ParseDeleteAPIV1CommandIDResponse(rsp *http.Response) (*DeleteAPIV1CommandIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1CommandIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1CommandIDResponse parses an HTTP response from a GetAPIV1CommandIDWithResponse call
func ParseGetAPIV1CommandIDResponse(rsp *http.Response) (*GetAPIV1CommandIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1CommandIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigDevelopmentResponse parses an HTTP response from a GetAPIV1ConfigDevelopmentWithResponse call
func ParseGetAPIV1ConfigDevelopmentResponse(rsp *http.Response) (*GetAPIV1ConfigDevelopmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigDevelopmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigDevelopmentIDResponse parses an HTTP response from a GetAPIV1ConfigDevelopmentIDWithResponse call
func ParseGetAPIV1ConfigDevelopmentIDResponse(rsp *http.Response) (*GetAPIV1ConfigDevelopmentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigDevelopmentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1ConfigDevelopmentIDResponse parses an HTTP response from a PutAPIV1ConfigDevelopmentIDWithResponse call
func ParsePutAPIV1ConfigDevelopmentIDResponse(rsp *http.Response) (*PutAPIV1ConfigDevelopmentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1ConfigDevelopmentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigDownloadclientResponse parses an HTTP response from a GetAPIV1ConfigDownloadclientWithResponse call
func ParseGetAPIV1ConfigDownloadclientResponse(rsp *http.Response) (*GetAPIV1ConfigDownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigDownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigDownloadclientIDResponse parses an HTTP response from a GetAPIV1ConfigDownloadclientIDWithResponse call
func ParseGetAPIV1ConfigDownloadclientIDResponse(rsp *http.Response) (*GetAPIV1ConfigDownloadclientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigDownloadclientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1ConfigDownloadclientIDResponse parses an HTTP response from a PutAPIV1ConfigDownloadclientIDWithResponse call
func ParsePutAPIV1ConfigDownloadclientIDResponse(rsp *http.Response) (*PutAPIV1ConfigDownloadclientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1ConfigDownloadclientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigHostResponse parses an HTTP response from a GetAPIV1ConfigHostWithResponse call
func ParseGetAPIV1ConfigHostResponse(rsp *http.Response) (*GetAPIV1ConfigHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigHostIDResponse parses an HTTP response from a GetAPIV1ConfigHostIDWithResponse call
func ParseGetAPIV1ConfigHostIDResponse(rsp *http.Response) (*GetAPIV1ConfigHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1ConfigHostIDResponse parses an HTTP response from a PutAPIV1ConfigHostIDWithResponse call
func ParsePutAPIV1ConfigHostIDResponse(rsp *http.Response) (*PutAPIV1ConfigHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1ConfigHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigUIResponse parses an HTTP response from a GetAPIV1ConfigUIWithResponse call
func ParseGetAPIV1ConfigUIResponse(rsp *http.Response) (*GetAPIV1ConfigUIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigUIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UIConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1ConfigUIIDResponse parses an HTTP response from a GetAPIV1ConfigUIIDWithResponse call
func ParseGetAPIV1ConfigUIIDResponse(rsp *http.Response) (*GetAPIV1ConfigUIIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1ConfigUIIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UIConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1ConfigUIIDResponse parses an HTTP response from a PutAPIV1ConfigUIIDWithResponse call
func ParsePutAPIV1ConfigUIIDResponse(rsp *http.Response) (*PutAPIV1ConfigUIIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1ConfigUIIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UIConfigResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1CustomfilterResponse parses an HTTP response from a GetAPIV1CustomfilterWithResponse call
func ParseGetAPIV1CustomfilterResponse(rsp *http.Response) (*GetAPIV1CustomfilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1CustomfilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1CustomfilterResponse parses an HTTP response from a PostAPIV1CustomfilterWithResponse call
func ParsePostAPIV1CustomfilterResponse(rsp *http.Response) (*PostAPIV1CustomfilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1CustomfilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAPIV1CustomfilterIDResponse parses an HTTP response from a DeleteAPIV1CustomfilterIDWithResponse call
func ParseDeleteAPIV1CustomfilterIDResponse(rsp *http.Response) (*DeleteAPIV1CustomfilterIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1CustomfilterIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1CustomfilterIDResponse parses an HTTP response from a GetAPIV1CustomfilterIDWithResponse call
func ParseGetAPIV1CustomfilterIDResponse(rsp *http.Response) (*GetAPIV1CustomfilterIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1CustomfilterIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1CustomfilterIDResponse parses an HTTP response from a PutAPIV1CustomfilterIDWithResponse call
func ParsePutAPIV1CustomfilterIDResponse(rsp *http.Response) (*PutAPIV1CustomfilterIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1CustomfilterIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomFilterResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1DownloadclientResponse parses an HTTP response from a GetAPIV1DownloadclientWithResponse call
func ParseGetAPIV1DownloadclientResponse(rsp *http.Response) (*GetAPIV1DownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1DownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1DownloadclientResponse parses an HTTP response from a PostAPIV1DownloadclientWithResponse call
func ParsePostAPIV1DownloadclientResponse(rsp *http.Response) (*PostAPIV1DownloadclientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1DownloadclientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1DownloadclientActionNameResponse parses an HTTP response from a PostAPIV1DownloadclientActionNameWithResponse call
func ParsePostAPIV1DownloadclientActionNameResponse(rsp *http.Response) (*PostAPIV1DownloadclientActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1DownloadclientActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1DownloadclientBulkResponse parses an HTTP response from a DeleteAPIV1DownloadclientBulkWithResponse call
func ParseDeleteAPIV1DownloadclientBulkResponse(rsp *http.Response) (*DeleteAPIV1DownloadclientBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1DownloadclientBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAPIV1DownloadclientBulkResponse parses an HTTP response from a PutAPIV1DownloadclientBulkWithResponse call
func ParsePutAPIV1DownloadclientBulkResponse(rsp *http.Response) (*PutAPIV1DownloadclientBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1DownloadclientBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1DownloadclientSchemaResponse parses an HTTP response from a GetAPIV1DownloadclientSchemaWithResponse call
func ParseGetAPIV1DownloadclientSchemaResponse(rsp *http.Response) (*GetAPIV1DownloadclientSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1DownloadclientSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1DownloadclientTestResponse parses an HTTP response from a PostAPIV1DownloadclientTestWithResponse call
func ParsePostAPIV1DownloadclientTestResponse(rsp *http.Response) (*PostAPIV1DownloadclientTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1DownloadclientTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1DownloadclientTestallResponse parses an HTTP response from a PostAPIV1DownloadclientTestallWithResponse call
func ParsePostAPIV1DownloadclientTestallResponse(rsp *http.Response) (*PostAPIV1DownloadclientTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1DownloadclientTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1DownloadclientIDResponse parses an HTTP response from a DeleteAPIV1DownloadclientIDWithResponse call
func ParseDeleteAPIV1DownloadclientIDResponse(rsp *http.Response) (*DeleteAPIV1DownloadclientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1DownloadclientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1DownloadclientIDResponse parses an HTTP response from a GetAPIV1DownloadclientIDWithResponse call
func ParseGetAPIV1DownloadclientIDResponse(rsp *http.Response) (*GetAPIV1DownloadclientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1DownloadclientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1DownloadclientIDResponse parses an HTTP response from a PutAPIV1DownloadclientIDWithResponse call
func ParsePutAPIV1DownloadclientIDResponse(rsp *http.Response) (*PutAPIV1DownloadclientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1DownloadclientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DownloadClientResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1FilesystemResponse parses an HTTP response from a GetAPIV1FilesystemWithResponse call
func ParseGetAPIV1FilesystemResponse(rsp *http.Response) (*GetAPIV1FilesystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1FilesystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1FilesystemTypeResponse parses an HTTP response from a GetAPIV1FilesystemTypeWithResponse call
func ParseGetAPIV1FilesystemTypeResponse(rsp *http.Response) (*GetAPIV1FilesystemTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1FilesystemTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1HealthResponse parses an HTTP response from a GetAPIV1HealthWithResponse call
func ParseGetAPIV1HealthResponse(rsp *http.Response) (*GetAPIV1HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HealthResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1HistoryResponse parses an HTTP response from a GetAPIV1HistoryWithResponse call
func ParseGetAPIV1HistoryResponse(rsp *http.Response) (*GetAPIV1HistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1HistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistoryResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1HistoryIndexerResponse parses an HTTP response from a GetAPIV1HistoryIndexerWithResponse call
func ParseGetAPIV1HistoryIndexerResponse(rsp *http.Response) (*GetAPIV1HistoryIndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1HistoryIndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HistoryResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1HistorySinceResponse parses an HTTP response from a GetAPIV1HistorySinceWithResponse call
func ParseGetAPIV1HistorySinceResponse(rsp *http.Response) (*GetAPIV1HistorySinceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1HistorySinceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HistoryResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1IndexerResponse parses an HTTP response from a GetAPIV1IndexerWithResponse call
func ParseGetAPIV1IndexerResponse(rsp *http.Response) (*GetAPIV1IndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1IndexerResponse parses an HTTP response from a PostAPIV1IndexerWithResponse call
func ParsePostAPIV1IndexerResponse(rsp *http.Response) (*PostAPIV1IndexerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1IndexerActionNameResponse parses an HTTP response from a PostAPIV1IndexerActionNameWithResponse call
func ParsePostAPIV1IndexerActionNameResponse(rsp *http.Response) (*PostAPIV1IndexerActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1IndexerBulkResponse parses an HTTP response from a DeleteAPIV1IndexerBulkWithResponse call
func ParseDeleteAPIV1IndexerBulkResponse(rsp *http.Response) (*DeleteAPIV1IndexerBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1IndexerBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAPIV1IndexerBulkResponse parses an HTTP response from a PutAPIV1IndexerBulkWithResponse call
func ParsePutAPIV1IndexerBulkResponse(rsp *http.Response) (*PutAPIV1IndexerBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1IndexerBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1IndexerCategoriesResponse parses an HTTP response from a GetAPIV1IndexerCategoriesWithResponse call
func ParseGetAPIV1IndexerCategoriesResponse(rsp *http.Response) (*GetAPIV1IndexerCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1IndexerSchemaResponse parses an HTTP response from a GetAPIV1IndexerSchemaWithResponse call
func ParseGetAPIV1IndexerSchemaResponse(rsp *http.Response) (*GetAPIV1IndexerSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1IndexerTestResponse parses an HTTP response from a PostAPIV1IndexerTestWithResponse call
func ParsePostAPIV1IndexerTestResponse(rsp *http.Response) (*PostAPIV1IndexerTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1IndexerTestallResponse parses an HTTP response from a PostAPIV1IndexerTestallWithResponse call
func ParsePostAPIV1IndexerTestallResponse(rsp *http.Response) (*PostAPIV1IndexerTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1IndexerIDResponse parses an HTTP response from a DeleteAPIV1IndexerIDWithResponse call
func ParseDeleteAPIV1IndexerIDResponse(rsp *http.Response) (*DeleteAPIV1IndexerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1IndexerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1IndexerIDResponse parses an HTTP response from a GetAPIV1IndexerIDWithResponse call
func ParseGetAPIV1IndexerIDResponse(rsp *http.Response) (*GetAPIV1IndexerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1IndexerIDResponse parses an HTTP response from a PutAPIV1IndexerIDWithResponse call
func ParsePutAPIV1IndexerIDResponse(rsp *http.Response) (*PutAPIV1IndexerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1IndexerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1IndexerIDDownloadResponse parses an HTTP response from a GetAPIV1IndexerIDDownloadWithResponse call
func ParseGetAPIV1IndexerIDDownloadResponse(rsp *http.Response) (*GetAPIV1IndexerIDDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerIDDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1IndexerIDNewznabResponse parses an HTTP response from a GetAPIV1IndexerIDNewznabWithResponse call
func ParseGetAPIV1IndexerIDNewznabResponse(rsp *http.Response) (*GetAPIV1IndexerIDNewznabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerIDNewznabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1IndexerproxyResponse parses an HTTP response from a GetAPIV1IndexerproxyWithResponse call
func ParseGetAPIV1IndexerproxyResponse(rsp *http.Response) (*GetAPIV1IndexerproxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerproxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1IndexerproxyResponse parses an HTTP response from a PostAPIV1IndexerproxyWithResponse call
func ParsePostAPIV1IndexerproxyResponse(rsp *http.Response) (*PostAPIV1IndexerproxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerproxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1IndexerproxyActionNameResponse parses an HTTP response from a PostAPIV1IndexerproxyActionNameWithResponse call
func ParsePostAPIV1IndexerproxyActionNameResponse(rsp *http.Response) (*PostAPIV1IndexerproxyActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerproxyActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1IndexerproxySchemaResponse parses an HTTP response from a GetAPIV1IndexerproxySchemaWithResponse call
func ParseGetAPIV1IndexerproxySchemaResponse(rsp *http.Response) (*GetAPIV1IndexerproxySchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerproxySchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1IndexerproxyTestResponse parses an HTTP response from a PostAPIV1IndexerproxyTestWithResponse call
func ParsePostAPIV1IndexerproxyTestResponse(rsp *http.Response) (*PostAPIV1IndexerproxyTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerproxyTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1IndexerproxyTestallResponse parses an HTTP response from a PostAPIV1IndexerproxyTestallWithResponse call
func ParsePostAPIV1IndexerproxyTestallResponse(rsp *http.Response) (*PostAPIV1IndexerproxyTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1IndexerproxyTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1IndexerproxyIDResponse parses an HTTP response from a DeleteAPIV1IndexerproxyIDWithResponse call
func ParseDeleteAPIV1IndexerproxyIDResponse(rsp *http.Response) (*DeleteAPIV1IndexerproxyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1IndexerproxyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1IndexerproxyIDResponse parses an HTTP response from a GetAPIV1IndexerproxyIDWithResponse call
func ParseGetAPIV1IndexerproxyIDResponse(rsp *http.Response) (*GetAPIV1IndexerproxyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerproxyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1IndexerproxyIDResponse parses an HTTP response from a PutAPIV1IndexerproxyIDWithResponse call
func ParsePutAPIV1IndexerproxyIDResponse(rsp *http.Response) (*PutAPIV1IndexerproxyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1IndexerproxyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerProxyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1IndexerstatsResponse parses an HTTP response from a GetAPIV1IndexerstatsWithResponse call
func ParseGetAPIV1IndexerstatsResponse(rsp *http.Response) (*GetAPIV1IndexerstatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerstatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndexerStatsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1IndexerstatusResponse parses an HTTP response from a GetAPIV1IndexerstatusWithResponse call
func ParseGetAPIV1IndexerstatusResponse(rsp *http.Response) (*GetAPIV1IndexerstatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1IndexerstatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IndexerStatusResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1LocalizationResponse parses an HTTP response from a GetAPIV1LocalizationWithResponse call
func ParseGetAPIV1LocalizationResponse(rsp *http.Response) (*GetAPIV1LocalizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1LocalizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1LocalizationOptionsResponse parses an HTTP response from a GetAPIV1LocalizationOptionsWithResponse call
func ParseGetAPIV1LocalizationOptionsResponse(rsp *http.Response) (*GetAPIV1LocalizationOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1LocalizationOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LocalizationOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1LogResponse parses an HTTP response from a GetAPIV1LogWithResponse call
func ParseGetAPIV1LogResponse(rsp *http.Response) (*GetAPIV1LogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1LogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogResourcePagingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1LogFileResponse parses an HTTP response from a GetAPIV1LogFileWithResponse call
func ParseGetAPIV1LogFileResponse(rsp *http.Response) (*GetAPIV1LogFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1LogFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1LogFileUpdateResponse parses an HTTP response from a GetAPIV1LogFileUpdateWithResponse call
func ParseGetAPIV1LogFileUpdateResponse(rsp *http.Response) (*GetAPIV1LogFileUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1LogFileUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LogFileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1LogFileUpdateFilenameResponse parses an HTTP response from a GetAPIV1LogFileUpdateFilenameWithResponse call
func ParseGetAPIV1LogFileUpdateFilenameResponse(rsp *http.Response) (*GetAPIV1LogFileUpdateFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1LogFileUpdateFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1LogFileFilenameResponse parses an HTTP response from a GetAPIV1LogFileFilenameWithResponse call
func ParseGetAPIV1LogFileFilenameResponse(rsp *http.Response) (*GetAPIV1LogFileFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1LogFileFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1NotificationResponse parses an HTTP response from a GetAPIV1NotificationWithResponse call
func ParseGetAPIV1NotificationResponse(rsp *http.Response) (*GetAPIV1NotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1NotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1NotificationResponse parses an HTTP response from a PostAPIV1NotificationWithResponse call
func ParsePostAPIV1NotificationResponse(rsp *http.Response) (*PostAPIV1NotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1NotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1NotificationActionNameResponse parses an HTTP response from a PostAPIV1NotificationActionNameWithResponse call
func ParsePostAPIV1NotificationActionNameResponse(rsp *http.Response) (*PostAPIV1NotificationActionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1NotificationActionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1NotificationSchemaResponse parses an HTTP response from a GetAPIV1NotificationSchemaWithResponse call
func ParseGetAPIV1NotificationSchemaResponse(rsp *http.Response) (*GetAPIV1NotificationSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1NotificationSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1NotificationTestResponse parses an HTTP response from a PostAPIV1NotificationTestWithResponse call
func ParsePostAPIV1NotificationTestResponse(rsp *http.Response) (*PostAPIV1NotificationTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1NotificationTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1NotificationTestallResponse parses an HTTP response from a PostAPIV1NotificationTestallWithResponse call
func ParsePostAPIV1NotificationTestallResponse(rsp *http.Response) (*PostAPIV1NotificationTestallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1NotificationTestallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1NotificationIDResponse parses an HTTP response from a DeleteAPIV1NotificationIDWithResponse call
func ParseDeleteAPIV1NotificationIDResponse(rsp *http.Response) (*DeleteAPIV1NotificationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1NotificationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1NotificationIDResponse parses an HTTP response from a GetAPIV1NotificationIDWithResponse call
func ParseGetAPIV1NotificationIDResponse(rsp *http.Response) (*GetAPIV1NotificationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1NotificationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1NotificationIDResponse parses an HTTP response from a PutAPIV1NotificationIDWithResponse call
func ParsePutAPIV1NotificationIDResponse(rsp *http.Response) (*PutAPIV1NotificationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1NotificationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1SearchResponse parses an HTTP response from a GetAPIV1SearchWithResponse call
func ParseGetAPIV1SearchResponse(rsp *http.Response) (*GetAPIV1SearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1SearchResponse parses an HTTP response from a PostAPIV1SearchWithResponse call
func ParsePostAPIV1SearchResponse(rsp *http.Response) (*PostAPIV1SearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1SearchBulkResponse parses an HTTP response from a PostAPIV1SearchBulkWithResponse call
func ParsePostAPIV1SearchBulkResponse(rsp *http.Response) (*PostAPIV1SearchBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1SearchBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleaseResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1SystemBackupResponse parses an HTTP response from a GetAPIV1SystemBackupWithResponse call
func ParseGetAPIV1SystemBackupResponse(rsp *http.Response) (*GetAPIV1SystemBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1SystemBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BackupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1SystemBackupRestoreUploadResponse parses an HTTP response from a PostAPIV1SystemBackupRestoreUploadWithResponse call
func ParsePostAPIV1SystemBackupRestoreUploadResponse(rsp *http.Response) (*PostAPIV1SystemBackupRestoreUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1SystemBackupRestoreUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1SystemBackupRestoreIDResponse parses an HTTP response from a PostAPIV1SystemBackupRestoreIDWithResponse call
func ParsePostAPIV1SystemBackupRestoreIDResponse(rsp *http.Response) (*PostAPIV1SystemBackupRestoreIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1SystemBackupRestoreIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAPIV1SystemBackupIDResponse parses an HTTP response from a DeleteAPIV1SystemBackupIDWithResponse call
func ParseDeleteAPIV1SystemBackupIDResponse(rsp *http.Response) (*DeleteAPIV1SystemBackupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1SystemBackupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1SystemRestartResponse parses an HTTP response from a PostAPIV1SystemRestartWithResponse call
func ParsePostAPIV1SystemRestartResponse(rsp *http.Response) (*PostAPIV1SystemRestartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1SystemRestartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1SystemRoutesResponse parses an HTTP response from a GetAPIV1SystemRoutesWithResponse call
func ParseGetAPIV1SystemRoutesResponse(rsp *http.Response) (*GetAPIV1SystemRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1SystemRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1SystemRoutesDuplicateResponse parses an HTTP response from a GetAPIV1SystemRoutesDuplicateWithResponse call
func ParseGetAPIV1SystemRoutesDuplicateResponse(rsp *http.Response) (*GetAPIV1SystemRoutesDuplicateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1SystemRoutesDuplicateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAPIV1SystemShutdownResponse parses an HTTP response from a PostAPIV1SystemShutdownWithResponse call
func ParsePostAPIV1SystemShutdownResponse(rsp *http.Response) (*PostAPIV1SystemShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1SystemShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1SystemStatusResponse parses an HTTP response from a GetAPIV1SystemStatusWithResponse call
func ParseGetAPIV1SystemStatusResponse(rsp *http.Response) (*GetAPIV1SystemStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1SystemStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1SystemTaskResponse parses an HTTP response from a GetAPIV1SystemTaskWithResponse call
func ParseGetAPIV1SystemTaskResponse(rsp *http.Response) (*GetAPIV1SystemTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1SystemTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaskResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1SystemTaskIDResponse parses an HTTP response from a GetAPIV1SystemTaskIDWithResponse call
func ParseGetAPIV1SystemTaskIDResponse(rsp *http.Response) (*GetAPIV1SystemTaskIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1SystemTaskIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1TagResponse parses an HTTP response from a GetAPIV1TagWithResponse call
func ParseGetAPIV1TagResponse(rsp *http.Response) (*GetAPIV1TagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1TagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAPIV1TagResponse parses an HTTP response from a PostAPIV1TagWithResponse call
func ParsePostAPIV1TagResponse(rsp *http.Response) (*PostAPIV1TagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAPIV1TagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1TagDetailResponse parses an HTTP response from a GetAPIV1TagDetailWithResponse call
func ParseGetAPIV1TagDetailResponse(rsp *http.Response) (*GetAPIV1TagDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1TagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagDetailsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1TagDetailIDResponse parses an HTTP response from a GetAPIV1TagDetailIDWithResponse call
func ParseGetAPIV1TagDetailIDResponse(rsp *http.Response) (*GetAPIV1TagDetailIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1TagDetailIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagDetailsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAPIV1TagIDResponse parses an HTTP response from a DeleteAPIV1TagIDWithResponse call
func ParseDeleteAPIV1TagIDResponse(rsp *http.Response) (*DeleteAPIV1TagIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAPIV1TagIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAPIV1TagIDResponse parses an HTTP response from a GetAPIV1TagIDWithResponse call
func ParseGetAPIV1TagIDResponse(rsp *http.Response) (*GetAPIV1TagIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1TagIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAPIV1TagIDResponse parses an HTTP response from a PutAPIV1TagIDWithResponse call
func ParsePutAPIV1TagIDResponse(rsp *http.Response) (*PutAPIV1TagIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAPIV1TagIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAPIV1UpdateResponse parses an HTTP response from a GetAPIV1UpdateWithResponse call
func ParseGetAPIV1UpdateResponse(rsp *http.Response) (*GetAPIV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UpdateResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContentPathResponse parses an HTTP response from a GetContentPathWithResponse call
func ParseGetContentPathResponse(rsp *http.Response) (*GetContentPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoginResponse parses an HTTP response from a GetLoginWithResponse call
func ParseGetLoginResponse(rsp *http.Response) (*GetLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLogoutResponse parses an HTTP response from a GetLogoutWithResponse call
func ParseGetLogoutResponse(rsp *http.Response) (*GetLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadPingResponse parses an HTTP response from a HeadPingWithResponse call
func ParseHeadPingResponse(rsp *http.Response) (*HeadPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIDAPIResponse parses an HTTP response from a GetIDAPIWithResponse call
func ParseGetIDAPIResponse(rsp *http.Response) (*GetIDAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIDAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIDDownloadResponse parses an HTTP response from a GetIDDownloadWithResponse call
func ParseGetIDDownloadResponse(rsp *http.Response) (*GetIDDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIDDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPathResponse parses an HTTP response from a GetPathWithResponse call
func ParseGetPathResponse(rsp *http.Response) (*GetPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
