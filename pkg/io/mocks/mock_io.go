// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kasuboski/mediaz/pkg/io (interfaces: FileIO)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_io.go github.com/kasuboski/mediaz/pkg/io FileIO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	fs "io/fs"
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileIO is a mock of FileIO interface.
type MockFileIO struct {
	ctrl     *gomock.Controller
	recorder *MockFileIOMockRecorder
}

// MockFileIOMockRecorder is the mock recorder for MockFileIO.
type MockFileIOMockRecorder struct {
	mock *MockFileIO
}

// NewMockFileIO creates a new mock instance.
func NewMockFileIO(ctrl *gomock.Controller) *MockFileIO {
	mock := &MockFileIO{ctrl: ctrl}
	mock.recorder = &MockFileIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileIO) EXPECT() *MockFileIOMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockFileIO) Copy(arg0, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockFileIOMockRecorder) Copy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockFileIO)(nil).Copy), arg0, arg1)
}

// Create mocks base method.
func (m *MockFileIO) Create(arg0 string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileIOMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileIO)(nil).Create), arg0)
}

// IsSameFileSystem mocks base method.
func (m *MockFileIO) IsSameFileSystem(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSameFileSystem", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSameFileSystem indicates an expected call of IsSameFileSystem.
func (mr *MockFileIOMockRecorder) IsSameFileSystem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSameFileSystem", reflect.TypeOf((*MockFileIO)(nil).IsSameFileSystem), arg0, arg1)
}

// Open mocks base method.
func (m *MockFileIO) Open(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileIOMockRecorder) Open(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileIO)(nil).Open), arg0)
}

// Rename mocks base method.
func (m *MockFileIO) Rename(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockFileIOMockRecorder) Rename(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFileIO)(nil).Rename), arg0, arg1)
}

// Stat mocks base method.
func (m *MockFileIO) Stat(arg0 string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileIOMockRecorder) Stat(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFileIO)(nil).Stat), arg0)
}

// WalkDir mocks base method.
func (m *MockFileIO) WalkDir(arg0 fs.FS, arg1 string, arg2 fs.WalkDirFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkDir indicates an expected call of WalkDir.
func (mr *MockFileIOMockRecorder) WalkDir(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDir", reflect.TypeOf((*MockFileIO)(nil).WalkDir), arg0, arg1, arg2)
}
