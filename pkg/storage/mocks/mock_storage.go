// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_storage.go -source=storage.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlite "github.com/go-jet/jet/v2/sqlite"
	storage "github.com/kasuboski/mediaz/pkg/storage"
	model "github.com/kasuboski/mediaz/pkg/storage/sqlite/schema/gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateDownloadClient mocks base method.
func (m *MockStorage) CreateDownloadClient(ctx context.Context, client model.DownloadClient) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDownloadClient", ctx, client)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDownloadClient indicates an expected call of CreateDownloadClient.
func (mr *MockStorageMockRecorder) CreateDownloadClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDownloadClient", reflect.TypeOf((*MockStorage)(nil).CreateDownloadClient), ctx, client)
}

// CreateIndexer mocks base method.
func (m *MockStorage) CreateIndexer(ctx context.Context, indexer model.Indexer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexer", ctx, indexer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndexer indicates an expected call of CreateIndexer.
func (mr *MockStorageMockRecorder) CreateIndexer(ctx, indexer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexer", reflect.TypeOf((*MockStorage)(nil).CreateIndexer), ctx, indexer)
}

// CreateMovie mocks base method.
func (m *MockStorage) CreateMovie(ctx context.Context, movie model.Movie) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, movie)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockStorageMockRecorder) CreateMovie(ctx, movie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockStorage)(nil).CreateMovie), ctx, movie)
}

// CreateMovieFile mocks base method.
func (m *MockStorage) CreateMovieFile(ctx context.Context, movieFile model.MovieFile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieFile", ctx, movieFile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieFile indicates an expected call of CreateMovieFile.
func (mr *MockStorageMockRecorder) CreateMovieFile(ctx, movieFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieFile", reflect.TypeOf((*MockStorage)(nil).CreateMovieFile), ctx, movieFile)
}

// CreateMovieMetadata mocks base method.
func (m *MockStorage) CreateMovieMetadata(ctx context.Context, movieMeta model.MovieMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieMetadata", ctx, movieMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieMetadata indicates an expected call of CreateMovieMetadata.
func (mr *MockStorageMockRecorder) CreateMovieMetadata(ctx, movieMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieMetadata", reflect.TypeOf((*MockStorage)(nil).CreateMovieMetadata), ctx, movieMeta)
}

// CreateQualityDefinition mocks base method.
func (m *MockStorage) CreateQualityDefinition(ctx context.Context, definition model.QualityDefinition) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityDefinition", ctx, definition)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityDefinition indicates an expected call of CreateQualityDefinition.
func (mr *MockStorageMockRecorder) CreateQualityDefinition(ctx, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityDefinition", reflect.TypeOf((*MockStorage)(nil).CreateQualityDefinition), ctx, definition)
}

// CreateQualityProfile mocks base method.
func (m *MockStorage) CreateQualityProfile(ctx context.Context, profile model.QualityProfile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfile", ctx, profile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfile indicates an expected call of CreateQualityProfile.
func (mr *MockStorageMockRecorder) CreateQualityProfile(ctx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfile", reflect.TypeOf((*MockStorage)(nil).CreateQualityProfile), ctx, profile)
}

// CreateQualityProfileItem mocks base method.
func (m *MockStorage) CreateQualityProfileItem(ctx context.Context, item model.QualityProfileItem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfileItem", ctx, item)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfileItem indicates an expected call of CreateQualityProfileItem.
func (mr *MockStorageMockRecorder) CreateQualityProfileItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfileItem", reflect.TypeOf((*MockStorage)(nil).CreateQualityProfileItem), ctx, item)
}

// DeleteDownloadClient mocks base method.
func (m *MockStorage) DeleteDownloadClient(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDownloadClient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDownloadClient indicates an expected call of DeleteDownloadClient.
func (mr *MockStorageMockRecorder) DeleteDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDownloadClient", reflect.TypeOf((*MockStorage)(nil).DeleteDownloadClient), ctx, id)
}

// DeleteIndexer mocks base method.
func (m *MockStorage) DeleteIndexer(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndexer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndexer indicates an expected call of DeleteIndexer.
func (mr *MockStorageMockRecorder) DeleteIndexer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexer", reflect.TypeOf((*MockStorage)(nil).DeleteIndexer), ctx, id)
}

// DeleteMovie mocks base method.
func (m *MockStorage) DeleteMovie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockStorageMockRecorder) DeleteMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockStorage)(nil).DeleteMovie), ctx, id)
}

// DeleteMovieFile mocks base method.
func (m *MockStorage) DeleteMovieFile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieFile indicates an expected call of DeleteMovieFile.
func (mr *MockStorageMockRecorder) DeleteMovieFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFile", reflect.TypeOf((*MockStorage)(nil).DeleteMovieFile), ctx, id)
}

// DeleteMovieMetadata mocks base method.
func (m *MockStorage) DeleteMovieMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieMetadata indicates an expected call of DeleteMovieMetadata.
func (mr *MockStorageMockRecorder) DeleteMovieMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieMetadata", reflect.TypeOf((*MockStorage)(nil).DeleteMovieMetadata), ctx, id)
}

// DeleteQualityDefinition mocks base method.
func (m *MockStorage) DeleteQualityDefinition(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityDefinition", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityDefinition indicates an expected call of DeleteQualityDefinition.
func (mr *MockStorageMockRecorder) DeleteQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityDefinition", reflect.TypeOf((*MockStorage)(nil).DeleteQualityDefinition), ctx, id)
}

// DeleteQualityProfile mocks base method.
func (m *MockStorage) DeleteQualityProfile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfile indicates an expected call of DeleteQualityProfile.
func (mr *MockStorageMockRecorder) DeleteQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfile", reflect.TypeOf((*MockStorage)(nil).DeleteQualityProfile), ctx, id)
}

// DeleteQualityProfileItem mocks base method.
func (m *MockStorage) DeleteQualityProfileItem(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfileItem indicates an expected call of DeleteQualityProfileItem.
func (mr *MockStorageMockRecorder) DeleteQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfileItem", reflect.TypeOf((*MockStorage)(nil).DeleteQualityProfileItem), ctx, id)
}

// GetDownloadClient mocks base method.
func (m *MockStorage) GetDownloadClient(ctx context.Context, id int64) (model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadClient", ctx, id)
	ret0, _ := ret[0].(model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadClient indicates an expected call of GetDownloadClient.
func (mr *MockStorageMockRecorder) GetDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadClient", reflect.TypeOf((*MockStorage)(nil).GetDownloadClient), ctx, id)
}

// GetMovieByMetadataID mocks base method.
func (m *MockStorage) GetMovieByMetadataID(ctx context.Context, metadataID int) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByMetadataID", ctx, metadataID)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByMetadataID indicates an expected call of GetMovieByMetadataID.
func (mr *MockStorageMockRecorder) GetMovieByMetadataID(ctx, metadataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByMetadataID", reflect.TypeOf((*MockStorage)(nil).GetMovieByMetadataID), ctx, metadataID)
}

// GetMovieMetadata mocks base method.
func (m *MockStorage) GetMovieMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieMetadata", ctx, where)
	ret0, _ := ret[0].(*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieMetadata indicates an expected call of GetMovieMetadata.
func (mr *MockStorageMockRecorder) GetMovieMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieMetadata", reflect.TypeOf((*MockStorage)(nil).GetMovieMetadata), ctx, where)
}

// GetQualityDefinition mocks base method.
func (m *MockStorage) GetQualityDefinition(ctx context.Context, id int64) (model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityDefinition", ctx, id)
	ret0, _ := ret[0].(model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityDefinition indicates an expected call of GetQualityDefinition.
func (mr *MockStorageMockRecorder) GetQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityDefinition", reflect.TypeOf((*MockStorage)(nil).GetQualityDefinition), ctx, id)
}

// GetQualityProfile mocks base method.
func (m *MockStorage) GetQualityProfile(ctx context.Context, id int64) (storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfile", ctx, id)
	ret0, _ := ret[0].(storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfile indicates an expected call of GetQualityProfile.
func (mr *MockStorageMockRecorder) GetQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfile", reflect.TypeOf((*MockStorage)(nil).GetQualityProfile), ctx, id)
}

// GetQualityProfileItem mocks base method.
func (m *MockStorage) GetQualityProfileItem(ctx context.Context, id int64) (model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfileItem indicates an expected call of GetQualityProfileItem.
func (mr *MockStorageMockRecorder) GetQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfileItem", reflect.TypeOf((*MockStorage)(nil).GetQualityProfileItem), ctx, id)
}

// Init mocks base method.
func (m *MockStorage) Init(ctx context.Context, schemas ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range schemas {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStorageMockRecorder) Init(ctx any, schemas ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, schemas...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStorage)(nil).Init), varargs...)
}

// ListDownloadClients mocks base method.
func (m *MockStorage) ListDownloadClients(ctx context.Context) ([]*model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownloadClients", ctx)
	ret0, _ := ret[0].([]*model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDownloadClients indicates an expected call of ListDownloadClients.
func (mr *MockStorageMockRecorder) ListDownloadClients(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownloadClients", reflect.TypeOf((*MockStorage)(nil).ListDownloadClients), ctx)
}

// ListIndexers mocks base method.
func (m *MockStorage) ListIndexers(ctx context.Context) ([]*model.Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexers", ctx)
	ret0, _ := ret[0].([]*model.Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexers indicates an expected call of ListIndexers.
func (mr *MockStorageMockRecorder) ListIndexers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexers", reflect.TypeOf((*MockStorage)(nil).ListIndexers), ctx)
}

// ListMovieFiles mocks base method.
func (m *MockStorage) ListMovieFiles(ctx context.Context) ([]*model.MovieFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieFiles", ctx)
	ret0, _ := ret[0].([]*model.MovieFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieFiles indicates an expected call of ListMovieFiles.
func (mr *MockStorageMockRecorder) ListMovieFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieFiles", reflect.TypeOf((*MockStorage)(nil).ListMovieFiles), ctx)
}

// ListMovieMetadata mocks base method.
func (m *MockStorage) ListMovieMetadata(ctx context.Context) ([]*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieMetadata", ctx)
	ret0, _ := ret[0].([]*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieMetadata indicates an expected call of ListMovieMetadata.
func (mr *MockStorageMockRecorder) ListMovieMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieMetadata", reflect.TypeOf((*MockStorage)(nil).ListMovieMetadata), ctx)
}

// ListMovies mocks base method.
func (m *MockStorage) ListMovies(ctx context.Context) ([]*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", ctx)
	ret0, _ := ret[0].([]*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockStorageMockRecorder) ListMovies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockStorage)(nil).ListMovies), ctx)
}

// ListQualityDefinitions mocks base method.
func (m *MockStorage) ListQualityDefinitions(ctx context.Context) ([]*model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityDefinitions", ctx)
	ret0, _ := ret[0].([]*model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityDefinitions indicates an expected call of ListQualityDefinitions.
func (mr *MockStorageMockRecorder) ListQualityDefinitions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityDefinitions", reflect.TypeOf((*MockStorage)(nil).ListQualityDefinitions), ctx)
}

// ListQualityProfileItems mocks base method.
func (m *MockStorage) ListQualityProfileItems(ctx context.Context) ([]*model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfileItems", ctx)
	ret0, _ := ret[0].([]*model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfileItems indicates an expected call of ListQualityProfileItems.
func (mr *MockStorageMockRecorder) ListQualityProfileItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfileItems", reflect.TypeOf((*MockStorage)(nil).ListQualityProfileItems), ctx)
}

// ListQualityProfiles mocks base method.
func (m *MockStorage) ListQualityProfiles(ctx context.Context) ([]*storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfiles", ctx)
	ret0, _ := ret[0].([]*storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfiles indicates an expected call of ListQualityProfiles.
func (mr *MockStorageMockRecorder) ListQualityProfiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfiles", reflect.TypeOf((*MockStorage)(nil).ListQualityProfiles), ctx)
}

// MockIndexerStorage is a mock of IndexerStorage interface.
type MockIndexerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerStorageMockRecorder
}

// MockIndexerStorageMockRecorder is the mock recorder for MockIndexerStorage.
type MockIndexerStorageMockRecorder struct {
	mock *MockIndexerStorage
}

// NewMockIndexerStorage creates a new mock instance.
func NewMockIndexerStorage(ctrl *gomock.Controller) *MockIndexerStorage {
	mock := &MockIndexerStorage{ctrl: ctrl}
	mock.recorder = &MockIndexerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexerStorage) EXPECT() *MockIndexerStorageMockRecorder {
	return m.recorder
}

// CreateIndexer mocks base method.
func (m *MockIndexerStorage) CreateIndexer(ctx context.Context, indexer model.Indexer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexer", ctx, indexer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndexer indicates an expected call of CreateIndexer.
func (mr *MockIndexerStorageMockRecorder) CreateIndexer(ctx, indexer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexer", reflect.TypeOf((*MockIndexerStorage)(nil).CreateIndexer), ctx, indexer)
}

// DeleteIndexer mocks base method.
func (m *MockIndexerStorage) DeleteIndexer(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndexer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndexer indicates an expected call of DeleteIndexer.
func (mr *MockIndexerStorageMockRecorder) DeleteIndexer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexer", reflect.TypeOf((*MockIndexerStorage)(nil).DeleteIndexer), ctx, id)
}

// ListIndexers mocks base method.
func (m *MockIndexerStorage) ListIndexers(ctx context.Context) ([]*model.Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexers", ctx)
	ret0, _ := ret[0].([]*model.Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexers indicates an expected call of ListIndexers.
func (mr *MockIndexerStorageMockRecorder) ListIndexers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexers", reflect.TypeOf((*MockIndexerStorage)(nil).ListIndexers), ctx)
}

// MockQualityStorage is a mock of QualityStorage interface.
type MockQualityStorage struct {
	ctrl     *gomock.Controller
	recorder *MockQualityStorageMockRecorder
}

// MockQualityStorageMockRecorder is the mock recorder for MockQualityStorage.
type MockQualityStorageMockRecorder struct {
	mock *MockQualityStorage
}

// NewMockQualityStorage creates a new mock instance.
func NewMockQualityStorage(ctrl *gomock.Controller) *MockQualityStorage {
	mock := &MockQualityStorage{ctrl: ctrl}
	mock.recorder = &MockQualityStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQualityStorage) EXPECT() *MockQualityStorageMockRecorder {
	return m.recorder
}

// CreateQualityDefinition mocks base method.
func (m *MockQualityStorage) CreateQualityDefinition(ctx context.Context, definition model.QualityDefinition) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityDefinition", ctx, definition)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityDefinition indicates an expected call of CreateQualityDefinition.
func (mr *MockQualityStorageMockRecorder) CreateQualityDefinition(ctx, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityDefinition", reflect.TypeOf((*MockQualityStorage)(nil).CreateQualityDefinition), ctx, definition)
}

// CreateQualityProfile mocks base method.
func (m *MockQualityStorage) CreateQualityProfile(ctx context.Context, profile model.QualityProfile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfile", ctx, profile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfile indicates an expected call of CreateQualityProfile.
func (mr *MockQualityStorageMockRecorder) CreateQualityProfile(ctx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfile", reflect.TypeOf((*MockQualityStorage)(nil).CreateQualityProfile), ctx, profile)
}

// CreateQualityProfileItem mocks base method.
func (m *MockQualityStorage) CreateQualityProfileItem(ctx context.Context, item model.QualityProfileItem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfileItem", ctx, item)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfileItem indicates an expected call of CreateQualityProfileItem.
func (mr *MockQualityStorageMockRecorder) CreateQualityProfileItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfileItem", reflect.TypeOf((*MockQualityStorage)(nil).CreateQualityProfileItem), ctx, item)
}

// DeleteQualityDefinition mocks base method.
func (m *MockQualityStorage) DeleteQualityDefinition(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityDefinition", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityDefinition indicates an expected call of DeleteQualityDefinition.
func (mr *MockQualityStorageMockRecorder) DeleteQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityDefinition", reflect.TypeOf((*MockQualityStorage)(nil).DeleteQualityDefinition), ctx, id)
}

// DeleteQualityProfile mocks base method.
func (m *MockQualityStorage) DeleteQualityProfile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfile indicates an expected call of DeleteQualityProfile.
func (mr *MockQualityStorageMockRecorder) DeleteQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfile", reflect.TypeOf((*MockQualityStorage)(nil).DeleteQualityProfile), ctx, id)
}

// DeleteQualityProfileItem mocks base method.
func (m *MockQualityStorage) DeleteQualityProfileItem(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfileItem indicates an expected call of DeleteQualityProfileItem.
func (mr *MockQualityStorageMockRecorder) DeleteQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfileItem", reflect.TypeOf((*MockQualityStorage)(nil).DeleteQualityProfileItem), ctx, id)
}

// GetQualityDefinition mocks base method.
func (m *MockQualityStorage) GetQualityDefinition(ctx context.Context, id int64) (model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityDefinition", ctx, id)
	ret0, _ := ret[0].(model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityDefinition indicates an expected call of GetQualityDefinition.
func (mr *MockQualityStorageMockRecorder) GetQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityDefinition", reflect.TypeOf((*MockQualityStorage)(nil).GetQualityDefinition), ctx, id)
}

// GetQualityProfile mocks base method.
func (m *MockQualityStorage) GetQualityProfile(ctx context.Context, id int64) (storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfile", ctx, id)
	ret0, _ := ret[0].(storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfile indicates an expected call of GetQualityProfile.
func (mr *MockQualityStorageMockRecorder) GetQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfile", reflect.TypeOf((*MockQualityStorage)(nil).GetQualityProfile), ctx, id)
}

// GetQualityProfileItem mocks base method.
func (m *MockQualityStorage) GetQualityProfileItem(ctx context.Context, id int64) (model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfileItem indicates an expected call of GetQualityProfileItem.
func (mr *MockQualityStorageMockRecorder) GetQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfileItem", reflect.TypeOf((*MockQualityStorage)(nil).GetQualityProfileItem), ctx, id)
}

// ListQualityDefinitions mocks base method.
func (m *MockQualityStorage) ListQualityDefinitions(ctx context.Context) ([]*model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityDefinitions", ctx)
	ret0, _ := ret[0].([]*model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityDefinitions indicates an expected call of ListQualityDefinitions.
func (mr *MockQualityStorageMockRecorder) ListQualityDefinitions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityDefinitions", reflect.TypeOf((*MockQualityStorage)(nil).ListQualityDefinitions), ctx)
}

// ListQualityProfileItems mocks base method.
func (m *MockQualityStorage) ListQualityProfileItems(ctx context.Context) ([]*model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfileItems", ctx)
	ret0, _ := ret[0].([]*model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfileItems indicates an expected call of ListQualityProfileItems.
func (mr *MockQualityStorageMockRecorder) ListQualityProfileItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfileItems", reflect.TypeOf((*MockQualityStorage)(nil).ListQualityProfileItems), ctx)
}

// ListQualityProfiles mocks base method.
func (m *MockQualityStorage) ListQualityProfiles(ctx context.Context) ([]*storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfiles", ctx)
	ret0, _ := ret[0].([]*storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfiles indicates an expected call of ListQualityProfiles.
func (mr *MockQualityStorageMockRecorder) ListQualityProfiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfiles", reflect.TypeOf((*MockQualityStorage)(nil).ListQualityProfiles), ctx)
}

// MockMovieStorage is a mock of MovieStorage interface.
type MockMovieStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMovieStorageMockRecorder
}

// MockMovieStorageMockRecorder is the mock recorder for MockMovieStorage.
type MockMovieStorageMockRecorder struct {
	mock *MockMovieStorage
}

// NewMockMovieStorage creates a new mock instance.
func NewMockMovieStorage(ctrl *gomock.Controller) *MockMovieStorage {
	mock := &MockMovieStorage{ctrl: ctrl}
	mock.recorder = &MockMovieStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieStorage) EXPECT() *MockMovieStorageMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieStorage) CreateMovie(ctx context.Context, movie model.Movie) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, movie)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieStorageMockRecorder) CreateMovie(ctx, movie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieStorage)(nil).CreateMovie), ctx, movie)
}

// CreateMovieFile mocks base method.
func (m *MockMovieStorage) CreateMovieFile(ctx context.Context, movieFile model.MovieFile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieFile", ctx, movieFile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieFile indicates an expected call of CreateMovieFile.
func (mr *MockMovieStorageMockRecorder) CreateMovieFile(ctx, movieFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieFile", reflect.TypeOf((*MockMovieStorage)(nil).CreateMovieFile), ctx, movieFile)
}

// DeleteMovie mocks base method.
func (m *MockMovieStorage) DeleteMovie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieStorageMockRecorder) DeleteMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieStorage)(nil).DeleteMovie), ctx, id)
}

// DeleteMovieFile mocks base method.
func (m *MockMovieStorage) DeleteMovieFile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieFile indicates an expected call of DeleteMovieFile.
func (mr *MockMovieStorageMockRecorder) DeleteMovieFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFile", reflect.TypeOf((*MockMovieStorage)(nil).DeleteMovieFile), ctx, id)
}

// GetMovieByMetadataID mocks base method.
func (m *MockMovieStorage) GetMovieByMetadataID(ctx context.Context, metadataID int) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByMetadataID", ctx, metadataID)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByMetadataID indicates an expected call of GetMovieByMetadataID.
func (mr *MockMovieStorageMockRecorder) GetMovieByMetadataID(ctx, metadataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByMetadataID", reflect.TypeOf((*MockMovieStorage)(nil).GetMovieByMetadataID), ctx, metadataID)
}

// ListMovieFiles mocks base method.
func (m *MockMovieStorage) ListMovieFiles(ctx context.Context) ([]*model.MovieFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieFiles", ctx)
	ret0, _ := ret[0].([]*model.MovieFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieFiles indicates an expected call of ListMovieFiles.
func (mr *MockMovieStorageMockRecorder) ListMovieFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieFiles", reflect.TypeOf((*MockMovieStorage)(nil).ListMovieFiles), ctx)
}

// ListMovies mocks base method.
func (m *MockMovieStorage) ListMovies(ctx context.Context) ([]*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", ctx)
	ret0, _ := ret[0].([]*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockMovieStorageMockRecorder) ListMovies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockMovieStorage)(nil).ListMovies), ctx)
}

// MockMovieMetadataStorage is a mock of MovieMetadataStorage interface.
type MockMovieMetadataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMovieMetadataStorageMockRecorder
}

// MockMovieMetadataStorageMockRecorder is the mock recorder for MockMovieMetadataStorage.
type MockMovieMetadataStorageMockRecorder struct {
	mock *MockMovieMetadataStorage
}

// NewMockMovieMetadataStorage creates a new mock instance.
func NewMockMovieMetadataStorage(ctrl *gomock.Controller) *MockMovieMetadataStorage {
	mock := &MockMovieMetadataStorage{ctrl: ctrl}
	mock.recorder = &MockMovieMetadataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieMetadataStorage) EXPECT() *MockMovieMetadataStorageMockRecorder {
	return m.recorder
}

// CreateMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) CreateMovieMetadata(ctx context.Context, movieMeta model.MovieMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieMetadata", ctx, movieMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieMetadata indicates an expected call of CreateMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) CreateMovieMetadata(ctx, movieMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).CreateMovieMetadata), ctx, movieMeta)
}

// DeleteMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) DeleteMovieMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieMetadata indicates an expected call of DeleteMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) DeleteMovieMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).DeleteMovieMetadata), ctx, id)
}

// GetMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) GetMovieMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieMetadata", ctx, where)
	ret0, _ := ret[0].(*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieMetadata indicates an expected call of GetMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) GetMovieMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).GetMovieMetadata), ctx, where)
}

// ListMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) ListMovieMetadata(ctx context.Context) ([]*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieMetadata", ctx)
	ret0, _ := ret[0].([]*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieMetadata indicates an expected call of ListMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) ListMovieMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).ListMovieMetadata), ctx)
}

// MockDownloadClientStorage is a mock of DownloadClientStorage interface.
type MockDownloadClientStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadClientStorageMockRecorder
}

// MockDownloadClientStorageMockRecorder is the mock recorder for MockDownloadClientStorage.
type MockDownloadClientStorageMockRecorder struct {
	mock *MockDownloadClientStorage
}

// NewMockDownloadClientStorage creates a new mock instance.
func NewMockDownloadClientStorage(ctrl *gomock.Controller) *MockDownloadClientStorage {
	mock := &MockDownloadClientStorage{ctrl: ctrl}
	mock.recorder = &MockDownloadClientStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadClientStorage) EXPECT() *MockDownloadClientStorageMockRecorder {
	return m.recorder
}

// CreateDownloadClient mocks base method.
func (m *MockDownloadClientStorage) CreateDownloadClient(ctx context.Context, client model.DownloadClient) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDownloadClient", ctx, client)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDownloadClient indicates an expected call of CreateDownloadClient.
func (mr *MockDownloadClientStorageMockRecorder) CreateDownloadClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDownloadClient", reflect.TypeOf((*MockDownloadClientStorage)(nil).CreateDownloadClient), ctx, client)
}

// DeleteDownloadClient mocks base method.
func (m *MockDownloadClientStorage) DeleteDownloadClient(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDownloadClient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDownloadClient indicates an expected call of DeleteDownloadClient.
func (mr *MockDownloadClientStorageMockRecorder) DeleteDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDownloadClient", reflect.TypeOf((*MockDownloadClientStorage)(nil).DeleteDownloadClient), ctx, id)
}

// GetDownloadClient mocks base method.
func (m *MockDownloadClientStorage) GetDownloadClient(ctx context.Context, id int64) (model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadClient", ctx, id)
	ret0, _ := ret[0].(model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadClient indicates an expected call of GetDownloadClient.
func (mr *MockDownloadClientStorageMockRecorder) GetDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadClient", reflect.TypeOf((*MockDownloadClientStorage)(nil).GetDownloadClient), ctx, id)
}

// ListDownloadClients mocks base method.
func (m *MockDownloadClientStorage) ListDownloadClients(ctx context.Context) ([]*model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownloadClients", ctx)
	ret0, _ := ret[0].([]*model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDownloadClients indicates an expected call of ListDownloadClients.
func (mr *MockDownloadClientStorageMockRecorder) ListDownloadClients(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownloadClients", reflect.TypeOf((*MockDownloadClientStorage)(nil).ListDownloadClients), ctx)
}
