// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_storage.go -source=storage.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlite "github.com/go-jet/jet/v2/sqlite"
	storage "github.com/kasuboski/mediaz/pkg/storage"
	model "github.com/kasuboski/mediaz/pkg/storage/sqlite/schema/gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateDownloadClient mocks base method.
func (m *MockStorage) CreateDownloadClient(ctx context.Context, client model.DownloadClient) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDownloadClient", ctx, client)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDownloadClient indicates an expected call of CreateDownloadClient.
func (mr *MockStorageMockRecorder) CreateDownloadClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDownloadClient", reflect.TypeOf((*MockStorage)(nil).CreateDownloadClient), ctx, client)
}

// CreateEpisode mocks base method.
func (m *MockStorage) CreateEpisode(ctx context.Context, episode storage.Episode, state storage.EpisodeState) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEpisode", ctx, episode, state)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisode indicates an expected call of CreateEpisode.
func (mr *MockStorageMockRecorder) CreateEpisode(ctx, episode, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisode", reflect.TypeOf((*MockStorage)(nil).CreateEpisode), ctx, episode, state)
}

// CreateEpisodeFile mocks base method.
func (m *MockStorage) CreateEpisodeFile(ctx context.Context, episodeFile model.EpisodeFile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEpisodeFile", ctx, episodeFile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisodeFile indicates an expected call of CreateEpisodeFile.
func (mr *MockStorageMockRecorder) CreateEpisodeFile(ctx, episodeFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisodeFile", reflect.TypeOf((*MockStorage)(nil).CreateEpisodeFile), ctx, episodeFile)
}

// CreateEpisodeMetadata mocks base method.
func (m *MockStorage) CreateEpisodeMetadata(ctx context.Context, episodeMeta model.EpisodeMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEpisodeMetadata", ctx, episodeMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisodeMetadata indicates an expected call of CreateEpisodeMetadata.
func (mr *MockStorageMockRecorder) CreateEpisodeMetadata(ctx, episodeMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisodeMetadata", reflect.TypeOf((*MockStorage)(nil).CreateEpisodeMetadata), ctx, episodeMeta)
}

// CreateIndexer mocks base method.
func (m *MockStorage) CreateIndexer(ctx context.Context, indexer model.Indexer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexer", ctx, indexer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndexer indicates an expected call of CreateIndexer.
func (mr *MockStorageMockRecorder) CreateIndexer(ctx, indexer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexer", reflect.TypeOf((*MockStorage)(nil).CreateIndexer), ctx, indexer)
}

// CreateMovie mocks base method.
func (m *MockStorage) CreateMovie(ctx context.Context, movie storage.Movie, state storage.MovieState) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, movie, state)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockStorageMockRecorder) CreateMovie(ctx, movie, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockStorage)(nil).CreateMovie), ctx, movie, state)
}

// CreateMovieFile mocks base method.
func (m *MockStorage) CreateMovieFile(ctx context.Context, movieFile model.MovieFile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieFile", ctx, movieFile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieFile indicates an expected call of CreateMovieFile.
func (mr *MockStorageMockRecorder) CreateMovieFile(ctx, movieFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieFile", reflect.TypeOf((*MockStorage)(nil).CreateMovieFile), ctx, movieFile)
}

// CreateMovieMetadata mocks base method.
func (m *MockStorage) CreateMovieMetadata(ctx context.Context, movieMeta model.MovieMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieMetadata", ctx, movieMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieMetadata indicates an expected call of CreateMovieMetadata.
func (mr *MockStorageMockRecorder) CreateMovieMetadata(ctx, movieMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieMetadata", reflect.TypeOf((*MockStorage)(nil).CreateMovieMetadata), ctx, movieMeta)
}

// CreateQualityDefinition mocks base method.
func (m *MockStorage) CreateQualityDefinition(ctx context.Context, definition model.QualityDefinition) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityDefinition", ctx, definition)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityDefinition indicates an expected call of CreateQualityDefinition.
func (mr *MockStorageMockRecorder) CreateQualityDefinition(ctx, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityDefinition", reflect.TypeOf((*MockStorage)(nil).CreateQualityDefinition), ctx, definition)
}

// CreateQualityProfile mocks base method.
func (m *MockStorage) CreateQualityProfile(ctx context.Context, profile model.QualityProfile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfile", ctx, profile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfile indicates an expected call of CreateQualityProfile.
func (mr *MockStorageMockRecorder) CreateQualityProfile(ctx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfile", reflect.TypeOf((*MockStorage)(nil).CreateQualityProfile), ctx, profile)
}

// CreateQualityProfileItem mocks base method.
func (m *MockStorage) CreateQualityProfileItem(ctx context.Context, item model.QualityProfileItem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfileItem", ctx, item)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfileItem indicates an expected call of CreateQualityProfileItem.
func (mr *MockStorageMockRecorder) CreateQualityProfileItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfileItem", reflect.TypeOf((*MockStorage)(nil).CreateQualityProfileItem), ctx, item)
}

// CreateSeason mocks base method.
func (m *MockStorage) CreateSeason(ctx context.Context, season model.Season) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeason", ctx, season)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeason indicates an expected call of CreateSeason.
func (mr *MockStorageMockRecorder) CreateSeason(ctx, season any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeason", reflect.TypeOf((*MockStorage)(nil).CreateSeason), ctx, season)
}

// CreateSeasonMetadata mocks base method.
func (m *MockStorage) CreateSeasonMetadata(ctx context.Context, seasonMeta model.SeasonMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeasonMetadata", ctx, seasonMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeasonMetadata indicates an expected call of CreateSeasonMetadata.
func (mr *MockStorageMockRecorder) CreateSeasonMetadata(ctx, seasonMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeasonMetadata", reflect.TypeOf((*MockStorage)(nil).CreateSeasonMetadata), ctx, seasonMeta)
}

// CreateShow mocks base method.
func (m *MockStorage) CreateShow(ctx context.Context, show model.Series) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShow", ctx, show)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShow indicates an expected call of CreateShow.
func (mr *MockStorageMockRecorder) CreateShow(ctx, show any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShow", reflect.TypeOf((*MockStorage)(nil).CreateShow), ctx, show)
}

// CreateShowMetadata mocks base method.
func (m *MockStorage) CreateShowMetadata(ctx context.Context, showMeta model.SeriesMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShowMetadata", ctx, showMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShowMetadata indicates an expected call of CreateShowMetadata.
func (mr *MockStorageMockRecorder) CreateShowMetadata(ctx, showMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShowMetadata", reflect.TypeOf((*MockStorage)(nil).CreateShowMetadata), ctx, showMeta)
}

// DeleteDownloadClient mocks base method.
func (m *MockStorage) DeleteDownloadClient(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDownloadClient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDownloadClient indicates an expected call of DeleteDownloadClient.
func (mr *MockStorageMockRecorder) DeleteDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDownloadClient", reflect.TypeOf((*MockStorage)(nil).DeleteDownloadClient), ctx, id)
}

// DeleteEpisode mocks base method.
func (m *MockStorage) DeleteEpisode(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEpisode", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEpisode indicates an expected call of DeleteEpisode.
func (mr *MockStorageMockRecorder) DeleteEpisode(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisode", reflect.TypeOf((*MockStorage)(nil).DeleteEpisode), ctx, id)
}

// DeleteEpisodeFile mocks base method.
func (m *MockStorage) DeleteEpisodeFile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEpisodeFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEpisodeFile indicates an expected call of DeleteEpisodeFile.
func (mr *MockStorageMockRecorder) DeleteEpisodeFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisodeFile", reflect.TypeOf((*MockStorage)(nil).DeleteEpisodeFile), ctx, id)
}

// DeleteEpisodeMetadata mocks base method.
func (m *MockStorage) DeleteEpisodeMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEpisodeMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEpisodeMetadata indicates an expected call of DeleteEpisodeMetadata.
func (mr *MockStorageMockRecorder) DeleteEpisodeMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisodeMetadata", reflect.TypeOf((*MockStorage)(nil).DeleteEpisodeMetadata), ctx, id)
}

// DeleteIndexer mocks base method.
func (m *MockStorage) DeleteIndexer(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndexer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndexer indicates an expected call of DeleteIndexer.
func (mr *MockStorageMockRecorder) DeleteIndexer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexer", reflect.TypeOf((*MockStorage)(nil).DeleteIndexer), ctx, id)
}

// DeleteMovie mocks base method.
func (m *MockStorage) DeleteMovie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockStorageMockRecorder) DeleteMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockStorage)(nil).DeleteMovie), ctx, id)
}

// DeleteMovieFile mocks base method.
func (m *MockStorage) DeleteMovieFile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieFile indicates an expected call of DeleteMovieFile.
func (mr *MockStorageMockRecorder) DeleteMovieFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFile", reflect.TypeOf((*MockStorage)(nil).DeleteMovieFile), ctx, id)
}

// DeleteMovieMetadata mocks base method.
func (m *MockStorage) DeleteMovieMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieMetadata indicates an expected call of DeleteMovieMetadata.
func (mr *MockStorageMockRecorder) DeleteMovieMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieMetadata", reflect.TypeOf((*MockStorage)(nil).DeleteMovieMetadata), ctx, id)
}

// DeleteQualityDefinition mocks base method.
func (m *MockStorage) DeleteQualityDefinition(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityDefinition", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityDefinition indicates an expected call of DeleteQualityDefinition.
func (mr *MockStorageMockRecorder) DeleteQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityDefinition", reflect.TypeOf((*MockStorage)(nil).DeleteQualityDefinition), ctx, id)
}

// DeleteQualityProfile mocks base method.
func (m *MockStorage) DeleteQualityProfile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfile indicates an expected call of DeleteQualityProfile.
func (mr *MockStorageMockRecorder) DeleteQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfile", reflect.TypeOf((*MockStorage)(nil).DeleteQualityProfile), ctx, id)
}

// DeleteQualityProfileItem mocks base method.
func (m *MockStorage) DeleteQualityProfileItem(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfileItem indicates an expected call of DeleteQualityProfileItem.
func (mr *MockStorageMockRecorder) DeleteQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfileItem", reflect.TypeOf((*MockStorage)(nil).DeleteQualityProfileItem), ctx, id)
}

// DeleteSeason mocks base method.
func (m *MockStorage) DeleteSeason(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeason", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeason indicates an expected call of DeleteSeason.
func (mr *MockStorageMockRecorder) DeleteSeason(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeason", reflect.TypeOf((*MockStorage)(nil).DeleteSeason), ctx, id)
}

// DeleteSeasonMetadata mocks base method.
func (m *MockStorage) DeleteSeasonMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeasonMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeasonMetadata indicates an expected call of DeleteSeasonMetadata.
func (mr *MockStorageMockRecorder) DeleteSeasonMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeasonMetadata", reflect.TypeOf((*MockStorage)(nil).DeleteSeasonMetadata), ctx, id)
}

// DeleteShow mocks base method.
func (m *MockStorage) DeleteShow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShow indicates an expected call of DeleteShow.
func (mr *MockStorageMockRecorder) DeleteShow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShow", reflect.TypeOf((*MockStorage)(nil).DeleteShow), ctx, id)
}

// DeleteShowMetadata mocks base method.
func (m *MockStorage) DeleteShowMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShowMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShowMetadata indicates an expected call of DeleteShowMetadata.
func (mr *MockStorageMockRecorder) DeleteShowMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShowMetadata", reflect.TypeOf((*MockStorage)(nil).DeleteShowMetadata), ctx, id)
}

// GetDownloadClient mocks base method.
func (m *MockStorage) GetDownloadClient(ctx context.Context, id int64) (model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadClient", ctx, id)
	ret0, _ := ret[0].(model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadClient indicates an expected call of GetDownloadClient.
func (mr *MockStorageMockRecorder) GetDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadClient", reflect.TypeOf((*MockStorage)(nil).GetDownloadClient), ctx, id)
}

// GetEpisode mocks base method.
func (m *MockStorage) GetEpisode(ctx context.Context, id int64) (*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisode", ctx, id)
	ret0, _ := ret[0].(*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisode indicates an expected call of GetEpisode.
func (mr *MockStorageMockRecorder) GetEpisode(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisode", reflect.TypeOf((*MockStorage)(nil).GetEpisode), ctx, id)
}

// GetEpisodeByEpisodeFileID mocks base method.
func (m *MockStorage) GetEpisodeByEpisodeFileID(ctx context.Context, fileID int64) (*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisodeByEpisodeFileID", ctx, fileID)
	ret0, _ := ret[0].(*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisodeByEpisodeFileID indicates an expected call of GetEpisodeByEpisodeFileID.
func (mr *MockStorageMockRecorder) GetEpisodeByEpisodeFileID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisodeByEpisodeFileID", reflect.TypeOf((*MockStorage)(nil).GetEpisodeByEpisodeFileID), ctx, fileID)
}

// GetEpisodeFiles mocks base method.
func (m *MockStorage) GetEpisodeFiles(ctx context.Context, id int64) ([]*model.EpisodeFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisodeFiles", ctx, id)
	ret0, _ := ret[0].([]*model.EpisodeFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisodeFiles indicates an expected call of GetEpisodeFiles.
func (mr *MockStorageMockRecorder) GetEpisodeFiles(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisodeFiles", reflect.TypeOf((*MockStorage)(nil).GetEpisodeFiles), ctx, id)
}

// GetEpisodeMetadata mocks base method.
func (m *MockStorage) GetEpisodeMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.EpisodeMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisodeMetadata", ctx, where)
	ret0, _ := ret[0].(*model.EpisodeMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisodeMetadata indicates an expected call of GetEpisodeMetadata.
func (mr *MockStorageMockRecorder) GetEpisodeMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisodeMetadata", reflect.TypeOf((*MockStorage)(nil).GetEpisodeMetadata), ctx, where)
}

// GetMovie mocks base method.
func (m *MockStorage) GetMovie(ctx context.Context, id int64) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, id)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockStorageMockRecorder) GetMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockStorage)(nil).GetMovie), ctx, id)
}

// GetMovieByMetadataID mocks base method.
func (m *MockStorage) GetMovieByMetadataID(ctx context.Context, metadataID int) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByMetadataID", ctx, metadataID)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByMetadataID indicates an expected call of GetMovieByMetadataID.
func (mr *MockStorageMockRecorder) GetMovieByMetadataID(ctx, metadataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByMetadataID", reflect.TypeOf((*MockStorage)(nil).GetMovieByMetadataID), ctx, metadataID)
}

// GetMovieByMovieFileID mocks base method.
func (m *MockStorage) GetMovieByMovieFileID(ctx context.Context, fileID int64) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByMovieFileID", ctx, fileID)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByMovieFileID indicates an expected call of GetMovieByMovieFileID.
func (mr *MockStorageMockRecorder) GetMovieByMovieFileID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByMovieFileID", reflect.TypeOf((*MockStorage)(nil).GetMovieByMovieFileID), ctx, fileID)
}

// GetMovieByPath mocks base method.
func (m *MockStorage) GetMovieByPath(ctx context.Context, path string) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByPath", ctx, path)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByPath indicates an expected call of GetMovieByPath.
func (mr *MockStorageMockRecorder) GetMovieByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByPath", reflect.TypeOf((*MockStorage)(nil).GetMovieByPath), ctx, path)
}

// GetMovieFilesByMovieName mocks base method.
func (m *MockStorage) GetMovieFilesByMovieName(ctx context.Context, name string) ([]*model.MovieFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieFilesByMovieName", ctx, name)
	ret0, _ := ret[0].([]*model.MovieFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieFilesByMovieName indicates an expected call of GetMovieFilesByMovieName.
func (mr *MockStorageMockRecorder) GetMovieFilesByMovieName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieFilesByMovieName", reflect.TypeOf((*MockStorage)(nil).GetMovieFilesByMovieName), ctx, name)
}

// GetMovieMetadata mocks base method.
func (m *MockStorage) GetMovieMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieMetadata", ctx, where)
	ret0, _ := ret[0].(*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieMetadata indicates an expected call of GetMovieMetadata.
func (mr *MockStorageMockRecorder) GetMovieMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieMetadata", reflect.TypeOf((*MockStorage)(nil).GetMovieMetadata), ctx, where)
}

// GetQualityDefinition mocks base method.
func (m *MockStorage) GetQualityDefinition(ctx context.Context, id int64) (model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityDefinition", ctx, id)
	ret0, _ := ret[0].(model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityDefinition indicates an expected call of GetQualityDefinition.
func (mr *MockStorageMockRecorder) GetQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityDefinition", reflect.TypeOf((*MockStorage)(nil).GetQualityDefinition), ctx, id)
}

// GetQualityProfile mocks base method.
func (m *MockStorage) GetQualityProfile(ctx context.Context, id int64) (storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfile", ctx, id)
	ret0, _ := ret[0].(storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfile indicates an expected call of GetQualityProfile.
func (mr *MockStorageMockRecorder) GetQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfile", reflect.TypeOf((*MockStorage)(nil).GetQualityProfile), ctx, id)
}

// GetQualityProfileItem mocks base method.
func (m *MockStorage) GetQualityProfileItem(ctx context.Context, id int64) (model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfileItem indicates an expected call of GetQualityProfileItem.
func (mr *MockStorageMockRecorder) GetQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfileItem", reflect.TypeOf((*MockStorage)(nil).GetQualityProfileItem), ctx, id)
}

// GetSeason mocks base method.
func (m *MockStorage) GetSeason(ctx context.Context, id int64) (*model.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeason", ctx, id)
	ret0, _ := ret[0].(*model.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeason indicates an expected call of GetSeason.
func (mr *MockStorageMockRecorder) GetSeason(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeason", reflect.TypeOf((*MockStorage)(nil).GetSeason), ctx, id)
}

// GetSeasonMetadata mocks base method.
func (m *MockStorage) GetSeasonMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.SeasonMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeasonMetadata", ctx, where)
	ret0, _ := ret[0].(*model.SeasonMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeasonMetadata indicates an expected call of GetSeasonMetadata.
func (mr *MockStorageMockRecorder) GetSeasonMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeasonMetadata", reflect.TypeOf((*MockStorage)(nil).GetSeasonMetadata), ctx, where)
}

// GetSeriesMetadata mocks base method.
func (m *MockStorage) GetSeriesMetadata(ctx context.Context, where sqlite.BoolExpression) (*storage.SeriesMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeriesMetadata", ctx, where)
	ret0, _ := ret[0].(*storage.SeriesMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesMetadata indicates an expected call of GetSeriesMetadata.
func (mr *MockStorageMockRecorder) GetSeriesMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesMetadata", reflect.TypeOf((*MockStorage)(nil).GetSeriesMetadata), ctx, where)
}

// GetShow mocks base method.
func (m *MockStorage) GetShow(ctx context.Context, id int64) (*model.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShow", ctx, id)
	ret0, _ := ret[0].(*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShow indicates an expected call of GetShow.
func (mr *MockStorageMockRecorder) GetShow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShow", reflect.TypeOf((*MockStorage)(nil).GetShow), ctx, id)
}

// GetShowMetadata mocks base method.
func (m *MockStorage) GetShowMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.SeriesMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShowMetadata", ctx, where)
	ret0, _ := ret[0].(*model.SeriesMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShowMetadata indicates an expected call of GetShowMetadata.
func (mr *MockStorageMockRecorder) GetShowMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShowMetadata", reflect.TypeOf((*MockStorage)(nil).GetShowMetadata), ctx, where)
}

// Init mocks base method.
func (m *MockStorage) Init(ctx context.Context, schemas ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range schemas {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStorageMockRecorder) Init(ctx any, schemas ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, schemas...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStorage)(nil).Init), varargs...)
}

// ListDownloadClients mocks base method.
func (m *MockStorage) ListDownloadClients(ctx context.Context) ([]*model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownloadClients", ctx)
	ret0, _ := ret[0].([]*model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDownloadClients indicates an expected call of ListDownloadClients.
func (mr *MockStorageMockRecorder) ListDownloadClients(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownloadClients", reflect.TypeOf((*MockStorage)(nil).ListDownloadClients), ctx)
}

// ListEpisodeFiles mocks base method.
func (m *MockStorage) ListEpisodeFiles(ctx context.Context) ([]*model.EpisodeFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodeFiles", ctx)
	ret0, _ := ret[0].([]*model.EpisodeFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodeFiles indicates an expected call of ListEpisodeFiles.
func (mr *MockStorageMockRecorder) ListEpisodeFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodeFiles", reflect.TypeOf((*MockStorage)(nil).ListEpisodeFiles), ctx)
}

// ListEpisodeMetadata mocks base method.
func (m *MockStorage) ListEpisodeMetadata(ctx context.Context) ([]*model.EpisodeMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodeMetadata", ctx)
	ret0, _ := ret[0].([]*model.EpisodeMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodeMetadata indicates an expected call of ListEpisodeMetadata.
func (mr *MockStorageMockRecorder) ListEpisodeMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodeMetadata", reflect.TypeOf((*MockStorage)(nil).ListEpisodeMetadata), ctx)
}

// ListEpisodes mocks base method.
func (m *MockStorage) ListEpisodes(ctx context.Context, seasonID int64) ([]*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodes", ctx, seasonID)
	ret0, _ := ret[0].([]*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodes indicates an expected call of ListEpisodes.
func (mr *MockStorageMockRecorder) ListEpisodes(ctx, seasonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodes", reflect.TypeOf((*MockStorage)(nil).ListEpisodes), ctx, seasonID)
}

// ListEpisodesByState mocks base method.
func (m *MockStorage) ListEpisodesByState(ctx context.Context, state storage.EpisodeState) ([]*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodesByState", ctx, state)
	ret0, _ := ret[0].([]*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodesByState indicates an expected call of ListEpisodesByState.
func (mr *MockStorageMockRecorder) ListEpisodesByState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodesByState", reflect.TypeOf((*MockStorage)(nil).ListEpisodesByState), ctx, state)
}

// ListIndexers mocks base method.
func (m *MockStorage) ListIndexers(ctx context.Context) ([]*model.Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexers", ctx)
	ret0, _ := ret[0].([]*model.Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexers indicates an expected call of ListIndexers.
func (mr *MockStorageMockRecorder) ListIndexers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexers", reflect.TypeOf((*MockStorage)(nil).ListIndexers), ctx)
}

// ListMovieFiles mocks base method.
func (m *MockStorage) ListMovieFiles(ctx context.Context) ([]*model.MovieFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieFiles", ctx)
	ret0, _ := ret[0].([]*model.MovieFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieFiles indicates an expected call of ListMovieFiles.
func (mr *MockStorageMockRecorder) ListMovieFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieFiles", reflect.TypeOf((*MockStorage)(nil).ListMovieFiles), ctx)
}

// ListMovieMetadata mocks base method.
func (m *MockStorage) ListMovieMetadata(ctx context.Context) ([]*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieMetadata", ctx)
	ret0, _ := ret[0].([]*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieMetadata indicates an expected call of ListMovieMetadata.
func (mr *MockStorageMockRecorder) ListMovieMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieMetadata", reflect.TypeOf((*MockStorage)(nil).ListMovieMetadata), ctx)
}

// ListMovies mocks base method.
func (m *MockStorage) ListMovies(ctx context.Context) ([]*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", ctx)
	ret0, _ := ret[0].([]*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockStorageMockRecorder) ListMovies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockStorage)(nil).ListMovies), ctx)
}

// ListMoviesByState mocks base method.
func (m *MockStorage) ListMoviesByState(ctx context.Context, state storage.MovieState) ([]*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMoviesByState", ctx, state)
	ret0, _ := ret[0].([]*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMoviesByState indicates an expected call of ListMoviesByState.
func (mr *MockStorageMockRecorder) ListMoviesByState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMoviesByState", reflect.TypeOf((*MockStorage)(nil).ListMoviesByState), ctx, state)
}

// ListQualityDefinitions mocks base method.
func (m *MockStorage) ListQualityDefinitions(ctx context.Context) ([]*model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityDefinitions", ctx)
	ret0, _ := ret[0].([]*model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityDefinitions indicates an expected call of ListQualityDefinitions.
func (mr *MockStorageMockRecorder) ListQualityDefinitions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityDefinitions", reflect.TypeOf((*MockStorage)(nil).ListQualityDefinitions), ctx)
}

// ListQualityProfileItems mocks base method.
func (m *MockStorage) ListQualityProfileItems(ctx context.Context) ([]*model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfileItems", ctx)
	ret0, _ := ret[0].([]*model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfileItems indicates an expected call of ListQualityProfileItems.
func (mr *MockStorageMockRecorder) ListQualityProfileItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfileItems", reflect.TypeOf((*MockStorage)(nil).ListQualityProfileItems), ctx)
}

// ListQualityProfiles mocks base method.
func (m *MockStorage) ListQualityProfiles(ctx context.Context) ([]*storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfiles", ctx)
	ret0, _ := ret[0].([]*storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfiles indicates an expected call of ListQualityProfiles.
func (mr *MockStorageMockRecorder) ListQualityProfiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfiles", reflect.TypeOf((*MockStorage)(nil).ListQualityProfiles), ctx)
}

// ListSeasonMetadata mocks base method.
func (m *MockStorage) ListSeasonMetadata(ctx context.Context) ([]*model.SeasonMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeasonMetadata", ctx)
	ret0, _ := ret[0].([]*model.SeasonMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeasonMetadata indicates an expected call of ListSeasonMetadata.
func (mr *MockStorageMockRecorder) ListSeasonMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeasonMetadata", reflect.TypeOf((*MockStorage)(nil).ListSeasonMetadata), ctx)
}

// ListSeasons mocks base method.
func (m *MockStorage) ListSeasons(ctx context.Context, showID int64) ([]*model.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeasons", ctx, showID)
	ret0, _ := ret[0].([]*model.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeasons indicates an expected call of ListSeasons.
func (mr *MockStorageMockRecorder) ListSeasons(ctx, showID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeasons", reflect.TypeOf((*MockStorage)(nil).ListSeasons), ctx, showID)
}

// ListShowMetadata mocks base method.
func (m *MockStorage) ListShowMetadata(ctx context.Context) ([]*model.SeriesMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShowMetadata", ctx)
	ret0, _ := ret[0].([]*model.SeriesMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShowMetadata indicates an expected call of ListShowMetadata.
func (mr *MockStorageMockRecorder) ListShowMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShowMetadata", reflect.TypeOf((*MockStorage)(nil).ListShowMetadata), ctx)
}

// ListShows mocks base method.
func (m *MockStorage) ListShows(ctx context.Context) ([]*model.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShows", ctx)
	ret0, _ := ret[0].([]*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShows indicates an expected call of ListShows.
func (mr *MockStorageMockRecorder) ListShows(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShows", reflect.TypeOf((*MockStorage)(nil).ListShows), ctx)
}

// UpdateEpisodeEpisodeFileID mocks base method.
func (m *MockStorage) UpdateEpisodeEpisodeFileID(ctx context.Context, id, fileID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEpisodeEpisodeFileID", ctx, id, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEpisodeEpisodeFileID indicates an expected call of UpdateEpisodeEpisodeFileID.
func (mr *MockStorageMockRecorder) UpdateEpisodeEpisodeFileID(ctx, id, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpisodeEpisodeFileID", reflect.TypeOf((*MockStorage)(nil).UpdateEpisodeEpisodeFileID), ctx, id, fileID)
}

// UpdateMovieMovieFileID mocks base method.
func (m *MockStorage) UpdateMovieMovieFileID(ctx context.Context, id, fileID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovieMovieFileID", ctx, id, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovieMovieFileID indicates an expected call of UpdateMovieMovieFileID.
func (mr *MockStorageMockRecorder) UpdateMovieMovieFileID(ctx, id, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovieMovieFileID", reflect.TypeOf((*MockStorage)(nil).UpdateMovieMovieFileID), ctx, id, fileID)
}

// UpdateMovieState mocks base method.
func (m *MockStorage) UpdateMovieState(ctx context.Context, id int64, state storage.MovieState, metadata *storage.MovieStateMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovieState", ctx, id, state, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovieState indicates an expected call of UpdateMovieState.
func (mr *MockStorageMockRecorder) UpdateMovieState(ctx, id, state, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovieState", reflect.TypeOf((*MockStorage)(nil).UpdateMovieState), ctx, id, state, metadata)
}

// MockIndexerStorage is a mock of IndexerStorage interface.
type MockIndexerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerStorageMockRecorder
}

// MockIndexerStorageMockRecorder is the mock recorder for MockIndexerStorage.
type MockIndexerStorageMockRecorder struct {
	mock *MockIndexerStorage
}

// NewMockIndexerStorage creates a new mock instance.
func NewMockIndexerStorage(ctrl *gomock.Controller) *MockIndexerStorage {
	mock := &MockIndexerStorage{ctrl: ctrl}
	mock.recorder = &MockIndexerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexerStorage) EXPECT() *MockIndexerStorageMockRecorder {
	return m.recorder
}

// CreateIndexer mocks base method.
func (m *MockIndexerStorage) CreateIndexer(ctx context.Context, indexer model.Indexer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexer", ctx, indexer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndexer indicates an expected call of CreateIndexer.
func (mr *MockIndexerStorageMockRecorder) CreateIndexer(ctx, indexer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexer", reflect.TypeOf((*MockIndexerStorage)(nil).CreateIndexer), ctx, indexer)
}

// DeleteIndexer mocks base method.
func (m *MockIndexerStorage) DeleteIndexer(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndexer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndexer indicates an expected call of DeleteIndexer.
func (mr *MockIndexerStorageMockRecorder) DeleteIndexer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndexer", reflect.TypeOf((*MockIndexerStorage)(nil).DeleteIndexer), ctx, id)
}

// ListIndexers mocks base method.
func (m *MockIndexerStorage) ListIndexers(ctx context.Context) ([]*model.Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexers", ctx)
	ret0, _ := ret[0].([]*model.Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexers indicates an expected call of ListIndexers.
func (mr *MockIndexerStorageMockRecorder) ListIndexers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexers", reflect.TypeOf((*MockIndexerStorage)(nil).ListIndexers), ctx)
}

// MockQualityStorage is a mock of QualityStorage interface.
type MockQualityStorage struct {
	ctrl     *gomock.Controller
	recorder *MockQualityStorageMockRecorder
}

// MockQualityStorageMockRecorder is the mock recorder for MockQualityStorage.
type MockQualityStorageMockRecorder struct {
	mock *MockQualityStorage
}

// NewMockQualityStorage creates a new mock instance.
func NewMockQualityStorage(ctrl *gomock.Controller) *MockQualityStorage {
	mock := &MockQualityStorage{ctrl: ctrl}
	mock.recorder = &MockQualityStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQualityStorage) EXPECT() *MockQualityStorageMockRecorder {
	return m.recorder
}

// CreateQualityDefinition mocks base method.
func (m *MockQualityStorage) CreateQualityDefinition(ctx context.Context, definition model.QualityDefinition) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityDefinition", ctx, definition)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityDefinition indicates an expected call of CreateQualityDefinition.
func (mr *MockQualityStorageMockRecorder) CreateQualityDefinition(ctx, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityDefinition", reflect.TypeOf((*MockQualityStorage)(nil).CreateQualityDefinition), ctx, definition)
}

// CreateQualityProfile mocks base method.
func (m *MockQualityStorage) CreateQualityProfile(ctx context.Context, profile model.QualityProfile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfile", ctx, profile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfile indicates an expected call of CreateQualityProfile.
func (mr *MockQualityStorageMockRecorder) CreateQualityProfile(ctx, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfile", reflect.TypeOf((*MockQualityStorage)(nil).CreateQualityProfile), ctx, profile)
}

// CreateQualityProfileItem mocks base method.
func (m *MockQualityStorage) CreateQualityProfileItem(ctx context.Context, item model.QualityProfileItem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQualityProfileItem", ctx, item)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQualityProfileItem indicates an expected call of CreateQualityProfileItem.
func (mr *MockQualityStorageMockRecorder) CreateQualityProfileItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQualityProfileItem", reflect.TypeOf((*MockQualityStorage)(nil).CreateQualityProfileItem), ctx, item)
}

// DeleteQualityDefinition mocks base method.
func (m *MockQualityStorage) DeleteQualityDefinition(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityDefinition", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityDefinition indicates an expected call of DeleteQualityDefinition.
func (mr *MockQualityStorageMockRecorder) DeleteQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityDefinition", reflect.TypeOf((*MockQualityStorage)(nil).DeleteQualityDefinition), ctx, id)
}

// DeleteQualityProfile mocks base method.
func (m *MockQualityStorage) DeleteQualityProfile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfile indicates an expected call of DeleteQualityProfile.
func (mr *MockQualityStorageMockRecorder) DeleteQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfile", reflect.TypeOf((*MockQualityStorage)(nil).DeleteQualityProfile), ctx, id)
}

// DeleteQualityProfileItem mocks base method.
func (m *MockQualityStorage) DeleteQualityProfileItem(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQualityProfileItem indicates an expected call of DeleteQualityProfileItem.
func (mr *MockQualityStorageMockRecorder) DeleteQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQualityProfileItem", reflect.TypeOf((*MockQualityStorage)(nil).DeleteQualityProfileItem), ctx, id)
}

// GetQualityDefinition mocks base method.
func (m *MockQualityStorage) GetQualityDefinition(ctx context.Context, id int64) (model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityDefinition", ctx, id)
	ret0, _ := ret[0].(model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityDefinition indicates an expected call of GetQualityDefinition.
func (mr *MockQualityStorageMockRecorder) GetQualityDefinition(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityDefinition", reflect.TypeOf((*MockQualityStorage)(nil).GetQualityDefinition), ctx, id)
}

// GetQualityProfile mocks base method.
func (m *MockQualityStorage) GetQualityProfile(ctx context.Context, id int64) (storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfile", ctx, id)
	ret0, _ := ret[0].(storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfile indicates an expected call of GetQualityProfile.
func (mr *MockQualityStorageMockRecorder) GetQualityProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfile", reflect.TypeOf((*MockQualityStorage)(nil).GetQualityProfile), ctx, id)
}

// GetQualityProfileItem mocks base method.
func (m *MockQualityStorage) GetQualityProfileItem(ctx context.Context, id int64) (model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQualityProfileItem", ctx, id)
	ret0, _ := ret[0].(model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQualityProfileItem indicates an expected call of GetQualityProfileItem.
func (mr *MockQualityStorageMockRecorder) GetQualityProfileItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQualityProfileItem", reflect.TypeOf((*MockQualityStorage)(nil).GetQualityProfileItem), ctx, id)
}

// ListQualityDefinitions mocks base method.
func (m *MockQualityStorage) ListQualityDefinitions(ctx context.Context) ([]*model.QualityDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityDefinitions", ctx)
	ret0, _ := ret[0].([]*model.QualityDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityDefinitions indicates an expected call of ListQualityDefinitions.
func (mr *MockQualityStorageMockRecorder) ListQualityDefinitions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityDefinitions", reflect.TypeOf((*MockQualityStorage)(nil).ListQualityDefinitions), ctx)
}

// ListQualityProfileItems mocks base method.
func (m *MockQualityStorage) ListQualityProfileItems(ctx context.Context) ([]*model.QualityProfileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfileItems", ctx)
	ret0, _ := ret[0].([]*model.QualityProfileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfileItems indicates an expected call of ListQualityProfileItems.
func (mr *MockQualityStorageMockRecorder) ListQualityProfileItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfileItems", reflect.TypeOf((*MockQualityStorage)(nil).ListQualityProfileItems), ctx)
}

// ListQualityProfiles mocks base method.
func (m *MockQualityStorage) ListQualityProfiles(ctx context.Context) ([]*storage.QualityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQualityProfiles", ctx)
	ret0, _ := ret[0].([]*storage.QualityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQualityProfiles indicates an expected call of ListQualityProfiles.
func (mr *MockQualityStorageMockRecorder) ListQualityProfiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQualityProfiles", reflect.TypeOf((*MockQualityStorage)(nil).ListQualityProfiles), ctx)
}

// MockMovieStorage is a mock of MovieStorage interface.
type MockMovieStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMovieStorageMockRecorder
}

// MockMovieStorageMockRecorder is the mock recorder for MockMovieStorage.
type MockMovieStorageMockRecorder struct {
	mock *MockMovieStorage
}

// NewMockMovieStorage creates a new mock instance.
func NewMockMovieStorage(ctrl *gomock.Controller) *MockMovieStorage {
	mock := &MockMovieStorage{ctrl: ctrl}
	mock.recorder = &MockMovieStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieStorage) EXPECT() *MockMovieStorageMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieStorage) CreateMovie(ctx context.Context, movie storage.Movie, state storage.MovieState) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, movie, state)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieStorageMockRecorder) CreateMovie(ctx, movie, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieStorage)(nil).CreateMovie), ctx, movie, state)
}

// CreateMovieFile mocks base method.
func (m *MockMovieStorage) CreateMovieFile(ctx context.Context, movieFile model.MovieFile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieFile", ctx, movieFile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieFile indicates an expected call of CreateMovieFile.
func (mr *MockMovieStorageMockRecorder) CreateMovieFile(ctx, movieFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieFile", reflect.TypeOf((*MockMovieStorage)(nil).CreateMovieFile), ctx, movieFile)
}

// DeleteMovie mocks base method.
func (m *MockMovieStorage) DeleteMovie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieStorageMockRecorder) DeleteMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieStorage)(nil).DeleteMovie), ctx, id)
}

// DeleteMovieFile mocks base method.
func (m *MockMovieStorage) DeleteMovieFile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieFile indicates an expected call of DeleteMovieFile.
func (mr *MockMovieStorageMockRecorder) DeleteMovieFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFile", reflect.TypeOf((*MockMovieStorage)(nil).DeleteMovieFile), ctx, id)
}

// GetMovie mocks base method.
func (m *MockMovieStorage) GetMovie(ctx context.Context, id int64) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, id)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieStorageMockRecorder) GetMovie(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieStorage)(nil).GetMovie), ctx, id)
}

// GetMovieByMetadataID mocks base method.
func (m *MockMovieStorage) GetMovieByMetadataID(ctx context.Context, metadataID int) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByMetadataID", ctx, metadataID)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByMetadataID indicates an expected call of GetMovieByMetadataID.
func (mr *MockMovieStorageMockRecorder) GetMovieByMetadataID(ctx, metadataID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByMetadataID", reflect.TypeOf((*MockMovieStorage)(nil).GetMovieByMetadataID), ctx, metadataID)
}

// GetMovieByMovieFileID mocks base method.
func (m *MockMovieStorage) GetMovieByMovieFileID(ctx context.Context, fileID int64) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByMovieFileID", ctx, fileID)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByMovieFileID indicates an expected call of GetMovieByMovieFileID.
func (mr *MockMovieStorageMockRecorder) GetMovieByMovieFileID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByMovieFileID", reflect.TypeOf((*MockMovieStorage)(nil).GetMovieByMovieFileID), ctx, fileID)
}

// GetMovieByPath mocks base method.
func (m *MockMovieStorage) GetMovieByPath(ctx context.Context, path string) (*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByPath", ctx, path)
	ret0, _ := ret[0].(*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByPath indicates an expected call of GetMovieByPath.
func (mr *MockMovieStorageMockRecorder) GetMovieByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByPath", reflect.TypeOf((*MockMovieStorage)(nil).GetMovieByPath), ctx, path)
}

// GetMovieFilesByMovieName mocks base method.
func (m *MockMovieStorage) GetMovieFilesByMovieName(ctx context.Context, name string) ([]*model.MovieFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieFilesByMovieName", ctx, name)
	ret0, _ := ret[0].([]*model.MovieFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieFilesByMovieName indicates an expected call of GetMovieFilesByMovieName.
func (mr *MockMovieStorageMockRecorder) GetMovieFilesByMovieName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieFilesByMovieName", reflect.TypeOf((*MockMovieStorage)(nil).GetMovieFilesByMovieName), ctx, name)
}

// ListMovieFiles mocks base method.
func (m *MockMovieStorage) ListMovieFiles(ctx context.Context) ([]*model.MovieFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieFiles", ctx)
	ret0, _ := ret[0].([]*model.MovieFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieFiles indicates an expected call of ListMovieFiles.
func (mr *MockMovieStorageMockRecorder) ListMovieFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieFiles", reflect.TypeOf((*MockMovieStorage)(nil).ListMovieFiles), ctx)
}

// ListMovies mocks base method.
func (m *MockMovieStorage) ListMovies(ctx context.Context) ([]*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", ctx)
	ret0, _ := ret[0].([]*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockMovieStorageMockRecorder) ListMovies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockMovieStorage)(nil).ListMovies), ctx)
}

// ListMoviesByState mocks base method.
func (m *MockMovieStorage) ListMoviesByState(ctx context.Context, state storage.MovieState) ([]*storage.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMoviesByState", ctx, state)
	ret0, _ := ret[0].([]*storage.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMoviesByState indicates an expected call of ListMoviesByState.
func (mr *MockMovieStorageMockRecorder) ListMoviesByState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMoviesByState", reflect.TypeOf((*MockMovieStorage)(nil).ListMoviesByState), ctx, state)
}

// UpdateMovieMovieFileID mocks base method.
func (m *MockMovieStorage) UpdateMovieMovieFileID(ctx context.Context, id, fileID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovieMovieFileID", ctx, id, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovieMovieFileID indicates an expected call of UpdateMovieMovieFileID.
func (mr *MockMovieStorageMockRecorder) UpdateMovieMovieFileID(ctx, id, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovieMovieFileID", reflect.TypeOf((*MockMovieStorage)(nil).UpdateMovieMovieFileID), ctx, id, fileID)
}

// UpdateMovieState mocks base method.
func (m *MockMovieStorage) UpdateMovieState(ctx context.Context, id int64, state storage.MovieState, metadata *storage.MovieStateMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovieState", ctx, id, state, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovieState indicates an expected call of UpdateMovieState.
func (mr *MockMovieStorageMockRecorder) UpdateMovieState(ctx, id, state, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovieState", reflect.TypeOf((*MockMovieStorage)(nil).UpdateMovieState), ctx, id, state, metadata)
}

// MockMovieMetadataStorage is a mock of MovieMetadataStorage interface.
type MockMovieMetadataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMovieMetadataStorageMockRecorder
}

// MockMovieMetadataStorageMockRecorder is the mock recorder for MockMovieMetadataStorage.
type MockMovieMetadataStorageMockRecorder struct {
	mock *MockMovieMetadataStorage
}

// NewMockMovieMetadataStorage creates a new mock instance.
func NewMockMovieMetadataStorage(ctrl *gomock.Controller) *MockMovieMetadataStorage {
	mock := &MockMovieMetadataStorage{ctrl: ctrl}
	mock.recorder = &MockMovieMetadataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieMetadataStorage) EXPECT() *MockMovieMetadataStorageMockRecorder {
	return m.recorder
}

// CreateMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) CreateMovieMetadata(ctx context.Context, movieMeta model.MovieMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieMetadata", ctx, movieMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovieMetadata indicates an expected call of CreateMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) CreateMovieMetadata(ctx, movieMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).CreateMovieMetadata), ctx, movieMeta)
}

// DeleteMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) DeleteMovieMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieMetadata indicates an expected call of DeleteMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) DeleteMovieMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).DeleteMovieMetadata), ctx, id)
}

// GetMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) GetMovieMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieMetadata", ctx, where)
	ret0, _ := ret[0].(*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieMetadata indicates an expected call of GetMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) GetMovieMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).GetMovieMetadata), ctx, where)
}

// ListMovieMetadata mocks base method.
func (m *MockMovieMetadataStorage) ListMovieMetadata(ctx context.Context) ([]*model.MovieMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovieMetadata", ctx)
	ret0, _ := ret[0].([]*model.MovieMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovieMetadata indicates an expected call of ListMovieMetadata.
func (mr *MockMovieMetadataStorageMockRecorder) ListMovieMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovieMetadata", reflect.TypeOf((*MockMovieMetadataStorage)(nil).ListMovieMetadata), ctx)
}

// MockSeriesMetadataStorage is a mock of SeriesMetadataStorage interface.
type MockSeriesMetadataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSeriesMetadataStorageMockRecorder
}

// MockSeriesMetadataStorageMockRecorder is the mock recorder for MockSeriesMetadataStorage.
type MockSeriesMetadataStorageMockRecorder struct {
	mock *MockSeriesMetadataStorage
}

// NewMockSeriesMetadataStorage creates a new mock instance.
func NewMockSeriesMetadataStorage(ctrl *gomock.Controller) *MockSeriesMetadataStorage {
	mock := &MockSeriesMetadataStorage{ctrl: ctrl}
	mock.recorder = &MockSeriesMetadataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeriesMetadataStorage) EXPECT() *MockSeriesMetadataStorageMockRecorder {
	return m.recorder
}

// GetSeriesMetadata mocks base method.
func (m *MockSeriesMetadataStorage) GetSeriesMetadata(ctx context.Context, where sqlite.BoolExpression) (*storage.SeriesMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeriesMetadata", ctx, where)
	ret0, _ := ret[0].(*storage.SeriesMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesMetadata indicates an expected call of GetSeriesMetadata.
func (mr *MockSeriesMetadataStorageMockRecorder) GetSeriesMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesMetadata", reflect.TypeOf((*MockSeriesMetadataStorage)(nil).GetSeriesMetadata), ctx, where)
}

// MockDownloadClientStorage is a mock of DownloadClientStorage interface.
type MockDownloadClientStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadClientStorageMockRecorder
}

// MockDownloadClientStorageMockRecorder is the mock recorder for MockDownloadClientStorage.
type MockDownloadClientStorageMockRecorder struct {
	mock *MockDownloadClientStorage
}

// NewMockDownloadClientStorage creates a new mock instance.
func NewMockDownloadClientStorage(ctrl *gomock.Controller) *MockDownloadClientStorage {
	mock := &MockDownloadClientStorage{ctrl: ctrl}
	mock.recorder = &MockDownloadClientStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadClientStorage) EXPECT() *MockDownloadClientStorageMockRecorder {
	return m.recorder
}

// CreateDownloadClient mocks base method.
func (m *MockDownloadClientStorage) CreateDownloadClient(ctx context.Context, client model.DownloadClient) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDownloadClient", ctx, client)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDownloadClient indicates an expected call of CreateDownloadClient.
func (mr *MockDownloadClientStorageMockRecorder) CreateDownloadClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDownloadClient", reflect.TypeOf((*MockDownloadClientStorage)(nil).CreateDownloadClient), ctx, client)
}

// DeleteDownloadClient mocks base method.
func (m *MockDownloadClientStorage) DeleteDownloadClient(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDownloadClient", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDownloadClient indicates an expected call of DeleteDownloadClient.
func (mr *MockDownloadClientStorageMockRecorder) DeleteDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDownloadClient", reflect.TypeOf((*MockDownloadClientStorage)(nil).DeleteDownloadClient), ctx, id)
}

// GetDownloadClient mocks base method.
func (m *MockDownloadClientStorage) GetDownloadClient(ctx context.Context, id int64) (model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadClient", ctx, id)
	ret0, _ := ret[0].(model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadClient indicates an expected call of GetDownloadClient.
func (mr *MockDownloadClientStorageMockRecorder) GetDownloadClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadClient", reflect.TypeOf((*MockDownloadClientStorage)(nil).GetDownloadClient), ctx, id)
}

// ListDownloadClients mocks base method.
func (m *MockDownloadClientStorage) ListDownloadClients(ctx context.Context) ([]*model.DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownloadClients", ctx)
	ret0, _ := ret[0].([]*model.DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDownloadClients indicates an expected call of ListDownloadClients.
func (mr *MockDownloadClientStorageMockRecorder) ListDownloadClients(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownloadClients", reflect.TypeOf((*MockDownloadClientStorage)(nil).ListDownloadClients), ctx)
}

// MockShowStorage is a mock of ShowStorage interface.
type MockShowStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShowStorageMockRecorder
}

// MockShowStorageMockRecorder is the mock recorder for MockShowStorage.
type MockShowStorageMockRecorder struct {
	mock *MockShowStorage
}

// NewMockShowStorage creates a new mock instance.
func NewMockShowStorage(ctrl *gomock.Controller) *MockShowStorage {
	mock := &MockShowStorage{ctrl: ctrl}
	mock.recorder = &MockShowStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShowStorage) EXPECT() *MockShowStorageMockRecorder {
	return m.recorder
}

// CreateEpisode mocks base method.
func (m *MockShowStorage) CreateEpisode(ctx context.Context, episode storage.Episode, state storage.EpisodeState) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEpisode", ctx, episode, state)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisode indicates an expected call of CreateEpisode.
func (mr *MockShowStorageMockRecorder) CreateEpisode(ctx, episode, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisode", reflect.TypeOf((*MockShowStorage)(nil).CreateEpisode), ctx, episode, state)
}

// CreateEpisodeFile mocks base method.
func (m *MockShowStorage) CreateEpisodeFile(ctx context.Context, episodeFile model.EpisodeFile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEpisodeFile", ctx, episodeFile)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisodeFile indicates an expected call of CreateEpisodeFile.
func (mr *MockShowStorageMockRecorder) CreateEpisodeFile(ctx, episodeFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisodeFile", reflect.TypeOf((*MockShowStorage)(nil).CreateEpisodeFile), ctx, episodeFile)
}

// CreateSeason mocks base method.
func (m *MockShowStorage) CreateSeason(ctx context.Context, season model.Season) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeason", ctx, season)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeason indicates an expected call of CreateSeason.
func (mr *MockShowStorageMockRecorder) CreateSeason(ctx, season any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeason", reflect.TypeOf((*MockShowStorage)(nil).CreateSeason), ctx, season)
}

// CreateShow mocks base method.
func (m *MockShowStorage) CreateShow(ctx context.Context, show model.Series) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShow", ctx, show)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShow indicates an expected call of CreateShow.
func (mr *MockShowStorageMockRecorder) CreateShow(ctx, show any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShow", reflect.TypeOf((*MockShowStorage)(nil).CreateShow), ctx, show)
}

// DeleteEpisode mocks base method.
func (m *MockShowStorage) DeleteEpisode(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEpisode", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEpisode indicates an expected call of DeleteEpisode.
func (mr *MockShowStorageMockRecorder) DeleteEpisode(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisode", reflect.TypeOf((*MockShowStorage)(nil).DeleteEpisode), ctx, id)
}

// DeleteEpisodeFile mocks base method.
func (m *MockShowStorage) DeleteEpisodeFile(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEpisodeFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEpisodeFile indicates an expected call of DeleteEpisodeFile.
func (mr *MockShowStorageMockRecorder) DeleteEpisodeFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisodeFile", reflect.TypeOf((*MockShowStorage)(nil).DeleteEpisodeFile), ctx, id)
}

// DeleteSeason mocks base method.
func (m *MockShowStorage) DeleteSeason(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeason", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeason indicates an expected call of DeleteSeason.
func (mr *MockShowStorageMockRecorder) DeleteSeason(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeason", reflect.TypeOf((*MockShowStorage)(nil).DeleteSeason), ctx, id)
}

// DeleteShow mocks base method.
func (m *MockShowStorage) DeleteShow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShow indicates an expected call of DeleteShow.
func (mr *MockShowStorageMockRecorder) DeleteShow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShow", reflect.TypeOf((*MockShowStorage)(nil).DeleteShow), ctx, id)
}

// GetEpisode mocks base method.
func (m *MockShowStorage) GetEpisode(ctx context.Context, id int64) (*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisode", ctx, id)
	ret0, _ := ret[0].(*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisode indicates an expected call of GetEpisode.
func (mr *MockShowStorageMockRecorder) GetEpisode(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisode", reflect.TypeOf((*MockShowStorage)(nil).GetEpisode), ctx, id)
}

// GetEpisodeByEpisodeFileID mocks base method.
func (m *MockShowStorage) GetEpisodeByEpisodeFileID(ctx context.Context, fileID int64) (*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisodeByEpisodeFileID", ctx, fileID)
	ret0, _ := ret[0].(*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisodeByEpisodeFileID indicates an expected call of GetEpisodeByEpisodeFileID.
func (mr *MockShowStorageMockRecorder) GetEpisodeByEpisodeFileID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisodeByEpisodeFileID", reflect.TypeOf((*MockShowStorage)(nil).GetEpisodeByEpisodeFileID), ctx, fileID)
}

// GetEpisodeFiles mocks base method.
func (m *MockShowStorage) GetEpisodeFiles(ctx context.Context, id int64) ([]*model.EpisodeFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisodeFiles", ctx, id)
	ret0, _ := ret[0].([]*model.EpisodeFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisodeFiles indicates an expected call of GetEpisodeFiles.
func (mr *MockShowStorageMockRecorder) GetEpisodeFiles(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisodeFiles", reflect.TypeOf((*MockShowStorage)(nil).GetEpisodeFiles), ctx, id)
}

// GetSeason mocks base method.
func (m *MockShowStorage) GetSeason(ctx context.Context, id int64) (*model.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeason", ctx, id)
	ret0, _ := ret[0].(*model.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeason indicates an expected call of GetSeason.
func (mr *MockShowStorageMockRecorder) GetSeason(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeason", reflect.TypeOf((*MockShowStorage)(nil).GetSeason), ctx, id)
}

// GetShow mocks base method.
func (m *MockShowStorage) GetShow(ctx context.Context, id int64) (*model.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShow", ctx, id)
	ret0, _ := ret[0].(*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShow indicates an expected call of GetShow.
func (mr *MockShowStorageMockRecorder) GetShow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShow", reflect.TypeOf((*MockShowStorage)(nil).GetShow), ctx, id)
}

// ListEpisodeFiles mocks base method.
func (m *MockShowStorage) ListEpisodeFiles(ctx context.Context) ([]*model.EpisodeFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodeFiles", ctx)
	ret0, _ := ret[0].([]*model.EpisodeFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodeFiles indicates an expected call of ListEpisodeFiles.
func (mr *MockShowStorageMockRecorder) ListEpisodeFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodeFiles", reflect.TypeOf((*MockShowStorage)(nil).ListEpisodeFiles), ctx)
}

// ListEpisodes mocks base method.
func (m *MockShowStorage) ListEpisodes(ctx context.Context, seasonID int64) ([]*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodes", ctx, seasonID)
	ret0, _ := ret[0].([]*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodes indicates an expected call of ListEpisodes.
func (mr *MockShowStorageMockRecorder) ListEpisodes(ctx, seasonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodes", reflect.TypeOf((*MockShowStorage)(nil).ListEpisodes), ctx, seasonID)
}

// ListEpisodesByState mocks base method.
func (m *MockShowStorage) ListEpisodesByState(ctx context.Context, state storage.EpisodeState) ([]*storage.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodesByState", ctx, state)
	ret0, _ := ret[0].([]*storage.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodesByState indicates an expected call of ListEpisodesByState.
func (mr *MockShowStorageMockRecorder) ListEpisodesByState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodesByState", reflect.TypeOf((*MockShowStorage)(nil).ListEpisodesByState), ctx, state)
}

// ListSeasons mocks base method.
func (m *MockShowStorage) ListSeasons(ctx context.Context, showID int64) ([]*model.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeasons", ctx, showID)
	ret0, _ := ret[0].([]*model.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeasons indicates an expected call of ListSeasons.
func (mr *MockShowStorageMockRecorder) ListSeasons(ctx, showID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeasons", reflect.TypeOf((*MockShowStorage)(nil).ListSeasons), ctx, showID)
}

// ListShows mocks base method.
func (m *MockShowStorage) ListShows(ctx context.Context) ([]*model.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShows", ctx)
	ret0, _ := ret[0].([]*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShows indicates an expected call of ListShows.
func (mr *MockShowStorageMockRecorder) ListShows(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShows", reflect.TypeOf((*MockShowStorage)(nil).ListShows), ctx)
}

// UpdateEpisodeEpisodeFileID mocks base method.
func (m *MockShowStorage) UpdateEpisodeEpisodeFileID(ctx context.Context, id, fileID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEpisodeEpisodeFileID", ctx, id, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEpisodeEpisodeFileID indicates an expected call of UpdateEpisodeEpisodeFileID.
func (mr *MockShowStorageMockRecorder) UpdateEpisodeEpisodeFileID(ctx, id, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpisodeEpisodeFileID", reflect.TypeOf((*MockShowStorage)(nil).UpdateEpisodeEpisodeFileID), ctx, id, fileID)
}

// MockShowMetadataStorage is a mock of ShowMetadataStorage interface.
type MockShowMetadataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShowMetadataStorageMockRecorder
}

// MockShowMetadataStorageMockRecorder is the mock recorder for MockShowMetadataStorage.
type MockShowMetadataStorageMockRecorder struct {
	mock *MockShowMetadataStorage
}

// NewMockShowMetadataStorage creates a new mock instance.
func NewMockShowMetadataStorage(ctrl *gomock.Controller) *MockShowMetadataStorage {
	mock := &MockShowMetadataStorage{ctrl: ctrl}
	mock.recorder = &MockShowMetadataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShowMetadataStorage) EXPECT() *MockShowMetadataStorageMockRecorder {
	return m.recorder
}

// CreateEpisodeMetadata mocks base method.
func (m *MockShowMetadataStorage) CreateEpisodeMetadata(ctx context.Context, episodeMeta model.EpisodeMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEpisodeMetadata", ctx, episodeMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisodeMetadata indicates an expected call of CreateEpisodeMetadata.
func (mr *MockShowMetadataStorageMockRecorder) CreateEpisodeMetadata(ctx, episodeMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisodeMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).CreateEpisodeMetadata), ctx, episodeMeta)
}

// CreateSeasonMetadata mocks base method.
func (m *MockShowMetadataStorage) CreateSeasonMetadata(ctx context.Context, seasonMeta model.SeasonMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeasonMetadata", ctx, seasonMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeasonMetadata indicates an expected call of CreateSeasonMetadata.
func (mr *MockShowMetadataStorageMockRecorder) CreateSeasonMetadata(ctx, seasonMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeasonMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).CreateSeasonMetadata), ctx, seasonMeta)
}

// CreateShowMetadata mocks base method.
func (m *MockShowMetadataStorage) CreateShowMetadata(ctx context.Context, showMeta model.SeriesMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShowMetadata", ctx, showMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShowMetadata indicates an expected call of CreateShowMetadata.
func (mr *MockShowMetadataStorageMockRecorder) CreateShowMetadata(ctx, showMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShowMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).CreateShowMetadata), ctx, showMeta)
}

// DeleteEpisodeMetadata mocks base method.
func (m *MockShowMetadataStorage) DeleteEpisodeMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEpisodeMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEpisodeMetadata indicates an expected call of DeleteEpisodeMetadata.
func (mr *MockShowMetadataStorageMockRecorder) DeleteEpisodeMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisodeMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).DeleteEpisodeMetadata), ctx, id)
}

// DeleteSeasonMetadata mocks base method.
func (m *MockShowMetadataStorage) DeleteSeasonMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeasonMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeasonMetadata indicates an expected call of DeleteSeasonMetadata.
func (mr *MockShowMetadataStorageMockRecorder) DeleteSeasonMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeasonMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).DeleteSeasonMetadata), ctx, id)
}

// DeleteShowMetadata mocks base method.
func (m *MockShowMetadataStorage) DeleteShowMetadata(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShowMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShowMetadata indicates an expected call of DeleteShowMetadata.
func (mr *MockShowMetadataStorageMockRecorder) DeleteShowMetadata(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShowMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).DeleteShowMetadata), ctx, id)
}

// GetEpisodeMetadata mocks base method.
func (m *MockShowMetadataStorage) GetEpisodeMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.EpisodeMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisodeMetadata", ctx, where)
	ret0, _ := ret[0].(*model.EpisodeMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpisodeMetadata indicates an expected call of GetEpisodeMetadata.
func (mr *MockShowMetadataStorageMockRecorder) GetEpisodeMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisodeMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).GetEpisodeMetadata), ctx, where)
}

// GetSeasonMetadata mocks base method.
func (m *MockShowMetadataStorage) GetSeasonMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.SeasonMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeasonMetadata", ctx, where)
	ret0, _ := ret[0].(*model.SeasonMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeasonMetadata indicates an expected call of GetSeasonMetadata.
func (mr *MockShowMetadataStorageMockRecorder) GetSeasonMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeasonMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).GetSeasonMetadata), ctx, where)
}

// GetShowMetadata mocks base method.
func (m *MockShowMetadataStorage) GetShowMetadata(ctx context.Context, where sqlite.BoolExpression) (*model.SeriesMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShowMetadata", ctx, where)
	ret0, _ := ret[0].(*model.SeriesMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShowMetadata indicates an expected call of GetShowMetadata.
func (mr *MockShowMetadataStorageMockRecorder) GetShowMetadata(ctx, where any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShowMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).GetShowMetadata), ctx, where)
}

// ListEpisodeMetadata mocks base method.
func (m *MockShowMetadataStorage) ListEpisodeMetadata(ctx context.Context) ([]*model.EpisodeMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEpisodeMetadata", ctx)
	ret0, _ := ret[0].([]*model.EpisodeMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEpisodeMetadata indicates an expected call of ListEpisodeMetadata.
func (mr *MockShowMetadataStorageMockRecorder) ListEpisodeMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEpisodeMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).ListEpisodeMetadata), ctx)
}

// ListSeasonMetadata mocks base method.
func (m *MockShowMetadataStorage) ListSeasonMetadata(ctx context.Context) ([]*model.SeasonMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeasonMetadata", ctx)
	ret0, _ := ret[0].([]*model.SeasonMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeasonMetadata indicates an expected call of ListSeasonMetadata.
func (mr *MockShowMetadataStorageMockRecorder) ListSeasonMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeasonMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).ListSeasonMetadata), ctx)
}

// ListShowMetadata mocks base method.
func (m *MockShowMetadataStorage) ListShowMetadata(ctx context.Context) ([]*model.SeriesMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShowMetadata", ctx)
	ret0, _ := ret[0].([]*model.SeriesMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShowMetadata indicates an expected call of ListShowMetadata.
func (mr *MockShowMetadataStorageMockRecorder) ListShowMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShowMetadata", reflect.TypeOf((*MockShowMetadataStorage)(nil).ListShowMetadata), ctx)
}
