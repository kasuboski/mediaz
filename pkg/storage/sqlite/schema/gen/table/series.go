//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Series = newSeriesTable("", "series", "")

type seriesTable struct {
	sqlite.Table

	// Columns
	ID               sqlite.ColumnInteger
	Path             sqlite.ColumnString
	Monitored        sqlite.ColumnInteger
	Added            sqlite.ColumnTimestamp
	QualityProfileID sqlite.ColumnInteger
	SeriesMetadataID sqlite.ColumnInteger
	LastSearchTime   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type SeriesTable struct {
	seriesTable

	EXCLUDED seriesTable
}

// AS creates new SeriesTable with assigned alias
func (a SeriesTable) AS(alias string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeriesTable with assigned schema name
func (a SeriesTable) FromSchema(schemaName string) *SeriesTable {
	return newSeriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeriesTable with assigned table prefix
func (a SeriesTable) WithPrefix(prefix string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeriesTable with assigned table suffix
func (a SeriesTable) WithSuffix(suffix string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeriesTable(schemaName, tableName, alias string) *SeriesTable {
	return &SeriesTable{
		seriesTable: newSeriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newSeriesTableImpl("", "excluded", ""),
	}
}

func newSeriesTableImpl(schemaName, tableName, alias string) seriesTable {
	var (
		IDColumn               = sqlite.IntegerColumn("id")
		PathColumn             = sqlite.StringColumn("path")
		MonitoredColumn        = sqlite.IntegerColumn("monitored")
		AddedColumn            = sqlite.TimestampColumn("added")
		QualityProfileIDColumn = sqlite.IntegerColumn("quality_profile_id")
		SeriesMetadataIDColumn = sqlite.IntegerColumn("series_metadata_id")
		LastSearchTimeColumn   = sqlite.TimestampColumn("last_search_time")
		allColumns             = sqlite.ColumnList{IDColumn, PathColumn, MonitoredColumn, AddedColumn, QualityProfileIDColumn, SeriesMetadataIDColumn, LastSearchTimeColumn}
		mutableColumns         = sqlite.ColumnList{PathColumn, MonitoredColumn, AddedColumn, QualityProfileIDColumn, SeriesMetadataIDColumn, LastSearchTimeColumn}
	)

	return seriesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Path:             PathColumn,
		Monitored:        MonitoredColumn,
		Added:            AddedColumn,
		QualityProfileID: QualityProfileIDColumn,
		SeriesMetadataID: SeriesMetadataIDColumn,
		LastSearchTime:   LastSearchTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
