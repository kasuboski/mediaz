//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Indexers = newIndexersTable("", "Indexers", "")

type indexersTable struct {
	sqlite.Table

	// Columns
	ID       sqlite.ColumnInteger
	Name     sqlite.ColumnString
	Priority sqlite.ColumnInteger
	URI      sqlite.ColumnString
	ApiKey   sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type IndexersTable struct {
	indexersTable

	EXCLUDED indexersTable
}

// AS creates new IndexersTable with assigned alias
func (a IndexersTable) AS(alias string) *IndexersTable {
	return newIndexersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IndexersTable with assigned schema name
func (a IndexersTable) FromSchema(schemaName string) *IndexersTable {
	return newIndexersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IndexersTable with assigned table prefix
func (a IndexersTable) WithPrefix(prefix string) *IndexersTable {
	return newIndexersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IndexersTable with assigned table suffix
func (a IndexersTable) WithSuffix(suffix string) *IndexersTable {
	return newIndexersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIndexersTable(schemaName, tableName, alias string) *IndexersTable {
	return &IndexersTable{
		indexersTable: newIndexersTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newIndexersTableImpl("", "excluded", ""),
	}
}

func newIndexersTableImpl(schemaName, tableName, alias string) indexersTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		NameColumn     = sqlite.StringColumn("Name")
		PriorityColumn = sqlite.IntegerColumn("Priority")
		URIColumn      = sqlite.StringColumn("URI")
		ApiKeyColumn   = sqlite.StringColumn("apiKey")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn, PriorityColumn, URIColumn, ApiKeyColumn}
		mutableColumns = sqlite.ColumnList{NameColumn, PriorityColumn, URIColumn, ApiKeyColumn}
	)

	return indexersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Name:     NameColumn,
		Priority: PriorityColumn,
		URI:      URIColumn,
		ApiKey:   ApiKeyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
