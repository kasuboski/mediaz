//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Movie = newMovieTable("", "movie", "")

type movieTable struct {
	sqlite.Table

	// Columns
	ID                  sqlite.ColumnInteger
	Path                sqlite.ColumnString
	Monitored           sqlite.ColumnInteger
	QualityProfileID    sqlite.ColumnInteger
	Added               sqlite.ColumnTimestamp
	Tags                sqlite.ColumnString
	AddOptions          sqlite.ColumnString
	MovieFileID         sqlite.ColumnInteger
	MinimumAvailability sqlite.ColumnInteger
	MovieMetadataID     sqlite.ColumnInteger
	LastSearchTime      sqlite.ColumnTimestamp
	DownloadClientID    sqlite.ColumnInteger
	DownloadID          sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MovieTable struct {
	movieTable

	EXCLUDED movieTable
}

// AS creates new MovieTable with assigned alias
func (a MovieTable) AS(alias string) *MovieTable {
	return newMovieTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MovieTable with assigned schema name
func (a MovieTable) FromSchema(schemaName string) *MovieTable {
	return newMovieTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MovieTable with assigned table prefix
func (a MovieTable) WithPrefix(prefix string) *MovieTable {
	return newMovieTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MovieTable with assigned table suffix
func (a MovieTable) WithSuffix(suffix string) *MovieTable {
	return newMovieTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMovieTable(schemaName, tableName, alias string) *MovieTable {
	return &MovieTable{
		movieTable: newMovieTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newMovieTableImpl("", "excluded", ""),
	}
}

func newMovieTableImpl(schemaName, tableName, alias string) movieTable {
	var (
		IDColumn                  = sqlite.IntegerColumn("id")
		PathColumn                = sqlite.StringColumn("path")
		MonitoredColumn           = sqlite.IntegerColumn("monitored")
		QualityProfileIDColumn    = sqlite.IntegerColumn("quality_profile_id")
		AddedColumn               = sqlite.TimestampColumn("added")
		TagsColumn                = sqlite.StringColumn("tags")
		AddOptionsColumn          = sqlite.StringColumn("add_options")
		MovieFileIDColumn         = sqlite.IntegerColumn("movie_file_id")
		MinimumAvailabilityColumn = sqlite.IntegerColumn("minimum_availability")
		MovieMetadataIDColumn     = sqlite.IntegerColumn("movie_metadata_id")
		LastSearchTimeColumn      = sqlite.TimestampColumn("last_search_time")
		DownloadClientIDColumn    = sqlite.IntegerColumn("download_client_id")
		DownloadIDColumn          = sqlite.StringColumn("download_id")
		allColumns                = sqlite.ColumnList{IDColumn, PathColumn, MonitoredColumn, QualityProfileIDColumn, AddedColumn, TagsColumn, AddOptionsColumn, MovieFileIDColumn, MinimumAvailabilityColumn, MovieMetadataIDColumn, LastSearchTimeColumn, DownloadClientIDColumn, DownloadIDColumn}
		mutableColumns            = sqlite.ColumnList{PathColumn, MonitoredColumn, QualityProfileIDColumn, AddedColumn, TagsColumn, AddOptionsColumn, MovieFileIDColumn, MinimumAvailabilityColumn, MovieMetadataIDColumn, LastSearchTimeColumn, DownloadClientIDColumn, DownloadIDColumn}
	)

	return movieTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Path:                PathColumn,
		Monitored:           MonitoredColumn,
		QualityProfileID:    QualityProfileIDColumn,
		Added:               AddedColumn,
		Tags:                TagsColumn,
		AddOptions:          AddOptionsColumn,
		MovieFileID:         MovieFileIDColumn,
		MinimumAvailability: MinimumAvailabilityColumn,
		MovieMetadataID:     MovieMetadataIDColumn,
		LastSearchTime:      LastSearchTimeColumn,
		DownloadClientID:    DownloadClientIDColumn,
		DownloadID:          DownloadIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
