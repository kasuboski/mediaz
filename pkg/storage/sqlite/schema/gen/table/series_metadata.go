//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var SeriesMetadata = newSeriesMetadataTable("", "series_metadata", "")

type seriesMetadataTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	TmdbID       sqlite.ColumnInteger
	Title        sqlite.ColumnString
	Overview     sqlite.ColumnString
	LastInfoSync sqlite.ColumnTimestamp
	FirstAirDate sqlite.ColumnTimestamp
	LastAirDate  sqlite.ColumnTimestamp
	SeasonCount  sqlite.ColumnInteger
	EpisodeCount sqlite.ColumnInteger
	Status       sqlite.ColumnString
	PosterPath   sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type SeriesMetadataTable struct {
	seriesMetadataTable

	EXCLUDED seriesMetadataTable
}

// AS creates new SeriesMetadataTable with assigned alias
func (a SeriesMetadataTable) AS(alias string) *SeriesMetadataTable {
	return newSeriesMetadataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeriesMetadataTable with assigned schema name
func (a SeriesMetadataTable) FromSchema(schemaName string) *SeriesMetadataTable {
	return newSeriesMetadataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeriesMetadataTable with assigned table prefix
func (a SeriesMetadataTable) WithPrefix(prefix string) *SeriesMetadataTable {
	return newSeriesMetadataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeriesMetadataTable with assigned table suffix
func (a SeriesMetadataTable) WithSuffix(suffix string) *SeriesMetadataTable {
	return newSeriesMetadataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeriesMetadataTable(schemaName, tableName, alias string) *SeriesMetadataTable {
	return &SeriesMetadataTable{
		seriesMetadataTable: newSeriesMetadataTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSeriesMetadataTableImpl("", "excluded", ""),
	}
}

func newSeriesMetadataTableImpl(schemaName, tableName, alias string) seriesMetadataTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		TmdbIDColumn       = sqlite.IntegerColumn("tmdb_id")
		TitleColumn        = sqlite.StringColumn("title")
		OverviewColumn     = sqlite.StringColumn("overview")
		LastInfoSyncColumn = sqlite.TimestampColumn("last_info_sync")
		FirstAirDateColumn = sqlite.TimestampColumn("first_air_date")
		LastAirDateColumn  = sqlite.TimestampColumn("last_air_date")
		SeasonCountColumn  = sqlite.IntegerColumn("season_count")
		EpisodeCountColumn = sqlite.IntegerColumn("episode_count")
		StatusColumn       = sqlite.StringColumn("status")
		PosterPathColumn   = sqlite.StringColumn("poster_path")
		allColumns         = sqlite.ColumnList{IDColumn, TmdbIDColumn, TitleColumn, OverviewColumn, LastInfoSyncColumn, FirstAirDateColumn, LastAirDateColumn, SeasonCountColumn, EpisodeCountColumn, StatusColumn, PosterPathColumn}
		mutableColumns     = sqlite.ColumnList{TmdbIDColumn, TitleColumn, OverviewColumn, LastInfoSyncColumn, FirstAirDateColumn, LastAirDateColumn, SeasonCountColumn, EpisodeCountColumn, StatusColumn, PosterPathColumn}
	)

	return seriesMetadataTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		TmdbID:       TmdbIDColumn,
		Title:        TitleColumn,
		Overview:     OverviewColumn,
		LastInfoSync: LastInfoSyncColumn,
		FirstAirDate: FirstAirDateColumn,
		LastAirDate:  LastAirDateColumn,
		SeasonCount:  SeasonCountColumn,
		EpisodeCount: EpisodeCountColumn,
		Status:       StatusColumn,
		PosterPath:   PosterPathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
