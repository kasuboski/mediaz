//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var QualityItem = newQualityItemTable("", "quality_item", "")

type qualityItemTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	QualityID sqlite.ColumnInteger
	Name      sqlite.ColumnString
	Allowed   sqlite.ColumnBool
	ParentID  sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type QualityItemTable struct {
	qualityItemTable

	EXCLUDED qualityItemTable
}

// AS creates new QualityItemTable with assigned alias
func (a QualityItemTable) AS(alias string) *QualityItemTable {
	return newQualityItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QualityItemTable with assigned schema name
func (a QualityItemTable) FromSchema(schemaName string) *QualityItemTable {
	return newQualityItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QualityItemTable with assigned table prefix
func (a QualityItemTable) WithPrefix(prefix string) *QualityItemTable {
	return newQualityItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QualityItemTable with assigned table suffix
func (a QualityItemTable) WithSuffix(suffix string) *QualityItemTable {
	return newQualityItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQualityItemTable(schemaName, tableName, alias string) *QualityItemTable {
	return &QualityItemTable{
		qualityItemTable: newQualityItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newQualityItemTableImpl("", "excluded", ""),
	}
}

func newQualityItemTableImpl(schemaName, tableName, alias string) qualityItemTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		QualityIDColumn = sqlite.IntegerColumn("quality_id")
		NameColumn      = sqlite.StringColumn("name")
		AllowedColumn   = sqlite.BoolColumn("allowed")
		ParentIDColumn  = sqlite.IntegerColumn("parent_id")
		allColumns      = sqlite.ColumnList{IDColumn, QualityIDColumn, NameColumn, AllowedColumn, ParentIDColumn}
		mutableColumns  = sqlite.ColumnList{QualityIDColumn, NameColumn, AllowedColumn, ParentIDColumn}
	)

	return qualityItemTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		QualityID: QualityIDColumn,
		Name:      NameColumn,
		Allowed:   AllowedColumn,
		ParentID:  ParentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
