//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var EpisodeFile = newEpisodeFileTable("", "episode_file", "")

type episodeFileTable struct {
	sqlite.Table

	// Columns
	ID               sqlite.ColumnInteger
	Quality          sqlite.ColumnString
	Size             sqlite.ColumnInteger
	Added            sqlite.ColumnTimestamp
	RelativePath     sqlite.ColumnString
	OriginalFilePath sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EpisodeFileTable struct {
	episodeFileTable

	EXCLUDED episodeFileTable
}

// AS creates new EpisodeFileTable with assigned alias
func (a EpisodeFileTable) AS(alias string) *EpisodeFileTable {
	return newEpisodeFileTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EpisodeFileTable with assigned schema name
func (a EpisodeFileTable) FromSchema(schemaName string) *EpisodeFileTable {
	return newEpisodeFileTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EpisodeFileTable with assigned table prefix
func (a EpisodeFileTable) WithPrefix(prefix string) *EpisodeFileTable {
	return newEpisodeFileTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EpisodeFileTable with assigned table suffix
func (a EpisodeFileTable) WithSuffix(suffix string) *EpisodeFileTable {
	return newEpisodeFileTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEpisodeFileTable(schemaName, tableName, alias string) *EpisodeFileTable {
	return &EpisodeFileTable{
		episodeFileTable: newEpisodeFileTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newEpisodeFileTableImpl("", "excluded", ""),
	}
}

func newEpisodeFileTableImpl(schemaName, tableName, alias string) episodeFileTable {
	var (
		IDColumn               = sqlite.IntegerColumn("id")
		QualityColumn          = sqlite.StringColumn("quality")
		SizeColumn             = sqlite.IntegerColumn("size")
		AddedColumn            = sqlite.TimestampColumn("added")
		RelativePathColumn     = sqlite.StringColumn("relative_path")
		OriginalFilePathColumn = sqlite.StringColumn("original_file_path")
		allColumns             = sqlite.ColumnList{IDColumn, QualityColumn, SizeColumn, AddedColumn, RelativePathColumn, OriginalFilePathColumn}
		mutableColumns         = sqlite.ColumnList{QualityColumn, SizeColumn, AddedColumn, RelativePathColumn, OriginalFilePathColumn}
	)

	return episodeFileTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Quality:          QualityColumn,
		Size:             SizeColumn,
		Added:            AddedColumn,
		RelativePath:     RelativePathColumn,
		OriginalFilePath: OriginalFilePathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
