//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Show = newShowTable("", "show", "")

type showTable struct {
	sqlite.Table

	// Columns
	ID               sqlite.ColumnInteger
	Monitored        sqlite.ColumnInteger
	QualityProfileID sqlite.ColumnInteger
	Added            sqlite.ColumnTimestamp
	Tags             sqlite.ColumnString
	AddOptions       sqlite.ColumnString
	ShowMetadata     sqlite.ColumnInteger
	LastSearchTime   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ShowTable struct {
	showTable

	EXCLUDED showTable
}

// AS creates new ShowTable with assigned alias
func (a ShowTable) AS(alias string) *ShowTable {
	return newShowTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShowTable with assigned schema name
func (a ShowTable) FromSchema(schemaName string) *ShowTable {
	return newShowTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShowTable with assigned table prefix
func (a ShowTable) WithPrefix(prefix string) *ShowTable {
	return newShowTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShowTable with assigned table suffix
func (a ShowTable) WithSuffix(suffix string) *ShowTable {
	return newShowTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShowTable(schemaName, tableName, alias string) *ShowTable {
	return &ShowTable{
		showTable: newShowTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newShowTableImpl("", "excluded", ""),
	}
}

func newShowTableImpl(schemaName, tableName, alias string) showTable {
	var (
		IDColumn               = sqlite.IntegerColumn("id")
		MonitoredColumn        = sqlite.IntegerColumn("monitored")
		QualityProfileIDColumn = sqlite.IntegerColumn("quality_profile_id")
		AddedColumn            = sqlite.TimestampColumn("added")
		TagsColumn             = sqlite.StringColumn("tags")
		AddOptionsColumn       = sqlite.StringColumn("add_options")
		ShowMetadataColumn     = sqlite.IntegerColumn("show_metadata")
		LastSearchTimeColumn   = sqlite.TimestampColumn("last_search_time")
		allColumns             = sqlite.ColumnList{IDColumn, MonitoredColumn, QualityProfileIDColumn, AddedColumn, TagsColumn, AddOptionsColumn, ShowMetadataColumn, LastSearchTimeColumn}
		mutableColumns         = sqlite.ColumnList{MonitoredColumn, QualityProfileIDColumn, AddedColumn, TagsColumn, AddOptionsColumn, ShowMetadataColumn, LastSearchTimeColumn}
	)

	return showTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Monitored:        MonitoredColumn,
		QualityProfileID: QualityProfileIDColumn,
		Added:            AddedColumn,
		Tags:             TagsColumn,
		AddOptions:       AddOptionsColumn,
		ShowMetadata:     ShowMetadataColumn,
		LastSearchTime:   LastSearchTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
