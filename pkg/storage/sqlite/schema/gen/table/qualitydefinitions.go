//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var QualityDefinitions = newQualityDefinitionsTable("", "QualityDefinitions", "")

type qualityDefinitionsTable struct {
	sqlite.Table

	// Columns
	ID                  sqlite.ColumnInteger
	QualityId           sqlite.ColumnInteger
	QualityDefinitionId sqlite.ColumnInteger
	Name                sqlite.ColumnString
	PreferredSize       sqlite.ColumnInteger
	MinSize             sqlite.ColumnInteger
	MaxSize             sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type QualityDefinitionsTable struct {
	qualityDefinitionsTable

	EXCLUDED qualityDefinitionsTable
}

// AS creates new QualityDefinitionsTable with assigned alias
func (a QualityDefinitionsTable) AS(alias string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QualityDefinitionsTable with assigned schema name
func (a QualityDefinitionsTable) FromSchema(schemaName string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QualityDefinitionsTable with assigned table prefix
func (a QualityDefinitionsTable) WithPrefix(prefix string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QualityDefinitionsTable with assigned table suffix
func (a QualityDefinitionsTable) WithSuffix(suffix string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQualityDefinitionsTable(schemaName, tableName, alias string) *QualityDefinitionsTable {
	return &QualityDefinitionsTable{
		qualityDefinitionsTable: newQualityDefinitionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newQualityDefinitionsTableImpl("", "excluded", ""),
	}
}

func newQualityDefinitionsTableImpl(schemaName, tableName, alias string) qualityDefinitionsTable {
	var (
		IDColumn                  = sqlite.IntegerColumn("Id")
		QualityIdColumn           = sqlite.IntegerColumn("QualityId")
		QualityDefinitionIdColumn = sqlite.IntegerColumn("QualityDefinitionId")
		NameColumn                = sqlite.StringColumn("Name")
		PreferredSizeColumn       = sqlite.IntegerColumn("PreferredSize")
		MinSizeColumn             = sqlite.IntegerColumn("MinSize")
		MaxSizeColumn             = sqlite.IntegerColumn("MaxSize")
		allColumns                = sqlite.ColumnList{IDColumn, QualityIdColumn, QualityDefinitionIdColumn, NameColumn, PreferredSizeColumn, MinSizeColumn, MaxSizeColumn}
		mutableColumns            = sqlite.ColumnList{QualityIdColumn, QualityDefinitionIdColumn, NameColumn, PreferredSizeColumn, MinSizeColumn, MaxSizeColumn}
	)

	return qualityDefinitionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		QualityId:           QualityIdColumn,
		QualityDefinitionId: QualityDefinitionIdColumn,
		Name:                NameColumn,
		PreferredSize:       PreferredSizeColumn,
		MinSize:             MinSizeColumn,
		MaxSize:             MaxSizeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
