//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var QualityProfiles = newQualityProfilesTable("", "QualityProfiles", "")

type qualityProfilesTable struct {
	sqlite.Table

	// Columns
	ID     sqlite.ColumnInteger
	Name   sqlite.ColumnString
	Cutoff sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type QualityProfilesTable struct {
	qualityProfilesTable

	EXCLUDED qualityProfilesTable
}

// AS creates new QualityProfilesTable with assigned alias
func (a QualityProfilesTable) AS(alias string) *QualityProfilesTable {
	return newQualityProfilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QualityProfilesTable with assigned schema name
func (a QualityProfilesTable) FromSchema(schemaName string) *QualityProfilesTable {
	return newQualityProfilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QualityProfilesTable with assigned table prefix
func (a QualityProfilesTable) WithPrefix(prefix string) *QualityProfilesTable {
	return newQualityProfilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QualityProfilesTable with assigned table suffix
func (a QualityProfilesTable) WithSuffix(suffix string) *QualityProfilesTable {
	return newQualityProfilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQualityProfilesTable(schemaName, tableName, alias string) *QualityProfilesTable {
	return &QualityProfilesTable{
		qualityProfilesTable: newQualityProfilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newQualityProfilesTableImpl("", "excluded", ""),
	}
}

func newQualityProfilesTableImpl(schemaName, tableName, alias string) qualityProfilesTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		NameColumn     = sqlite.StringColumn("Name")
		CutoffColumn   = sqlite.IntegerColumn("Cutoff")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn, CutoffColumn}
		mutableColumns = sqlite.ColumnList{NameColumn, CutoffColumn}
	)

	return qualityProfilesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Name:   NameColumn,
		Cutoff: CutoffColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
