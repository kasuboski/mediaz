//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Episode = newEpisodeTable("", "episode", "")

type episodeTable struct {
	sqlite.Table

	// Columns
	ID                sqlite.ColumnInteger
	SeasonID          sqlite.ColumnInteger
	EpisodeNumber     sqlite.ColumnInteger
	Monitored         sqlite.ColumnInteger
	EpisodeMetadataID sqlite.ColumnInteger
	EpisodeFileID     sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EpisodeTable struct {
	episodeTable

	EXCLUDED episodeTable
}

// AS creates new EpisodeTable with assigned alias
func (a EpisodeTable) AS(alias string) *EpisodeTable {
	return newEpisodeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EpisodeTable with assigned schema name
func (a EpisodeTable) FromSchema(schemaName string) *EpisodeTable {
	return newEpisodeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EpisodeTable with assigned table prefix
func (a EpisodeTable) WithPrefix(prefix string) *EpisodeTable {
	return newEpisodeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EpisodeTable with assigned table suffix
func (a EpisodeTable) WithSuffix(suffix string) *EpisodeTable {
	return newEpisodeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEpisodeTable(schemaName, tableName, alias string) *EpisodeTable {
	return &EpisodeTable{
		episodeTable: newEpisodeTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newEpisodeTableImpl("", "excluded", ""),
	}
}

func newEpisodeTableImpl(schemaName, tableName, alias string) episodeTable {
	var (
		IDColumn                = sqlite.IntegerColumn("id")
		SeasonIDColumn          = sqlite.IntegerColumn("season_id")
		EpisodeNumberColumn     = sqlite.IntegerColumn("episode_number")
		MonitoredColumn         = sqlite.IntegerColumn("monitored")
		EpisodeMetadataIDColumn = sqlite.IntegerColumn("episode_metadata_id")
		EpisodeFileIDColumn     = sqlite.IntegerColumn("episode_file_id")
		allColumns              = sqlite.ColumnList{IDColumn, SeasonIDColumn, EpisodeNumberColumn, MonitoredColumn, EpisodeMetadataIDColumn, EpisodeFileIDColumn}
		mutableColumns          = sqlite.ColumnList{SeasonIDColumn, EpisodeNumberColumn, MonitoredColumn, EpisodeMetadataIDColumn, EpisodeFileIDColumn}
	)

	return episodeTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		SeasonID:          SeasonIDColumn,
		EpisodeNumber:     EpisodeNumberColumn,
		Monitored:         MonitoredColumn,
		EpisodeMetadataID: EpisodeMetadataIDColumn,
		EpisodeFileID:     EpisodeFileIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
