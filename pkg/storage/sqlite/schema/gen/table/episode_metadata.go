//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var EpisodeMetadata = newEpisodeMetadataTable("", "episode_metadata", "")

type episodeMetadataTable struct {
	sqlite.Table

	// Columns
	ID      sqlite.ColumnInteger
	Title   sqlite.ColumnString
	AirDate sqlite.ColumnTimestamp
	Runtime sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EpisodeMetadataTable struct {
	episodeMetadataTable

	EXCLUDED episodeMetadataTable
}

// AS creates new EpisodeMetadataTable with assigned alias
func (a EpisodeMetadataTable) AS(alias string) *EpisodeMetadataTable {
	return newEpisodeMetadataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EpisodeMetadataTable with assigned schema name
func (a EpisodeMetadataTable) FromSchema(schemaName string) *EpisodeMetadataTable {
	return newEpisodeMetadataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EpisodeMetadataTable with assigned table prefix
func (a EpisodeMetadataTable) WithPrefix(prefix string) *EpisodeMetadataTable {
	return newEpisodeMetadataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EpisodeMetadataTable with assigned table suffix
func (a EpisodeMetadataTable) WithSuffix(suffix string) *EpisodeMetadataTable {
	return newEpisodeMetadataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEpisodeMetadataTable(schemaName, tableName, alias string) *EpisodeMetadataTable {
	return &EpisodeMetadataTable{
		episodeMetadataTable: newEpisodeMetadataTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newEpisodeMetadataTableImpl("", "excluded", ""),
	}
}

func newEpisodeMetadataTableImpl(schemaName, tableName, alias string) episodeMetadataTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		TitleColumn    = sqlite.StringColumn("title")
		AirDateColumn  = sqlite.TimestampColumn("air_date")
		RuntimeColumn  = sqlite.IntegerColumn("runtime")
		allColumns     = sqlite.ColumnList{IDColumn, TitleColumn, AirDateColumn, RuntimeColumn}
		mutableColumns = sqlite.ColumnList{TitleColumn, AirDateColumn, RuntimeColumn}
	)

	return episodeMetadataTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Title:   TitleColumn,
		AirDate: AirDateColumn,
		Runtime: RuntimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
