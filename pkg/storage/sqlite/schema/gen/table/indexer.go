//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Indexer = newIndexerTable("", "indexer", "")

type indexerTable struct {
	sqlite.Table

	// Columns
	ID       sqlite.ColumnInteger
	Name     sqlite.ColumnString
	Priority sqlite.ColumnInteger
	URI      sqlite.ColumnString
	APIKey   sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type IndexerTable struct {
	indexerTable

	EXCLUDED indexerTable
}

// AS creates new IndexerTable with assigned alias
func (a IndexerTable) AS(alias string) *IndexerTable {
	return newIndexerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IndexerTable with assigned schema name
func (a IndexerTable) FromSchema(schemaName string) *IndexerTable {
	return newIndexerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IndexerTable with assigned table prefix
func (a IndexerTable) WithPrefix(prefix string) *IndexerTable {
	return newIndexerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IndexerTable with assigned table suffix
func (a IndexerTable) WithSuffix(suffix string) *IndexerTable {
	return newIndexerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIndexerTable(schemaName, tableName, alias string) *IndexerTable {
	return &IndexerTable{
		indexerTable: newIndexerTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newIndexerTableImpl("", "excluded", ""),
	}
}

func newIndexerTableImpl(schemaName, tableName, alias string) indexerTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		NameColumn     = sqlite.StringColumn("name")
		PriorityColumn = sqlite.IntegerColumn("priority")
		URIColumn      = sqlite.StringColumn("uri")
		APIKeyColumn   = sqlite.StringColumn("api_key")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn, PriorityColumn, URIColumn, APIKeyColumn}
		mutableColumns = sqlite.ColumnList{NameColumn, PriorityColumn, URIColumn, APIKeyColumn}
	)

	return indexerTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Name:     NameColumn,
		Priority: PriorityColumn,
		URI:      URIColumn,
		APIKey:   APIKeyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
