//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var SeasonMetadata = newSeasonMetadataTable("", "season_metadata", "")

type seasonMetadataTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	TmdbID       sqlite.ColumnInteger
	EpisodeCount sqlite.ColumnInteger
	Number       sqlite.ColumnString
	Images       sqlite.ColumnString
	AirDate      sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type SeasonMetadataTable struct {
	seasonMetadataTable

	EXCLUDED seasonMetadataTable
}

// AS creates new SeasonMetadataTable with assigned alias
func (a SeasonMetadataTable) AS(alias string) *SeasonMetadataTable {
	return newSeasonMetadataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeasonMetadataTable with assigned schema name
func (a SeasonMetadataTable) FromSchema(schemaName string) *SeasonMetadataTable {
	return newSeasonMetadataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeasonMetadataTable with assigned table prefix
func (a SeasonMetadataTable) WithPrefix(prefix string) *SeasonMetadataTable {
	return newSeasonMetadataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeasonMetadataTable with assigned table suffix
func (a SeasonMetadataTable) WithSuffix(suffix string) *SeasonMetadataTable {
	return newSeasonMetadataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeasonMetadataTable(schemaName, tableName, alias string) *SeasonMetadataTable {
	return &SeasonMetadataTable{
		seasonMetadataTable: newSeasonMetadataTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSeasonMetadataTableImpl("", "excluded", ""),
	}
}

func newSeasonMetadataTableImpl(schemaName, tableName, alias string) seasonMetadataTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		TmdbIDColumn       = sqlite.IntegerColumn("tmdb_id")
		EpisodeCountColumn = sqlite.IntegerColumn("episode_count")
		NumberColumn       = sqlite.StringColumn("number")
		ImagesColumn       = sqlite.StringColumn("images")
		AirDateColumn      = sqlite.TimestampColumn("air_date")
		allColumns         = sqlite.ColumnList{IDColumn, TmdbIDColumn, EpisodeCountColumn, NumberColumn, ImagesColumn, AirDateColumn}
		mutableColumns     = sqlite.ColumnList{TmdbIDColumn, EpisodeCountColumn, NumberColumn, ImagesColumn, AirDateColumn}
	)

	return seasonMetadataTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		TmdbID:       TmdbIDColumn,
		EpisodeCount: EpisodeCountColumn,
		Number:       NumberColumn,
		Images:       ImagesColumn,
		AirDate:      AirDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
