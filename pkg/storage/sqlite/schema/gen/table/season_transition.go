//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var SeasonTransition = newSeasonTransitionTable("", "season_transition", "")

type seasonTransitionTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	SeasonID   sqlite.ColumnInteger
	ToState    sqlite.ColumnString
	FromState  sqlite.ColumnString
	MostRecent sqlite.ColumnBool
	SortKey    sqlite.ColumnInteger
	CreatedAt  sqlite.ColumnTimestamp
	UpdatedAt  sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type SeasonTransitionTable struct {
	seasonTransitionTable

	EXCLUDED seasonTransitionTable
}

// AS creates new SeasonTransitionTable with assigned alias
func (a SeasonTransitionTable) AS(alias string) *SeasonTransitionTable {
	return newSeasonTransitionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeasonTransitionTable with assigned schema name
func (a SeasonTransitionTable) FromSchema(schemaName string) *SeasonTransitionTable {
	return newSeasonTransitionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeasonTransitionTable with assigned table prefix
func (a SeasonTransitionTable) WithPrefix(prefix string) *SeasonTransitionTable {
	return newSeasonTransitionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeasonTransitionTable with assigned table suffix
func (a SeasonTransitionTable) WithSuffix(suffix string) *SeasonTransitionTable {
	return newSeasonTransitionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeasonTransitionTable(schemaName, tableName, alias string) *SeasonTransitionTable {
	return &SeasonTransitionTable{
		seasonTransitionTable: newSeasonTransitionTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newSeasonTransitionTableImpl("", "excluded", ""),
	}
}

func newSeasonTransitionTableImpl(schemaName, tableName, alias string) seasonTransitionTable {
	var (
		IDColumn         = sqlite.IntegerColumn("id")
		SeasonIDColumn   = sqlite.IntegerColumn("season_id")
		ToStateColumn    = sqlite.StringColumn("to_state")
		FromStateColumn  = sqlite.StringColumn("from_state")
		MostRecentColumn = sqlite.BoolColumn("most_recent")
		SortKeyColumn    = sqlite.IntegerColumn("sort_key")
		CreatedAtColumn  = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn  = sqlite.TimestampColumn("updated_at")
		allColumns       = sqlite.ColumnList{IDColumn, SeasonIDColumn, ToStateColumn, FromStateColumn, MostRecentColumn, SortKeyColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = sqlite.ColumnList{SeasonIDColumn, ToStateColumn, FromStateColumn, MostRecentColumn, SortKeyColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return seasonTransitionTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		SeasonID:   SeasonIDColumn,
		ToState:    ToStateColumn,
		FromState:  FromStateColumn,
		MostRecent: MostRecentColumn,
		SortKey:    SortKeyColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
