//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ProfileQualityItem = newProfileQualityItemTable("", "profile_quality_item", "")

type profileQualityItemTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	ProfileID sqlite.ColumnInteger
	QualityID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ProfileQualityItemTable struct {
	profileQualityItemTable

	EXCLUDED profileQualityItemTable
}

// AS creates new ProfileQualityItemTable with assigned alias
func (a ProfileQualityItemTable) AS(alias string) *ProfileQualityItemTable {
	return newProfileQualityItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProfileQualityItemTable with assigned schema name
func (a ProfileQualityItemTable) FromSchema(schemaName string) *ProfileQualityItemTable {
	return newProfileQualityItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProfileQualityItemTable with assigned table prefix
func (a ProfileQualityItemTable) WithPrefix(prefix string) *ProfileQualityItemTable {
	return newProfileQualityItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProfileQualityItemTable with assigned table suffix
func (a ProfileQualityItemTable) WithSuffix(suffix string) *ProfileQualityItemTable {
	return newProfileQualityItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProfileQualityItemTable(schemaName, tableName, alias string) *ProfileQualityItemTable {
	return &ProfileQualityItemTable{
		profileQualityItemTable: newProfileQualityItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newProfileQualityItemTableImpl("", "excluded", ""),
	}
}

func newProfileQualityItemTableImpl(schemaName, tableName, alias string) profileQualityItemTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		ProfileIDColumn = sqlite.IntegerColumn("profile_id")
		QualityIDColumn = sqlite.IntegerColumn("quality_id")
		allColumns      = sqlite.ColumnList{IDColumn, ProfileIDColumn, QualityIDColumn}
		mutableColumns  = sqlite.ColumnList{ProfileIDColumn, QualityIDColumn}
	)

	return profileQualityItemTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ProfileID: ProfileIDColumn,
		QualityID: QualityIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
