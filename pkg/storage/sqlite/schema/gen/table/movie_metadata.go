//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var MovieMetadata = newMovieMetadataTable("", "movie_metadata", "")

type movieMetadataTable struct {
	sqlite.Table

	// Columns
	ID                 sqlite.ColumnInteger
	TmdbID             sqlite.ColumnInteger
	ImdbID             sqlite.ColumnString
	Images             sqlite.ColumnString
	Genres             sqlite.ColumnString
	Title              sqlite.ColumnString
	SortTitle          sqlite.ColumnString
	CleanTitle         sqlite.ColumnString
	OriginalTitle      sqlite.ColumnString
	CleanOriginalTitle sqlite.ColumnString
	OriginalLanguage   sqlite.ColumnInteger
	Status             sqlite.ColumnInteger
	LastInfoSync       sqlite.ColumnTimestamp
	Runtime            sqlite.ColumnInteger
	InCinemas          sqlite.ColumnTimestamp
	PhysicalRelease    sqlite.ColumnTimestamp
	DigitalRelease     sqlite.ColumnTimestamp
	Year               sqlite.ColumnInteger
	SecondaryYear      sqlite.ColumnInteger
	Ratings            sqlite.ColumnString
	Recommendations    sqlite.ColumnString
	Certification      sqlite.ColumnString
	YoutubeTrailerID   sqlite.ColumnString
	Studio             sqlite.ColumnString
	Overview           sqlite.ColumnString
	Website            sqlite.ColumnString
	Popularity         sqlite.ColumnFloat
	CollectionTmdbID   sqlite.ColumnInteger
	CollectionTitle    sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MovieMetadataTable struct {
	movieMetadataTable

	EXCLUDED movieMetadataTable
}

// AS creates new MovieMetadataTable with assigned alias
func (a MovieMetadataTable) AS(alias string) *MovieMetadataTable {
	return newMovieMetadataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MovieMetadataTable with assigned schema name
func (a MovieMetadataTable) FromSchema(schemaName string) *MovieMetadataTable {
	return newMovieMetadataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MovieMetadataTable with assigned table prefix
func (a MovieMetadataTable) WithPrefix(prefix string) *MovieMetadataTable {
	return newMovieMetadataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MovieMetadataTable with assigned table suffix
func (a MovieMetadataTable) WithSuffix(suffix string) *MovieMetadataTable {
	return newMovieMetadataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMovieMetadataTable(schemaName, tableName, alias string) *MovieMetadataTable {
	return &MovieMetadataTable{
		movieMetadataTable: newMovieMetadataTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newMovieMetadataTableImpl("", "excluded", ""),
	}
}

func newMovieMetadataTableImpl(schemaName, tableName, alias string) movieMetadataTable {
	var (
		IDColumn                 = sqlite.IntegerColumn("id")
		TmdbIDColumn             = sqlite.IntegerColumn("tmdb_id")
		ImdbIDColumn             = sqlite.StringColumn("imdb_id")
		ImagesColumn             = sqlite.StringColumn("images")
		GenresColumn             = sqlite.StringColumn("genres")
		TitleColumn              = sqlite.StringColumn("title")
		SortTitleColumn          = sqlite.StringColumn("sort_title")
		CleanTitleColumn         = sqlite.StringColumn("clean_title")
		OriginalTitleColumn      = sqlite.StringColumn("original_title")
		CleanOriginalTitleColumn = sqlite.StringColumn("clean_original_title")
		OriginalLanguageColumn   = sqlite.IntegerColumn("original_language")
		StatusColumn             = sqlite.IntegerColumn("status")
		LastInfoSyncColumn       = sqlite.TimestampColumn("last_info_sync")
		RuntimeColumn            = sqlite.IntegerColumn("runtime")
		InCinemasColumn          = sqlite.TimestampColumn("in_cinemas")
		PhysicalReleaseColumn    = sqlite.TimestampColumn("physical_release")
		DigitalReleaseColumn     = sqlite.TimestampColumn("digital_release")
		YearColumn               = sqlite.IntegerColumn("year")
		SecondaryYearColumn      = sqlite.IntegerColumn("secondary_year")
		RatingsColumn            = sqlite.StringColumn("ratings")
		RecommendationsColumn    = sqlite.StringColumn("recommendations")
		CertificationColumn      = sqlite.StringColumn("certification")
		YoutubeTrailerIDColumn   = sqlite.StringColumn("youtube_trailer_id")
		StudioColumn             = sqlite.StringColumn("studio")
		OverviewColumn           = sqlite.StringColumn("overview")
		WebsiteColumn            = sqlite.StringColumn("website")
		PopularityColumn         = sqlite.FloatColumn("popularity")
		CollectionTmdbIDColumn   = sqlite.IntegerColumn("collection_tmdb_id")
		CollectionTitleColumn    = sqlite.StringColumn("collection_title")
		allColumns               = sqlite.ColumnList{IDColumn, TmdbIDColumn, ImdbIDColumn, ImagesColumn, GenresColumn, TitleColumn, SortTitleColumn, CleanTitleColumn, OriginalTitleColumn, CleanOriginalTitleColumn, OriginalLanguageColumn, StatusColumn, LastInfoSyncColumn, RuntimeColumn, InCinemasColumn, PhysicalReleaseColumn, DigitalReleaseColumn, YearColumn, SecondaryYearColumn, RatingsColumn, RecommendationsColumn, CertificationColumn, YoutubeTrailerIDColumn, StudioColumn, OverviewColumn, WebsiteColumn, PopularityColumn, CollectionTmdbIDColumn, CollectionTitleColumn}
		mutableColumns           = sqlite.ColumnList{TmdbIDColumn, ImdbIDColumn, ImagesColumn, GenresColumn, TitleColumn, SortTitleColumn, CleanTitleColumn, OriginalTitleColumn, CleanOriginalTitleColumn, OriginalLanguageColumn, StatusColumn, LastInfoSyncColumn, RuntimeColumn, InCinemasColumn, PhysicalReleaseColumn, DigitalReleaseColumn, YearColumn, SecondaryYearColumn, RatingsColumn, RecommendationsColumn, CertificationColumn, YoutubeTrailerIDColumn, StudioColumn, OverviewColumn, WebsiteColumn, PopularityColumn, CollectionTmdbIDColumn, CollectionTitleColumn}
	)

	return movieMetadataTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		TmdbID:             TmdbIDColumn,
		ImdbID:             ImdbIDColumn,
		Images:             ImagesColumn,
		Genres:             GenresColumn,
		Title:              TitleColumn,
		SortTitle:          SortTitleColumn,
		CleanTitle:         CleanTitleColumn,
		OriginalTitle:      OriginalTitleColumn,
		CleanOriginalTitle: CleanOriginalTitleColumn,
		OriginalLanguage:   OriginalLanguageColumn,
		Status:             StatusColumn,
		LastInfoSync:       LastInfoSyncColumn,
		Runtime:            RuntimeColumn,
		InCinemas:          InCinemasColumn,
		PhysicalRelease:    PhysicalReleaseColumn,
		DigitalRelease:     DigitalReleaseColumn,
		Year:               YearColumn,
		SecondaryYear:      SecondaryYearColumn,
		Ratings:            RatingsColumn,
		Recommendations:    RecommendationsColumn,
		Certification:      CertificationColumn,
		YoutubeTrailerID:   YoutubeTrailerIDColumn,
		Studio:             StudioColumn,
		Overview:           OverviewColumn,
		Website:            WebsiteColumn,
		Popularity:         PopularityColumn,
		CollectionTmdbID:   CollectionTmdbIDColumn,
		CollectionTitle:    CollectionTitleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
