//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var SeriesTransition = newSeriesTransitionTable("", "series_transition", "")

type seriesTransitionTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	SeriesID   sqlite.ColumnInteger
	ToState    sqlite.ColumnString
	FromState  sqlite.ColumnString
	MostRecent sqlite.ColumnBool
	SortKey    sqlite.ColumnInteger
	CreatedAt  sqlite.ColumnTimestamp
	UpdatedAt  sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type SeriesTransitionTable struct {
	seriesTransitionTable

	EXCLUDED seriesTransitionTable
}

// AS creates new SeriesTransitionTable with assigned alias
func (a SeriesTransitionTable) AS(alias string) *SeriesTransitionTable {
	return newSeriesTransitionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeriesTransitionTable with assigned schema name
func (a SeriesTransitionTable) FromSchema(schemaName string) *SeriesTransitionTable {
	return newSeriesTransitionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeriesTransitionTable with assigned table prefix
func (a SeriesTransitionTable) WithPrefix(prefix string) *SeriesTransitionTable {
	return newSeriesTransitionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeriesTransitionTable with assigned table suffix
func (a SeriesTransitionTable) WithSuffix(suffix string) *SeriesTransitionTable {
	return newSeriesTransitionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeriesTransitionTable(schemaName, tableName, alias string) *SeriesTransitionTable {
	return &SeriesTransitionTable{
		seriesTransitionTable: newSeriesTransitionTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newSeriesTransitionTableImpl("", "excluded", ""),
	}
}

func newSeriesTransitionTableImpl(schemaName, tableName, alias string) seriesTransitionTable {
	var (
		IDColumn         = sqlite.IntegerColumn("id")
		SeriesIDColumn   = sqlite.IntegerColumn("series_id")
		ToStateColumn    = sqlite.StringColumn("to_state")
		FromStateColumn  = sqlite.StringColumn("from_state")
		MostRecentColumn = sqlite.BoolColumn("most_recent")
		SortKeyColumn    = sqlite.IntegerColumn("sort_key")
		CreatedAtColumn  = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn  = sqlite.TimestampColumn("updated_at")
		allColumns       = sqlite.ColumnList{IDColumn, SeriesIDColumn, ToStateColumn, FromStateColumn, MostRecentColumn, SortKeyColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = sqlite.ColumnList{SeriesIDColumn, ToStateColumn, FromStateColumn, MostRecentColumn, SortKeyColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return seriesTransitionTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		SeriesID:   SeriesIDColumn,
		ToState:    ToStateColumn,
		FromState:  FromStateColumn,
		MostRecent: MostRecentColumn,
		SortKey:    SortKeyColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
