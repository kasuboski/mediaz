//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Movies = newMoviesTable("", "Movies", "")

type moviesTable struct {
	sqlite.Table

	// Columns
	ID                  sqlite.ColumnInteger
	Path                sqlite.ColumnString
	Monitored           sqlite.ColumnInteger
	QualityProfileId    sqlite.ColumnInteger
	Added               sqlite.ColumnTimestamp
	Tags                sqlite.ColumnString
	AddOptions          sqlite.ColumnString
	MovieFileId         sqlite.ColumnInteger
	MinimumAvailability sqlite.ColumnInteger
	MovieMetadataId     sqlite.ColumnInteger
	LastSearchTime      sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MoviesTable struct {
	moviesTable

	EXCLUDED moviesTable
}

// AS creates new MoviesTable with assigned alias
func (a MoviesTable) AS(alias string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MoviesTable with assigned schema name
func (a MoviesTable) FromSchema(schemaName string) *MoviesTable {
	return newMoviesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MoviesTable with assigned table prefix
func (a MoviesTable) WithPrefix(prefix string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MoviesTable with assigned table suffix
func (a MoviesTable) WithSuffix(suffix string) *MoviesTable {
	return newMoviesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMoviesTable(schemaName, tableName, alias string) *MoviesTable {
	return &MoviesTable{
		moviesTable: newMoviesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newMoviesTableImpl("", "excluded", ""),
	}
}

func newMoviesTableImpl(schemaName, tableName, alias string) moviesTable {
	var (
		IDColumn                  = sqlite.IntegerColumn("Id")
		PathColumn                = sqlite.StringColumn("Path")
		MonitoredColumn           = sqlite.IntegerColumn("Monitored")
		QualityProfileIdColumn    = sqlite.IntegerColumn("QualityProfileId")
		AddedColumn               = sqlite.TimestampColumn("Added")
		TagsColumn                = sqlite.StringColumn("Tags")
		AddOptionsColumn          = sqlite.StringColumn("AddOptions")
		MovieFileIdColumn         = sqlite.IntegerColumn("MovieFileId")
		MinimumAvailabilityColumn = sqlite.IntegerColumn("MinimumAvailability")
		MovieMetadataIdColumn     = sqlite.IntegerColumn("MovieMetadataId")
		LastSearchTimeColumn      = sqlite.TimestampColumn("LastSearchTime")
		allColumns                = sqlite.ColumnList{IDColumn, PathColumn, MonitoredColumn, QualityProfileIdColumn, AddedColumn, TagsColumn, AddOptionsColumn, MovieFileIdColumn, MinimumAvailabilityColumn, MovieMetadataIdColumn, LastSearchTimeColumn}
		mutableColumns            = sqlite.ColumnList{PathColumn, MonitoredColumn, QualityProfileIdColumn, AddedColumn, TagsColumn, AddOptionsColumn, MovieFileIdColumn, MinimumAvailabilityColumn, MovieMetadataIdColumn, LastSearchTimeColumn}
	)

	return moviesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Path:                PathColumn,
		Monitored:           MonitoredColumn,
		QualityProfileId:    QualityProfileIdColumn,
		Added:               AddedColumn,
		Tags:                TagsColumn,
		AddOptions:          AddOptionsColumn,
		MovieFileId:         MovieFileIdColumn,
		MinimumAvailability: MinimumAvailabilityColumn,
		MovieMetadataId:     MovieMetadataIdColumn,
		LastSearchTime:      LastSearchTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
