## Project Overview
Mediaz is a self-hosted media management platform that helps organize and automate your movie/TV show collections.

The project is organized as a cli that runs commands or a server that handles HTTP requests.
The cli is in the `cmd` folder and uses `cobra` for command management.
The server is in the `server` folder and uses gorilla `mux` for routing.

Most handlers and logic start in `pkg/manager` in particular `manager.go`.

Storage is handled by `pkg/storage`. It manages a sqlite database. The interfaces are defined in `pkg/storage/storage.go`. The implementation is then in `pkg/storage/sqlite`. The sql schema is in sql files under `pkg/storage/sqlite/schema`. The schema models are generated by `go-jet` and is in `pkg/storage/sqlite/schema/gen`.

### Development Workflow
1. Make requested changes
2. Run `go fmt ./...` to format the code
3. Run `go test ./...` to run tests
4. Fix any errors
5. Repeat

### Testing
The project uses the `gomock` library to avoid external dependencies during testing.
When testing data storage prefer using an in memory sqlite db vs a mock. Use a mock if the scenario would be hard to recreate in an in memory sqlite db.

Components that interact with the outside world have generated mocks with `gomock`. These mocks are in a `mocks` folder next to the component.

An example of setting up a storage mock:
```go
ctrl := gomock.NewController(t)
store := mocks.NewMockStorage(ctrl)
m := New(nil, nil, nil, store, nil, config.Manager{})
store.EXPECT().ListMoviesByState(ctx, storage.MovieStateDiscovered).Return([]*storage.Movie{}, nil)
store.EXPECT().ListMoviesByState(ctx, storage.MovieStateDownloaded).Return([]*storage.Movie{}, nil)
// use components that you are testing
```
