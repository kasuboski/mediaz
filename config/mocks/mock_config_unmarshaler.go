// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kasuboski/mediaz/config (interfaces: ConfigUnmarshaler)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_config_unmarshaler.go github.com/kasuboski/mediaz/config ConfigUnmarshaler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	viper "github.com/spf13/viper"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigUnmarshaler is a mock of ConfigUnmarshaler interface.
type MockConfigUnmarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockConfigUnmarshalerMockRecorder
}

// MockConfigUnmarshalerMockRecorder is the mock recorder for MockConfigUnmarshaler.
type MockConfigUnmarshalerMockRecorder struct {
	mock *MockConfigUnmarshaler
}

// NewMockConfigUnmarshaler creates a new mock instance.
func NewMockConfigUnmarshaler(ctrl *gomock.Controller) *MockConfigUnmarshaler {
	mock := &MockConfigUnmarshaler{ctrl: ctrl}
	mock.recorder = &MockConfigUnmarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigUnmarshaler) EXPECT() *MockConfigUnmarshalerMockRecorder {
	return m.recorder
}

// ConfigFileUsed mocks base method.
func (m *MockConfigUnmarshaler) ConfigFileUsed() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFileUsed")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigFileUsed indicates an expected call of ConfigFileUsed.
func (mr *MockConfigUnmarshalerMockRecorder) ConfigFileUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFileUsed", reflect.TypeOf((*MockConfigUnmarshaler)(nil).ConfigFileUsed))
}

// ReadInConfig mocks base method.
func (m *MockConfigUnmarshaler) ReadInConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInConfig indicates an expected call of ReadInConfig.
func (mr *MockConfigUnmarshalerMockRecorder) ReadInConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInConfig", reflect.TypeOf((*MockConfigUnmarshaler)(nil).ReadInConfig))
}

// Unmarshal mocks base method.
func (m *MockConfigUnmarshaler) Unmarshal(arg0 any, arg1 ...viper.DecoderConfigOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockConfigUnmarshalerMockRecorder) Unmarshal(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockConfigUnmarshaler)(nil).Unmarshal), varargs...)
}
