//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Indexers = newIndexersTable("", "Indexers", "")

type indexersTable struct {
	sqlite.Table

	// Columns
	ID                      sqlite.ColumnInteger
	Name                    sqlite.ColumnString
	Implementation          sqlite.ColumnString
	Settings                sqlite.ColumnString
	ConfigContract          sqlite.ColumnString
	EnableRss               sqlite.ColumnInteger
	EnableAutomaticSearch   sqlite.ColumnInteger
	EnableInteractiveSearch sqlite.ColumnInteger
	Priority                sqlite.ColumnInteger
	Tags                    sqlite.ColumnString
	DownloadClientId        sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type IndexersTable struct {
	indexersTable

	EXCLUDED indexersTable
}

// AS creates new IndexersTable with assigned alias
func (a IndexersTable) AS(alias string) *IndexersTable {
	return newIndexersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IndexersTable with assigned schema name
func (a IndexersTable) FromSchema(schemaName string) *IndexersTable {
	return newIndexersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IndexersTable with assigned table prefix
func (a IndexersTable) WithPrefix(prefix string) *IndexersTable {
	return newIndexersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IndexersTable with assigned table suffix
func (a IndexersTable) WithSuffix(suffix string) *IndexersTable {
	return newIndexersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIndexersTable(schemaName, tableName, alias string) *IndexersTable {
	return &IndexersTable{
		indexersTable: newIndexersTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newIndexersTableImpl("", "excluded", ""),
	}
}

func newIndexersTableImpl(schemaName, tableName, alias string) indexersTable {
	var (
		IDColumn                      = sqlite.IntegerColumn("Id")
		NameColumn                    = sqlite.StringColumn("Name")
		ImplementationColumn          = sqlite.StringColumn("Implementation")
		SettingsColumn                = sqlite.StringColumn("Settings")
		ConfigContractColumn          = sqlite.StringColumn("ConfigContract")
		EnableRssColumn               = sqlite.IntegerColumn("EnableRss")
		EnableAutomaticSearchColumn   = sqlite.IntegerColumn("EnableAutomaticSearch")
		EnableInteractiveSearchColumn = sqlite.IntegerColumn("EnableInteractiveSearch")
		PriorityColumn                = sqlite.IntegerColumn("Priority")
		TagsColumn                    = sqlite.StringColumn("Tags")
		DownloadClientIdColumn        = sqlite.IntegerColumn("DownloadClientId")
		allColumns                    = sqlite.ColumnList{IDColumn, NameColumn, ImplementationColumn, SettingsColumn, ConfigContractColumn, EnableRssColumn, EnableAutomaticSearchColumn, EnableInteractiveSearchColumn, PriorityColumn, TagsColumn, DownloadClientIdColumn}
		mutableColumns                = sqlite.ColumnList{NameColumn, ImplementationColumn, SettingsColumn, ConfigContractColumn, EnableRssColumn, EnableAutomaticSearchColumn, EnableInteractiveSearchColumn, PriorityColumn, TagsColumn, DownloadClientIdColumn}
	)

	return indexersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                      IDColumn,
		Name:                    NameColumn,
		Implementation:          ImplementationColumn,
		Settings:                SettingsColumn,
		ConfigContract:          ConfigContractColumn,
		EnableRss:               EnableRssColumn,
		EnableAutomaticSearch:   EnableAutomaticSearchColumn,
		EnableInteractiveSearch: EnableInteractiveSearchColumn,
		Priority:                PriorityColumn,
		Tags:                    TagsColumn,
		DownloadClientId:        DownloadClientIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
