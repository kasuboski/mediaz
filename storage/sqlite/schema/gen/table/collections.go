//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Collections = newCollectionsTable("", "Collections", "")

type collectionsTable struct {
	sqlite.Table

	// Columns
	ID                  sqlite.ColumnInteger
	TmdbId              sqlite.ColumnInteger
	QualityProfileId    sqlite.ColumnInteger
	RootFolderPath      sqlite.ColumnString
	MinimumAvailability sqlite.ColumnInteger
	SearchOnAdd         sqlite.ColumnInteger
	Title               sqlite.ColumnString
	SortTitle           sqlite.ColumnString
	CleanTitle          sqlite.ColumnString
	Overview            sqlite.ColumnString
	Images              sqlite.ColumnString
	Monitored           sqlite.ColumnInteger
	LastInfoSync        sqlite.ColumnTimestamp
	Added               sqlite.ColumnTimestamp
	Tags                sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CollectionsTable struct {
	collectionsTable

	EXCLUDED collectionsTable
}

// AS creates new CollectionsTable with assigned alias
func (a CollectionsTable) AS(alias string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionsTable with assigned schema name
func (a CollectionsTable) FromSchema(schemaName string) *CollectionsTable {
	return newCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionsTable with assigned table prefix
func (a CollectionsTable) WithPrefix(prefix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionsTable with assigned table suffix
func (a CollectionsTable) WithSuffix(suffix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionsTable(schemaName, tableName, alias string) *CollectionsTable {
	return &CollectionsTable{
		collectionsTable: newCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newCollectionsTableImpl("", "excluded", ""),
	}
}

func newCollectionsTableImpl(schemaName, tableName, alias string) collectionsTable {
	var (
		IDColumn                  = sqlite.IntegerColumn("Id")
		TmdbIdColumn              = sqlite.IntegerColumn("TmdbId")
		QualityProfileIdColumn    = sqlite.IntegerColumn("QualityProfileId")
		RootFolderPathColumn      = sqlite.StringColumn("RootFolderPath")
		MinimumAvailabilityColumn = sqlite.IntegerColumn("MinimumAvailability")
		SearchOnAddColumn         = sqlite.IntegerColumn("SearchOnAdd")
		TitleColumn               = sqlite.StringColumn("Title")
		SortTitleColumn           = sqlite.StringColumn("SortTitle")
		CleanTitleColumn          = sqlite.StringColumn("CleanTitle")
		OverviewColumn            = sqlite.StringColumn("Overview")
		ImagesColumn              = sqlite.StringColumn("Images")
		MonitoredColumn           = sqlite.IntegerColumn("Monitored")
		LastInfoSyncColumn        = sqlite.TimestampColumn("LastInfoSync")
		AddedColumn               = sqlite.TimestampColumn("Added")
		TagsColumn                = sqlite.StringColumn("Tags")
		allColumns                = sqlite.ColumnList{IDColumn, TmdbIdColumn, QualityProfileIdColumn, RootFolderPathColumn, MinimumAvailabilityColumn, SearchOnAddColumn, TitleColumn, SortTitleColumn, CleanTitleColumn, OverviewColumn, ImagesColumn, MonitoredColumn, LastInfoSyncColumn, AddedColumn, TagsColumn}
		mutableColumns            = sqlite.ColumnList{TmdbIdColumn, QualityProfileIdColumn, RootFolderPathColumn, MinimumAvailabilityColumn, SearchOnAddColumn, TitleColumn, SortTitleColumn, CleanTitleColumn, OverviewColumn, ImagesColumn, MonitoredColumn, LastInfoSyncColumn, AddedColumn, TagsColumn}
	)

	return collectionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		TmdbId:              TmdbIdColumn,
		QualityProfileId:    QualityProfileIdColumn,
		RootFolderPath:      RootFolderPathColumn,
		MinimumAvailability: MinimumAvailabilityColumn,
		SearchOnAdd:         SearchOnAddColumn,
		Title:               TitleColumn,
		SortTitle:           SortTitleColumn,
		CleanTitle:          CleanTitleColumn,
		Overview:            OverviewColumn,
		Images:              ImagesColumn,
		Monitored:           MonitoredColumn,
		LastInfoSync:        LastInfoSyncColumn,
		Added:               AddedColumn,
		Tags:                TagsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
