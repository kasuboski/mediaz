//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Credits = newCreditsTable("", "Credits", "")

type creditsTable struct {
	sqlite.Table

	// Columns
	ID              sqlite.ColumnInteger
	CreditTmdbId    sqlite.ColumnString
	PersonTmdbId    sqlite.ColumnInteger
	Name            sqlite.ColumnString
	Images          sqlite.ColumnString
	Character       sqlite.ColumnString
	Order           sqlite.ColumnInteger
	Job             sqlite.ColumnString
	Department      sqlite.ColumnString
	Type            sqlite.ColumnInteger
	MovieMetadataId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CreditsTable struct {
	creditsTable

	EXCLUDED creditsTable
}

// AS creates new CreditsTable with assigned alias
func (a CreditsTable) AS(alias string) *CreditsTable {
	return newCreditsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CreditsTable with assigned schema name
func (a CreditsTable) FromSchema(schemaName string) *CreditsTable {
	return newCreditsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CreditsTable with assigned table prefix
func (a CreditsTable) WithPrefix(prefix string) *CreditsTable {
	return newCreditsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CreditsTable with assigned table suffix
func (a CreditsTable) WithSuffix(suffix string) *CreditsTable {
	return newCreditsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCreditsTable(schemaName, tableName, alias string) *CreditsTable {
	return &CreditsTable{
		creditsTable: newCreditsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCreditsTableImpl("", "excluded", ""),
	}
}

func newCreditsTableImpl(schemaName, tableName, alias string) creditsTable {
	var (
		IDColumn              = sqlite.IntegerColumn("Id")
		CreditTmdbIdColumn    = sqlite.StringColumn("CreditTmdbId")
		PersonTmdbIdColumn    = sqlite.IntegerColumn("PersonTmdbId")
		NameColumn            = sqlite.StringColumn("Name")
		ImagesColumn          = sqlite.StringColumn("Images")
		CharacterColumn       = sqlite.StringColumn("Character")
		OrderColumn           = sqlite.IntegerColumn("Order")
		JobColumn             = sqlite.StringColumn("Job")
		DepartmentColumn      = sqlite.StringColumn("Department")
		TypeColumn            = sqlite.IntegerColumn("Type")
		MovieMetadataIdColumn = sqlite.IntegerColumn("MovieMetadataId")
		allColumns            = sqlite.ColumnList{IDColumn, CreditTmdbIdColumn, PersonTmdbIdColumn, NameColumn, ImagesColumn, CharacterColumn, OrderColumn, JobColumn, DepartmentColumn, TypeColumn, MovieMetadataIdColumn}
		mutableColumns        = sqlite.ColumnList{CreditTmdbIdColumn, PersonTmdbIdColumn, NameColumn, ImagesColumn, CharacterColumn, OrderColumn, JobColumn, DepartmentColumn, TypeColumn, MovieMetadataIdColumn}
	)

	return creditsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		CreditTmdbId:    CreditTmdbIdColumn,
		PersonTmdbId:    PersonTmdbIdColumn,
		Name:            NameColumn,
		Images:          ImagesColumn,
		Character:       CharacterColumn,
		Order:           OrderColumn,
		Job:             JobColumn,
		Department:      DepartmentColumn,
		Type:            TypeColumn,
		MovieMetadataId: MovieMetadataIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
