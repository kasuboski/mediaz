//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ImportLists = newImportListsTable("", "ImportLists", "")

type importListsTable struct {
	sqlite.Table

	// Columns
	ID                  sqlite.ColumnInteger
	Enabled             sqlite.ColumnInteger
	Name                sqlite.ColumnString
	Implementation      sqlite.ColumnString
	ConfigContract      sqlite.ColumnString
	Settings            sqlite.ColumnString
	EnableAuto          sqlite.ColumnInteger
	RootFolderPath      sqlite.ColumnString
	QualityProfileId    sqlite.ColumnInteger
	MinimumAvailability sqlite.ColumnInteger
	Tags                sqlite.ColumnString
	SearchOnAdd         sqlite.ColumnInteger
	Monitor             sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ImportListsTable struct {
	importListsTable

	EXCLUDED importListsTable
}

// AS creates new ImportListsTable with assigned alias
func (a ImportListsTable) AS(alias string) *ImportListsTable {
	return newImportListsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImportListsTable with assigned schema name
func (a ImportListsTable) FromSchema(schemaName string) *ImportListsTable {
	return newImportListsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImportListsTable with assigned table prefix
func (a ImportListsTable) WithPrefix(prefix string) *ImportListsTable {
	return newImportListsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImportListsTable with assigned table suffix
func (a ImportListsTable) WithSuffix(suffix string) *ImportListsTable {
	return newImportListsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImportListsTable(schemaName, tableName, alias string) *ImportListsTable {
	return &ImportListsTable{
		importListsTable: newImportListsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newImportListsTableImpl("", "excluded", ""),
	}
}

func newImportListsTableImpl(schemaName, tableName, alias string) importListsTable {
	var (
		IDColumn                  = sqlite.IntegerColumn("Id")
		EnabledColumn             = sqlite.IntegerColumn("Enabled")
		NameColumn                = sqlite.StringColumn("Name")
		ImplementationColumn      = sqlite.StringColumn("Implementation")
		ConfigContractColumn      = sqlite.StringColumn("ConfigContract")
		SettingsColumn            = sqlite.StringColumn("Settings")
		EnableAutoColumn          = sqlite.IntegerColumn("EnableAuto")
		RootFolderPathColumn      = sqlite.StringColumn("RootFolderPath")
		QualityProfileIdColumn    = sqlite.IntegerColumn("QualityProfileId")
		MinimumAvailabilityColumn = sqlite.IntegerColumn("MinimumAvailability")
		TagsColumn                = sqlite.StringColumn("Tags")
		SearchOnAddColumn         = sqlite.IntegerColumn("SearchOnAdd")
		MonitorColumn             = sqlite.IntegerColumn("Monitor")
		allColumns                = sqlite.ColumnList{IDColumn, EnabledColumn, NameColumn, ImplementationColumn, ConfigContractColumn, SettingsColumn, EnableAutoColumn, RootFolderPathColumn, QualityProfileIdColumn, MinimumAvailabilityColumn, TagsColumn, SearchOnAddColumn, MonitorColumn}
		mutableColumns            = sqlite.ColumnList{EnabledColumn, NameColumn, ImplementationColumn, ConfigContractColumn, SettingsColumn, EnableAutoColumn, RootFolderPathColumn, QualityProfileIdColumn, MinimumAvailabilityColumn, TagsColumn, SearchOnAddColumn, MonitorColumn}
	)

	return importListsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Enabled:             EnabledColumn,
		Name:                NameColumn,
		Implementation:      ImplementationColumn,
		ConfigContract:      ConfigContractColumn,
		Settings:            SettingsColumn,
		EnableAuto:          EnableAutoColumn,
		RootFolderPath:      RootFolderPathColumn,
		QualityProfileId:    QualityProfileIdColumn,
		MinimumAvailability: MinimumAvailabilityColumn,
		Tags:                TagsColumn,
		SearchOnAdd:         SearchOnAddColumn,
		Monitor:             MonitorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
