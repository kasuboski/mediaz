//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var RemotePathMappings = newRemotePathMappingsTable("", "RemotePathMappings", "")

type remotePathMappingsTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	Host       sqlite.ColumnString
	RemotePath sqlite.ColumnString
	LocalPath  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type RemotePathMappingsTable struct {
	remotePathMappingsTable

	EXCLUDED remotePathMappingsTable
}

// AS creates new RemotePathMappingsTable with assigned alias
func (a RemotePathMappingsTable) AS(alias string) *RemotePathMappingsTable {
	return newRemotePathMappingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RemotePathMappingsTable with assigned schema name
func (a RemotePathMappingsTable) FromSchema(schemaName string) *RemotePathMappingsTable {
	return newRemotePathMappingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RemotePathMappingsTable with assigned table prefix
func (a RemotePathMappingsTable) WithPrefix(prefix string) *RemotePathMappingsTable {
	return newRemotePathMappingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RemotePathMappingsTable with assigned table suffix
func (a RemotePathMappingsTable) WithSuffix(suffix string) *RemotePathMappingsTable {
	return newRemotePathMappingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRemotePathMappingsTable(schemaName, tableName, alias string) *RemotePathMappingsTable {
	return &RemotePathMappingsTable{
		remotePathMappingsTable: newRemotePathMappingsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newRemotePathMappingsTableImpl("", "excluded", ""),
	}
}

func newRemotePathMappingsTableImpl(schemaName, tableName, alias string) remotePathMappingsTable {
	var (
		IDColumn         = sqlite.IntegerColumn("Id")
		HostColumn       = sqlite.StringColumn("Host")
		RemotePathColumn = sqlite.StringColumn("RemotePath")
		LocalPathColumn  = sqlite.StringColumn("LocalPath")
		allColumns       = sqlite.ColumnList{IDColumn, HostColumn, RemotePathColumn, LocalPathColumn}
		mutableColumns   = sqlite.ColumnList{HostColumn, RemotePathColumn, LocalPathColumn}
	)

	return remotePathMappingsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Host:       HostColumn,
		RemotePath: RemotePathColumn,
		LocalPath:  LocalPathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
