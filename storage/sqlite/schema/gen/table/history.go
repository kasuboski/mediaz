//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var History = newHistoryTable("", "History", "")

type historyTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	SourceTitle sqlite.ColumnString
	Date        sqlite.ColumnTimestamp
	Quality     sqlite.ColumnString
	Data        sqlite.ColumnString
	EventType   sqlite.ColumnInteger
	DownloadId  sqlite.ColumnString
	MovieId     sqlite.ColumnInteger
	Languages   sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type HistoryTable struct {
	historyTable

	EXCLUDED historyTable
}

// AS creates new HistoryTable with assigned alias
func (a HistoryTable) AS(alias string) *HistoryTable {
	return newHistoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new HistoryTable with assigned schema name
func (a HistoryTable) FromSchema(schemaName string) *HistoryTable {
	return newHistoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new HistoryTable with assigned table prefix
func (a HistoryTable) WithPrefix(prefix string) *HistoryTable {
	return newHistoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new HistoryTable with assigned table suffix
func (a HistoryTable) WithSuffix(suffix string) *HistoryTable {
	return newHistoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newHistoryTable(schemaName, tableName, alias string) *HistoryTable {
	return &HistoryTable{
		historyTable: newHistoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newHistoryTableImpl("", "excluded", ""),
	}
}

func newHistoryTableImpl(schemaName, tableName, alias string) historyTable {
	var (
		IDColumn          = sqlite.IntegerColumn("Id")
		SourceTitleColumn = sqlite.StringColumn("SourceTitle")
		DateColumn        = sqlite.TimestampColumn("Date")
		QualityColumn     = sqlite.StringColumn("Quality")
		DataColumn        = sqlite.StringColumn("Data")
		EventTypeColumn   = sqlite.IntegerColumn("EventType")
		DownloadIdColumn  = sqlite.StringColumn("DownloadId")
		MovieIdColumn     = sqlite.IntegerColumn("MovieId")
		LanguagesColumn   = sqlite.StringColumn("Languages")
		allColumns        = sqlite.ColumnList{IDColumn, SourceTitleColumn, DateColumn, QualityColumn, DataColumn, EventTypeColumn, DownloadIdColumn, MovieIdColumn, LanguagesColumn}
		mutableColumns    = sqlite.ColumnList{SourceTitleColumn, DateColumn, QualityColumn, DataColumn, EventTypeColumn, DownloadIdColumn, MovieIdColumn, LanguagesColumn}
	)

	return historyTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		SourceTitle: SourceTitleColumn,
		Date:        DateColumn,
		Quality:     QualityColumn,
		Data:        DataColumn,
		EventType:   EventTypeColumn,
		DownloadId:  DownloadIdColumn,
		MovieId:     MovieIdColumn,
		Languages:   LanguagesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
