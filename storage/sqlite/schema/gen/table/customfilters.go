//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var CustomFilters = newCustomFiltersTable("", "CustomFilters", "")

type customFiltersTable struct {
	sqlite.Table

	// Columns
	ID      sqlite.ColumnInteger
	Type    sqlite.ColumnString
	Label   sqlite.ColumnString
	Filters sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CustomFiltersTable struct {
	customFiltersTable

	EXCLUDED customFiltersTable
}

// AS creates new CustomFiltersTable with assigned alias
func (a CustomFiltersTable) AS(alias string) *CustomFiltersTable {
	return newCustomFiltersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CustomFiltersTable with assigned schema name
func (a CustomFiltersTable) FromSchema(schemaName string) *CustomFiltersTable {
	return newCustomFiltersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CustomFiltersTable with assigned table prefix
func (a CustomFiltersTable) WithPrefix(prefix string) *CustomFiltersTable {
	return newCustomFiltersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CustomFiltersTable with assigned table suffix
func (a CustomFiltersTable) WithSuffix(suffix string) *CustomFiltersTable {
	return newCustomFiltersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCustomFiltersTable(schemaName, tableName, alias string) *CustomFiltersTable {
	return &CustomFiltersTable{
		customFiltersTable: newCustomFiltersTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newCustomFiltersTableImpl("", "excluded", ""),
	}
}

func newCustomFiltersTableImpl(schemaName, tableName, alias string) customFiltersTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		TypeColumn     = sqlite.StringColumn("Type")
		LabelColumn    = sqlite.StringColumn("Label")
		FiltersColumn  = sqlite.StringColumn("Filters")
		allColumns     = sqlite.ColumnList{IDColumn, TypeColumn, LabelColumn, FiltersColumn}
		mutableColumns = sqlite.ColumnList{TypeColumn, LabelColumn, FiltersColumn}
	)

	return customFiltersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Type:    TypeColumn,
		Label:   LabelColumn,
		Filters: FiltersColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
