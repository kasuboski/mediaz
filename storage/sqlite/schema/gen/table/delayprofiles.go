//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var DelayProfiles = newDelayProfilesTable("", "DelayProfiles", "")

type delayProfilesTable struct {
	sqlite.Table

	// Columns
	ID                             sqlite.ColumnInteger
	EnableUsenet                   sqlite.ColumnInteger
	EnableTorrent                  sqlite.ColumnInteger
	PreferredProtocol              sqlite.ColumnInteger
	UsenetDelay                    sqlite.ColumnInteger
	TorrentDelay                   sqlite.ColumnInteger
	Order                          sqlite.ColumnInteger
	Tags                           sqlite.ColumnString
	BypassIfHighestQuality         sqlite.ColumnInteger
	BypassIfAboveCustomFormatScore sqlite.ColumnInteger
	MinimumCustomFormatScore       sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type DelayProfilesTable struct {
	delayProfilesTable

	EXCLUDED delayProfilesTable
}

// AS creates new DelayProfilesTable with assigned alias
func (a DelayProfilesTable) AS(alias string) *DelayProfilesTable {
	return newDelayProfilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DelayProfilesTable with assigned schema name
func (a DelayProfilesTable) FromSchema(schemaName string) *DelayProfilesTable {
	return newDelayProfilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DelayProfilesTable with assigned table prefix
func (a DelayProfilesTable) WithPrefix(prefix string) *DelayProfilesTable {
	return newDelayProfilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DelayProfilesTable with assigned table suffix
func (a DelayProfilesTable) WithSuffix(suffix string) *DelayProfilesTable {
	return newDelayProfilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDelayProfilesTable(schemaName, tableName, alias string) *DelayProfilesTable {
	return &DelayProfilesTable{
		delayProfilesTable: newDelayProfilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newDelayProfilesTableImpl("", "excluded", ""),
	}
}

func newDelayProfilesTableImpl(schemaName, tableName, alias string) delayProfilesTable {
	var (
		IDColumn                             = sqlite.IntegerColumn("Id")
		EnableUsenetColumn                   = sqlite.IntegerColumn("EnableUsenet")
		EnableTorrentColumn                  = sqlite.IntegerColumn("EnableTorrent")
		PreferredProtocolColumn              = sqlite.IntegerColumn("PreferredProtocol")
		UsenetDelayColumn                    = sqlite.IntegerColumn("UsenetDelay")
		TorrentDelayColumn                   = sqlite.IntegerColumn("TorrentDelay")
		OrderColumn                          = sqlite.IntegerColumn("Order")
		TagsColumn                           = sqlite.StringColumn("Tags")
		BypassIfHighestQualityColumn         = sqlite.IntegerColumn("BypassIfHighestQuality")
		BypassIfAboveCustomFormatScoreColumn = sqlite.IntegerColumn("BypassIfAboveCustomFormatScore")
		MinimumCustomFormatScoreColumn       = sqlite.IntegerColumn("MinimumCustomFormatScore")
		allColumns                           = sqlite.ColumnList{IDColumn, EnableUsenetColumn, EnableTorrentColumn, PreferredProtocolColumn, UsenetDelayColumn, TorrentDelayColumn, OrderColumn, TagsColumn, BypassIfHighestQualityColumn, BypassIfAboveCustomFormatScoreColumn, MinimumCustomFormatScoreColumn}
		mutableColumns                       = sqlite.ColumnList{EnableUsenetColumn, EnableTorrentColumn, PreferredProtocolColumn, UsenetDelayColumn, TorrentDelayColumn, OrderColumn, TagsColumn, BypassIfHighestQualityColumn, BypassIfAboveCustomFormatScoreColumn, MinimumCustomFormatScoreColumn}
	)

	return delayProfilesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                             IDColumn,
		EnableUsenet:                   EnableUsenetColumn,
		EnableTorrent:                  EnableTorrentColumn,
		PreferredProtocol:              PreferredProtocolColumn,
		UsenetDelay:                    UsenetDelayColumn,
		TorrentDelay:                   TorrentDelayColumn,
		Order:                          OrderColumn,
		Tags:                           TagsColumn,
		BypassIfHighestQuality:         BypassIfHighestQualityColumn,
		BypassIfAboveCustomFormatScore: BypassIfAboveCustomFormatScoreColumn,
		MinimumCustomFormatScore:       MinimumCustomFormatScoreColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
