//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var IndexerStatus = newIndexerStatusTable("", "IndexerStatus", "")

type indexerStatusTable struct {
	sqlite.Table

	// Columns
	ID                     sqlite.ColumnInteger
	ProviderId             sqlite.ColumnInteger
	InitialFailure         sqlite.ColumnTimestamp
	MostRecentFailure      sqlite.ColumnTimestamp
	EscalationLevel        sqlite.ColumnInteger
	DisabledTill           sqlite.ColumnTimestamp
	LastRssSyncReleaseInfo sqlite.ColumnString
	Cookies                sqlite.ColumnString
	CookiesExpirationDate  sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type IndexerStatusTable struct {
	indexerStatusTable

	EXCLUDED indexerStatusTable
}

// AS creates new IndexerStatusTable with assigned alias
func (a IndexerStatusTable) AS(alias string) *IndexerStatusTable {
	return newIndexerStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IndexerStatusTable with assigned schema name
func (a IndexerStatusTable) FromSchema(schemaName string) *IndexerStatusTable {
	return newIndexerStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IndexerStatusTable with assigned table prefix
func (a IndexerStatusTable) WithPrefix(prefix string) *IndexerStatusTable {
	return newIndexerStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IndexerStatusTable with assigned table suffix
func (a IndexerStatusTable) WithSuffix(suffix string) *IndexerStatusTable {
	return newIndexerStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIndexerStatusTable(schemaName, tableName, alias string) *IndexerStatusTable {
	return &IndexerStatusTable{
		indexerStatusTable: newIndexerStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newIndexerStatusTableImpl("", "excluded", ""),
	}
}

func newIndexerStatusTableImpl(schemaName, tableName, alias string) indexerStatusTable {
	var (
		IDColumn                     = sqlite.IntegerColumn("Id")
		ProviderIdColumn             = sqlite.IntegerColumn("ProviderId")
		InitialFailureColumn         = sqlite.TimestampColumn("InitialFailure")
		MostRecentFailureColumn      = sqlite.TimestampColumn("MostRecentFailure")
		EscalationLevelColumn        = sqlite.IntegerColumn("EscalationLevel")
		DisabledTillColumn           = sqlite.TimestampColumn("DisabledTill")
		LastRssSyncReleaseInfoColumn = sqlite.StringColumn("LastRssSyncReleaseInfo")
		CookiesColumn                = sqlite.StringColumn("Cookies")
		CookiesExpirationDateColumn  = sqlite.TimestampColumn("CookiesExpirationDate")
		allColumns                   = sqlite.ColumnList{IDColumn, ProviderIdColumn, InitialFailureColumn, MostRecentFailureColumn, EscalationLevelColumn, DisabledTillColumn, LastRssSyncReleaseInfoColumn, CookiesColumn, CookiesExpirationDateColumn}
		mutableColumns               = sqlite.ColumnList{ProviderIdColumn, InitialFailureColumn, MostRecentFailureColumn, EscalationLevelColumn, DisabledTillColumn, LastRssSyncReleaseInfoColumn, CookiesColumn, CookiesExpirationDateColumn}
	)

	return indexerStatusTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                     IDColumn,
		ProviderId:             ProviderIdColumn,
		InitialFailure:         InitialFailureColumn,
		MostRecentFailure:      MostRecentFailureColumn,
		EscalationLevel:        EscalationLevelColumn,
		DisabledTill:           DisabledTillColumn,
		LastRssSyncReleaseInfo: LastRssSyncReleaseInfoColumn,
		Cookies:                CookiesColumn,
		CookiesExpirationDate:  CookiesExpirationDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
