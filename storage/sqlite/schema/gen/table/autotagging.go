//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var AutoTagging = newAutoTaggingTable("", "AutoTagging", "")

type autoTaggingTable struct {
	sqlite.Table

	// Columns
	ID                      sqlite.ColumnInteger
	Name                    sqlite.ColumnString
	Specifications          sqlite.ColumnString
	RemoveTagsAutomatically sqlite.ColumnInteger
	Tags                    sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AutoTaggingTable struct {
	autoTaggingTable

	EXCLUDED autoTaggingTable
}

// AS creates new AutoTaggingTable with assigned alias
func (a AutoTaggingTable) AS(alias string) *AutoTaggingTable {
	return newAutoTaggingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AutoTaggingTable with assigned schema name
func (a AutoTaggingTable) FromSchema(schemaName string) *AutoTaggingTable {
	return newAutoTaggingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AutoTaggingTable with assigned table prefix
func (a AutoTaggingTable) WithPrefix(prefix string) *AutoTaggingTable {
	return newAutoTaggingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AutoTaggingTable with assigned table suffix
func (a AutoTaggingTable) WithSuffix(suffix string) *AutoTaggingTable {
	return newAutoTaggingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAutoTaggingTable(schemaName, tableName, alias string) *AutoTaggingTable {
	return &AutoTaggingTable{
		autoTaggingTable: newAutoTaggingTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAutoTaggingTableImpl("", "excluded", ""),
	}
}

func newAutoTaggingTableImpl(schemaName, tableName, alias string) autoTaggingTable {
	var (
		IDColumn                      = sqlite.IntegerColumn("Id")
		NameColumn                    = sqlite.StringColumn("Name")
		SpecificationsColumn          = sqlite.StringColumn("Specifications")
		RemoveTagsAutomaticallyColumn = sqlite.IntegerColumn("RemoveTagsAutomatically")
		TagsColumn                    = sqlite.StringColumn("Tags")
		allColumns                    = sqlite.ColumnList{IDColumn, NameColumn, SpecificationsColumn, RemoveTagsAutomaticallyColumn, TagsColumn}
		mutableColumns                = sqlite.ColumnList{NameColumn, SpecificationsColumn, RemoveTagsAutomaticallyColumn, TagsColumn}
	)

	return autoTaggingTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                      IDColumn,
		Name:                    NameColumn,
		Specifications:          SpecificationsColumn,
		RemoveTagsAutomatically: RemoveTagsAutomaticallyColumn,
		Tags:                    TagsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
