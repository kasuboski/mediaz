//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var DownloadClients = newDownloadClientsTable("", "DownloadClients", "")

type downloadClientsTable struct {
	sqlite.Table

	// Columns
	ID                       sqlite.ColumnInteger
	Enable                   sqlite.ColumnInteger
	Name                     sqlite.ColumnString
	Implementation           sqlite.ColumnString
	Settings                 sqlite.ColumnString
	ConfigContract           sqlite.ColumnString
	Priority                 sqlite.ColumnInteger
	RemoveCompletedDownloads sqlite.ColumnInteger
	RemoveFailedDownloads    sqlite.ColumnInteger
	Tags                     sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type DownloadClientsTable struct {
	downloadClientsTable

	EXCLUDED downloadClientsTable
}

// AS creates new DownloadClientsTable with assigned alias
func (a DownloadClientsTable) AS(alias string) *DownloadClientsTable {
	return newDownloadClientsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DownloadClientsTable with assigned schema name
func (a DownloadClientsTable) FromSchema(schemaName string) *DownloadClientsTable {
	return newDownloadClientsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DownloadClientsTable with assigned table prefix
func (a DownloadClientsTable) WithPrefix(prefix string) *DownloadClientsTable {
	return newDownloadClientsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DownloadClientsTable with assigned table suffix
func (a DownloadClientsTable) WithSuffix(suffix string) *DownloadClientsTable {
	return newDownloadClientsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDownloadClientsTable(schemaName, tableName, alias string) *DownloadClientsTable {
	return &DownloadClientsTable{
		downloadClientsTable: newDownloadClientsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newDownloadClientsTableImpl("", "excluded", ""),
	}
}

func newDownloadClientsTableImpl(schemaName, tableName, alias string) downloadClientsTable {
	var (
		IDColumn                       = sqlite.IntegerColumn("Id")
		EnableColumn                   = sqlite.IntegerColumn("Enable")
		NameColumn                     = sqlite.StringColumn("Name")
		ImplementationColumn           = sqlite.StringColumn("Implementation")
		SettingsColumn                 = sqlite.StringColumn("Settings")
		ConfigContractColumn           = sqlite.StringColumn("ConfigContract")
		PriorityColumn                 = sqlite.IntegerColumn("Priority")
		RemoveCompletedDownloadsColumn = sqlite.IntegerColumn("RemoveCompletedDownloads")
		RemoveFailedDownloadsColumn    = sqlite.IntegerColumn("RemoveFailedDownloads")
		TagsColumn                     = sqlite.StringColumn("Tags")
		allColumns                     = sqlite.ColumnList{IDColumn, EnableColumn, NameColumn, ImplementationColumn, SettingsColumn, ConfigContractColumn, PriorityColumn, RemoveCompletedDownloadsColumn, RemoveFailedDownloadsColumn, TagsColumn}
		mutableColumns                 = sqlite.ColumnList{EnableColumn, NameColumn, ImplementationColumn, SettingsColumn, ConfigContractColumn, PriorityColumn, RemoveCompletedDownloadsColumn, RemoveFailedDownloadsColumn, TagsColumn}
	)

	return downloadClientsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		Enable:                   EnableColumn,
		Name:                     NameColumn,
		Implementation:           ImplementationColumn,
		Settings:                 SettingsColumn,
		ConfigContract:           ConfigContractColumn,
		Priority:                 PriorityColumn,
		RemoveCompletedDownloads: RemoveCompletedDownloadsColumn,
		RemoveFailedDownloads:    RemoveFailedDownloadsColumn,
		Tags:                     TagsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
