//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var QualityDefinitions = newQualityDefinitionsTable("", "QualityDefinitions", "")

type qualityDefinitionsTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnInteger
	Quality       sqlite.ColumnInteger
	Title         sqlite.ColumnString
	MinSize       sqlite.ColumnFloat
	MaxSize       sqlite.ColumnFloat
	PreferredSize sqlite.ColumnFloat

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type QualityDefinitionsTable struct {
	qualityDefinitionsTable

	EXCLUDED qualityDefinitionsTable
}

// AS creates new QualityDefinitionsTable with assigned alias
func (a QualityDefinitionsTable) AS(alias string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QualityDefinitionsTable with assigned schema name
func (a QualityDefinitionsTable) FromSchema(schemaName string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QualityDefinitionsTable with assigned table prefix
func (a QualityDefinitionsTable) WithPrefix(prefix string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QualityDefinitionsTable with assigned table suffix
func (a QualityDefinitionsTable) WithSuffix(suffix string) *QualityDefinitionsTable {
	return newQualityDefinitionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQualityDefinitionsTable(schemaName, tableName, alias string) *QualityDefinitionsTable {
	return &QualityDefinitionsTable{
		qualityDefinitionsTable: newQualityDefinitionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newQualityDefinitionsTableImpl("", "excluded", ""),
	}
}

func newQualityDefinitionsTableImpl(schemaName, tableName, alias string) qualityDefinitionsTable {
	var (
		IDColumn            = sqlite.IntegerColumn("Id")
		QualityColumn       = sqlite.IntegerColumn("Quality")
		TitleColumn         = sqlite.StringColumn("Title")
		MinSizeColumn       = sqlite.FloatColumn("MinSize")
		MaxSizeColumn       = sqlite.FloatColumn("MaxSize")
		PreferredSizeColumn = sqlite.FloatColumn("PreferredSize")
		allColumns          = sqlite.ColumnList{IDColumn, QualityColumn, TitleColumn, MinSizeColumn, MaxSizeColumn, PreferredSizeColumn}
		mutableColumns      = sqlite.ColumnList{QualityColumn, TitleColumn, MinSizeColumn, MaxSizeColumn, PreferredSizeColumn}
	)

	return qualityDefinitionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Quality:       QualityColumn,
		Title:         TitleColumn,
		MinSize:       MinSizeColumn,
		MaxSize:       MaxSizeColumn,
		PreferredSize: PreferredSizeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
