//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ImportListStatus = newImportListStatusTable("", "ImportListStatus", "")

type importListStatusTable struct {
	sqlite.Table

	// Columns
	ID                sqlite.ColumnInteger
	ProviderId        sqlite.ColumnInteger
	InitialFailure    sqlite.ColumnTimestamp
	MostRecentFailure sqlite.ColumnTimestamp
	EscalationLevel   sqlite.ColumnInteger
	DisabledTill      sqlite.ColumnTimestamp
	LastInfoSync      sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ImportListStatusTable struct {
	importListStatusTable

	EXCLUDED importListStatusTable
}

// AS creates new ImportListStatusTable with assigned alias
func (a ImportListStatusTable) AS(alias string) *ImportListStatusTable {
	return newImportListStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImportListStatusTable with assigned schema name
func (a ImportListStatusTable) FromSchema(schemaName string) *ImportListStatusTable {
	return newImportListStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImportListStatusTable with assigned table prefix
func (a ImportListStatusTable) WithPrefix(prefix string) *ImportListStatusTable {
	return newImportListStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImportListStatusTable with assigned table suffix
func (a ImportListStatusTable) WithSuffix(suffix string) *ImportListStatusTable {
	return newImportListStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImportListStatusTable(schemaName, tableName, alias string) *ImportListStatusTable {
	return &ImportListStatusTable{
		importListStatusTable: newImportListStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newImportListStatusTableImpl("", "excluded", ""),
	}
}

func newImportListStatusTableImpl(schemaName, tableName, alias string) importListStatusTable {
	var (
		IDColumn                = sqlite.IntegerColumn("Id")
		ProviderIdColumn        = sqlite.IntegerColumn("ProviderId")
		InitialFailureColumn    = sqlite.TimestampColumn("InitialFailure")
		MostRecentFailureColumn = sqlite.TimestampColumn("MostRecentFailure")
		EscalationLevelColumn   = sqlite.IntegerColumn("EscalationLevel")
		DisabledTillColumn      = sqlite.TimestampColumn("DisabledTill")
		LastInfoSyncColumn      = sqlite.TimestampColumn("LastInfoSync")
		allColumns              = sqlite.ColumnList{IDColumn, ProviderIdColumn, InitialFailureColumn, MostRecentFailureColumn, EscalationLevelColumn, DisabledTillColumn, LastInfoSyncColumn}
		mutableColumns          = sqlite.ColumnList{ProviderIdColumn, InitialFailureColumn, MostRecentFailureColumn, EscalationLevelColumn, DisabledTillColumn, LastInfoSyncColumn}
	)

	return importListStatusTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		ProviderId:        ProviderIdColumn,
		InitialFailure:    InitialFailureColumn,
		MostRecentFailure: MostRecentFailureColumn,
		EscalationLevel:   EscalationLevelColumn,
		DisabledTill:      DisabledTillColumn,
		LastInfoSync:      LastInfoSyncColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
