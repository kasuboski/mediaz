//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var AlternativeTitles = newAlternativeTitlesTable("", "AlternativeTitles", "")

type alternativeTitlesTable struct {
	sqlite.Table

	// Columns
	ID              sqlite.ColumnInteger
	Title           sqlite.ColumnString
	CleanTitle      sqlite.ColumnString
	SourceType      sqlite.ColumnInteger
	MovieMetadataId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AlternativeTitlesTable struct {
	alternativeTitlesTable

	EXCLUDED alternativeTitlesTable
}

// AS creates new AlternativeTitlesTable with assigned alias
func (a AlternativeTitlesTable) AS(alias string) *AlternativeTitlesTable {
	return newAlternativeTitlesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AlternativeTitlesTable with assigned schema name
func (a AlternativeTitlesTable) FromSchema(schemaName string) *AlternativeTitlesTable {
	return newAlternativeTitlesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AlternativeTitlesTable with assigned table prefix
func (a AlternativeTitlesTable) WithPrefix(prefix string) *AlternativeTitlesTable {
	return newAlternativeTitlesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AlternativeTitlesTable with assigned table suffix
func (a AlternativeTitlesTable) WithSuffix(suffix string) *AlternativeTitlesTable {
	return newAlternativeTitlesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAlternativeTitlesTable(schemaName, tableName, alias string) *AlternativeTitlesTable {
	return &AlternativeTitlesTable{
		alternativeTitlesTable: newAlternativeTitlesTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newAlternativeTitlesTableImpl("", "excluded", ""),
	}
}

func newAlternativeTitlesTableImpl(schemaName, tableName, alias string) alternativeTitlesTable {
	var (
		IDColumn              = sqlite.IntegerColumn("Id")
		TitleColumn           = sqlite.StringColumn("Title")
		CleanTitleColumn      = sqlite.StringColumn("CleanTitle")
		SourceTypeColumn      = sqlite.IntegerColumn("SourceType")
		MovieMetadataIdColumn = sqlite.IntegerColumn("MovieMetadataId")
		allColumns            = sqlite.ColumnList{IDColumn, TitleColumn, CleanTitleColumn, SourceTypeColumn, MovieMetadataIdColumn}
		mutableColumns        = sqlite.ColumnList{TitleColumn, CleanTitleColumn, SourceTypeColumn, MovieMetadataIdColumn}
	)

	return alternativeTitlesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Title:           TitleColumn,
		CleanTitle:      CleanTitleColumn,
		SourceType:      SourceTypeColumn,
		MovieMetadataId: MovieMetadataIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
