//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var MovieTranslations = newMovieTranslationsTable("", "MovieTranslations", "")

type movieTranslationsTable struct {
	sqlite.Table

	// Columns
	ID              sqlite.ColumnInteger
	Title           sqlite.ColumnString
	CleanTitle      sqlite.ColumnString
	Overview        sqlite.ColumnString
	Language        sqlite.ColumnInteger
	MovieMetadataId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MovieTranslationsTable struct {
	movieTranslationsTable

	EXCLUDED movieTranslationsTable
}

// AS creates new MovieTranslationsTable with assigned alias
func (a MovieTranslationsTable) AS(alias string) *MovieTranslationsTable {
	return newMovieTranslationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MovieTranslationsTable with assigned schema name
func (a MovieTranslationsTable) FromSchema(schemaName string) *MovieTranslationsTable {
	return newMovieTranslationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MovieTranslationsTable with assigned table prefix
func (a MovieTranslationsTable) WithPrefix(prefix string) *MovieTranslationsTable {
	return newMovieTranslationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MovieTranslationsTable with assigned table suffix
func (a MovieTranslationsTable) WithSuffix(suffix string) *MovieTranslationsTable {
	return newMovieTranslationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMovieTranslationsTable(schemaName, tableName, alias string) *MovieTranslationsTable {
	return &MovieTranslationsTable{
		movieTranslationsTable: newMovieTranslationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newMovieTranslationsTableImpl("", "excluded", ""),
	}
}

func newMovieTranslationsTableImpl(schemaName, tableName, alias string) movieTranslationsTable {
	var (
		IDColumn              = sqlite.IntegerColumn("Id")
		TitleColumn           = sqlite.StringColumn("Title")
		CleanTitleColumn      = sqlite.StringColumn("CleanTitle")
		OverviewColumn        = sqlite.StringColumn("Overview")
		LanguageColumn        = sqlite.IntegerColumn("Language")
		MovieMetadataIdColumn = sqlite.IntegerColumn("MovieMetadataId")
		allColumns            = sqlite.ColumnList{IDColumn, TitleColumn, CleanTitleColumn, OverviewColumn, LanguageColumn, MovieMetadataIdColumn}
		mutableColumns        = sqlite.ColumnList{TitleColumn, CleanTitleColumn, OverviewColumn, LanguageColumn, MovieMetadataIdColumn}
	)

	return movieTranslationsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Title:           TitleColumn,
		CleanTitle:      CleanTitleColumn,
		Overview:        OverviewColumn,
		Language:        LanguageColumn,
		MovieMetadataId: MovieMetadataIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
