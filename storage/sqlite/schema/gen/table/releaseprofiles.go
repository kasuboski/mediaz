//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ReleaseProfiles = newReleaseProfilesTable("", "ReleaseProfiles", "")

type releaseProfilesTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Required  sqlite.ColumnString
	Ignored   sqlite.ColumnString
	Tags      sqlite.ColumnString
	Name      sqlite.ColumnString
	Enabled   sqlite.ColumnInteger
	IndexerId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ReleaseProfilesTable struct {
	releaseProfilesTable

	EXCLUDED releaseProfilesTable
}

// AS creates new ReleaseProfilesTable with assigned alias
func (a ReleaseProfilesTable) AS(alias string) *ReleaseProfilesTable {
	return newReleaseProfilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReleaseProfilesTable with assigned schema name
func (a ReleaseProfilesTable) FromSchema(schemaName string) *ReleaseProfilesTable {
	return newReleaseProfilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReleaseProfilesTable with assigned table prefix
func (a ReleaseProfilesTable) WithPrefix(prefix string) *ReleaseProfilesTable {
	return newReleaseProfilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReleaseProfilesTable with assigned table suffix
func (a ReleaseProfilesTable) WithSuffix(suffix string) *ReleaseProfilesTable {
	return newReleaseProfilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReleaseProfilesTable(schemaName, tableName, alias string) *ReleaseProfilesTable {
	return &ReleaseProfilesTable{
		releaseProfilesTable: newReleaseProfilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newReleaseProfilesTableImpl("", "excluded", ""),
	}
}

func newReleaseProfilesTableImpl(schemaName, tableName, alias string) releaseProfilesTable {
	var (
		IDColumn        = sqlite.IntegerColumn("Id")
		RequiredColumn  = sqlite.StringColumn("Required")
		IgnoredColumn   = sqlite.StringColumn("Ignored")
		TagsColumn      = sqlite.StringColumn("Tags")
		NameColumn      = sqlite.StringColumn("Name")
		EnabledColumn   = sqlite.IntegerColumn("Enabled")
		IndexerIdColumn = sqlite.IntegerColumn("IndexerId")
		allColumns      = sqlite.ColumnList{IDColumn, RequiredColumn, IgnoredColumn, TagsColumn, NameColumn, EnabledColumn, IndexerIdColumn}
		mutableColumns  = sqlite.ColumnList{RequiredColumn, IgnoredColumn, TagsColumn, NameColumn, EnabledColumn, IndexerIdColumn}
	)

	return releaseProfilesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Required:  RequiredColumn,
		Ignored:   IgnoredColumn,
		Tags:      TagsColumn,
		Name:      NameColumn,
		Enabled:   EnabledColumn,
		IndexerId: IndexerIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
