//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var MetadataFiles = newMetadataFilesTable("", "MetadataFiles", "")

type metadataFilesTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	MovieId      sqlite.ColumnInteger
	Consumer     sqlite.ColumnString
	Type         sqlite.ColumnInteger
	RelativePath sqlite.ColumnString
	LastUpdated  sqlite.ColumnTimestamp
	MovieFileId  sqlite.ColumnInteger
	Hash         sqlite.ColumnString
	Added        sqlite.ColumnTimestamp
	Extension    sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type MetadataFilesTable struct {
	metadataFilesTable

	EXCLUDED metadataFilesTable
}

// AS creates new MetadataFilesTable with assigned alias
func (a MetadataFilesTable) AS(alias string) *MetadataFilesTable {
	return newMetadataFilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MetadataFilesTable with assigned schema name
func (a MetadataFilesTable) FromSchema(schemaName string) *MetadataFilesTable {
	return newMetadataFilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MetadataFilesTable with assigned table prefix
func (a MetadataFilesTable) WithPrefix(prefix string) *MetadataFilesTable {
	return newMetadataFilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MetadataFilesTable with assigned table suffix
func (a MetadataFilesTable) WithSuffix(suffix string) *MetadataFilesTable {
	return newMetadataFilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMetadataFilesTable(schemaName, tableName, alias string) *MetadataFilesTable {
	return &MetadataFilesTable{
		metadataFilesTable: newMetadataFilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newMetadataFilesTableImpl("", "excluded", ""),
	}
}

func newMetadataFilesTableImpl(schemaName, tableName, alias string) metadataFilesTable {
	var (
		IDColumn           = sqlite.IntegerColumn("Id")
		MovieIdColumn      = sqlite.IntegerColumn("MovieId")
		ConsumerColumn     = sqlite.StringColumn("Consumer")
		TypeColumn         = sqlite.IntegerColumn("Type")
		RelativePathColumn = sqlite.StringColumn("RelativePath")
		LastUpdatedColumn  = sqlite.TimestampColumn("LastUpdated")
		MovieFileIdColumn  = sqlite.IntegerColumn("MovieFileId")
		HashColumn         = sqlite.StringColumn("Hash")
		AddedColumn        = sqlite.TimestampColumn("Added")
		ExtensionColumn    = sqlite.StringColumn("Extension")
		allColumns         = sqlite.ColumnList{IDColumn, MovieIdColumn, ConsumerColumn, TypeColumn, RelativePathColumn, LastUpdatedColumn, MovieFileIdColumn, HashColumn, AddedColumn, ExtensionColumn}
		mutableColumns     = sqlite.ColumnList{MovieIdColumn, ConsumerColumn, TypeColumn, RelativePathColumn, LastUpdatedColumn, MovieFileIdColumn, HashColumn, AddedColumn, ExtensionColumn}
	)

	return metadataFilesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		MovieId:      MovieIdColumn,
		Consumer:     ConsumerColumn,
		Type:         TypeColumn,
		RelativePath: RelativePathColumn,
		LastUpdated:  LastUpdatedColumn,
		MovieFileId:  MovieFileIdColumn,
		Hash:         HashColumn,
		Added:        AddedColumn,
		Extension:    ExtensionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
