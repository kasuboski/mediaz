//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Notifications = newNotificationsTable("", "Notifications", "")

type notificationsTable struct {
	sqlite.Table

	// Columns
	ID                          sqlite.ColumnInteger
	Name                        sqlite.ColumnString
	OnGrab                      sqlite.ColumnInteger
	OnDownload                  sqlite.ColumnInteger
	Settings                    sqlite.ColumnString
	Implementation              sqlite.ColumnString
	ConfigContract              sqlite.ColumnString
	OnUpgrade                   sqlite.ColumnInteger
	Tags                        sqlite.ColumnString
	OnRename                    sqlite.ColumnInteger
	OnHealthIssue               sqlite.ColumnInteger
	IncludeHealthWarnings       sqlite.ColumnInteger
	OnMovieDelete               sqlite.ColumnInteger
	OnMovieFileDelete           sqlite.ColumnInteger
	OnMovieFileDeleteForUpgrade sqlite.ColumnInteger
	OnApplicationUpdate         sqlite.ColumnInteger
	OnMovieAdded                sqlite.ColumnInteger
	OnHealthRestored            sqlite.ColumnInteger
	OnManualInteractionRequired sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type NotificationsTable struct {
	notificationsTable

	EXCLUDED notificationsTable
}

// AS creates new NotificationsTable with assigned alias
func (a NotificationsTable) AS(alias string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NotificationsTable with assigned schema name
func (a NotificationsTable) FromSchema(schemaName string) *NotificationsTable {
	return newNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NotificationsTable with assigned table prefix
func (a NotificationsTable) WithPrefix(prefix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NotificationsTable with assigned table suffix
func (a NotificationsTable) WithSuffix(suffix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNotificationsTable(schemaName, tableName, alias string) *NotificationsTable {
	return &NotificationsTable{
		notificationsTable: newNotificationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newNotificationsTableImpl("", "excluded", ""),
	}
}

func newNotificationsTableImpl(schemaName, tableName, alias string) notificationsTable {
	var (
		IDColumn                          = sqlite.IntegerColumn("Id")
		NameColumn                        = sqlite.StringColumn("Name")
		OnGrabColumn                      = sqlite.IntegerColumn("OnGrab")
		OnDownloadColumn                  = sqlite.IntegerColumn("OnDownload")
		SettingsColumn                    = sqlite.StringColumn("Settings")
		ImplementationColumn              = sqlite.StringColumn("Implementation")
		ConfigContractColumn              = sqlite.StringColumn("ConfigContract")
		OnUpgradeColumn                   = sqlite.IntegerColumn("OnUpgrade")
		TagsColumn                        = sqlite.StringColumn("Tags")
		OnRenameColumn                    = sqlite.IntegerColumn("OnRename")
		OnHealthIssueColumn               = sqlite.IntegerColumn("OnHealthIssue")
		IncludeHealthWarningsColumn       = sqlite.IntegerColumn("IncludeHealthWarnings")
		OnMovieDeleteColumn               = sqlite.IntegerColumn("OnMovieDelete")
		OnMovieFileDeleteColumn           = sqlite.IntegerColumn("OnMovieFileDelete")
		OnMovieFileDeleteForUpgradeColumn = sqlite.IntegerColumn("OnMovieFileDeleteForUpgrade")
		OnApplicationUpdateColumn         = sqlite.IntegerColumn("OnApplicationUpdate")
		OnMovieAddedColumn                = sqlite.IntegerColumn("OnMovieAdded")
		OnHealthRestoredColumn            = sqlite.IntegerColumn("OnHealthRestored")
		OnManualInteractionRequiredColumn = sqlite.IntegerColumn("OnManualInteractionRequired")
		allColumns                        = sqlite.ColumnList{IDColumn, NameColumn, OnGrabColumn, OnDownloadColumn, SettingsColumn, ImplementationColumn, ConfigContractColumn, OnUpgradeColumn, TagsColumn, OnRenameColumn, OnHealthIssueColumn, IncludeHealthWarningsColumn, OnMovieDeleteColumn, OnMovieFileDeleteColumn, OnMovieFileDeleteForUpgradeColumn, OnApplicationUpdateColumn, OnMovieAddedColumn, OnHealthRestoredColumn, OnManualInteractionRequiredColumn}
		mutableColumns                    = sqlite.ColumnList{NameColumn, OnGrabColumn, OnDownloadColumn, SettingsColumn, ImplementationColumn, ConfigContractColumn, OnUpgradeColumn, TagsColumn, OnRenameColumn, OnHealthIssueColumn, IncludeHealthWarningsColumn, OnMovieDeleteColumn, OnMovieFileDeleteColumn, OnMovieFileDeleteForUpgradeColumn, OnApplicationUpdateColumn, OnMovieAddedColumn, OnHealthRestoredColumn, OnManualInteractionRequiredColumn}
	)

	return notificationsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                          IDColumn,
		Name:                        NameColumn,
		OnGrab:                      OnGrabColumn,
		OnDownload:                  OnDownloadColumn,
		Settings:                    SettingsColumn,
		Implementation:              ImplementationColumn,
		ConfigContract:              ConfigContractColumn,
		OnUpgrade:                   OnUpgradeColumn,
		Tags:                        TagsColumn,
		OnRename:                    OnRenameColumn,
		OnHealthIssue:               OnHealthIssueColumn,
		IncludeHealthWarnings:       IncludeHealthWarningsColumn,
		OnMovieDelete:               OnMovieDeleteColumn,
		OnMovieFileDelete:           OnMovieFileDeleteColumn,
		OnMovieFileDeleteForUpgrade: OnMovieFileDeleteForUpgradeColumn,
		OnApplicationUpdate:         OnApplicationUpdateColumn,
		OnMovieAdded:                OnMovieAddedColumn,
		OnHealthRestored:            OnHealthRestoredColumn,
		OnManualInteractionRequired: OnManualInteractionRequiredColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
