//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Blocklist = newBlocklistTable("", "Blocklist", "")

type blocklistTable struct {
	sqlite.Table

	// Columns
	ID              sqlite.ColumnInteger
	SourceTitle     sqlite.ColumnString
	Quality         sqlite.ColumnString
	Date            sqlite.ColumnTimestamp
	PublishedDate   sqlite.ColumnTimestamp
	Size            sqlite.ColumnInteger
	Protocol        sqlite.ColumnInteger
	Indexer         sqlite.ColumnString
	Message         sqlite.ColumnString
	TorrentInfoHash sqlite.ColumnString
	MovieId         sqlite.ColumnInteger
	Languages       sqlite.ColumnString
	IndexerFlags    sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type BlocklistTable struct {
	blocklistTable

	EXCLUDED blocklistTable
}

// AS creates new BlocklistTable with assigned alias
func (a BlocklistTable) AS(alias string) *BlocklistTable {
	return newBlocklistTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlocklistTable with assigned schema name
func (a BlocklistTable) FromSchema(schemaName string) *BlocklistTable {
	return newBlocklistTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlocklistTable with assigned table prefix
func (a BlocklistTable) WithPrefix(prefix string) *BlocklistTable {
	return newBlocklistTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlocklistTable with assigned table suffix
func (a BlocklistTable) WithSuffix(suffix string) *BlocklistTable {
	return newBlocklistTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlocklistTable(schemaName, tableName, alias string) *BlocklistTable {
	return &BlocklistTable{
		blocklistTable: newBlocklistTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newBlocklistTableImpl("", "excluded", ""),
	}
}

func newBlocklistTableImpl(schemaName, tableName, alias string) blocklistTable {
	var (
		IDColumn              = sqlite.IntegerColumn("Id")
		SourceTitleColumn     = sqlite.StringColumn("SourceTitle")
		QualityColumn         = sqlite.StringColumn("Quality")
		DateColumn            = sqlite.TimestampColumn("Date")
		PublishedDateColumn   = sqlite.TimestampColumn("PublishedDate")
		SizeColumn            = sqlite.IntegerColumn("Size")
		ProtocolColumn        = sqlite.IntegerColumn("Protocol")
		IndexerColumn         = sqlite.StringColumn("Indexer")
		MessageColumn         = sqlite.StringColumn("Message")
		TorrentInfoHashColumn = sqlite.StringColumn("TorrentInfoHash")
		MovieIdColumn         = sqlite.IntegerColumn("MovieId")
		LanguagesColumn       = sqlite.StringColumn("Languages")
		IndexerFlagsColumn    = sqlite.IntegerColumn("IndexerFlags")
		allColumns            = sqlite.ColumnList{IDColumn, SourceTitleColumn, QualityColumn, DateColumn, PublishedDateColumn, SizeColumn, ProtocolColumn, IndexerColumn, MessageColumn, TorrentInfoHashColumn, MovieIdColumn, LanguagesColumn, IndexerFlagsColumn}
		mutableColumns        = sqlite.ColumnList{SourceTitleColumn, QualityColumn, DateColumn, PublishedDateColumn, SizeColumn, ProtocolColumn, IndexerColumn, MessageColumn, TorrentInfoHashColumn, MovieIdColumn, LanguagesColumn, IndexerFlagsColumn}
	)

	return blocklistTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		SourceTitle:     SourceTitleColumn,
		Quality:         QualityColumn,
		Date:            DateColumn,
		PublishedDate:   PublishedDateColumn,
		Size:            SizeColumn,
		Protocol:        ProtocolColumn,
		Indexer:         IndexerColumn,
		Message:         MessageColumn,
		TorrentInfoHash: TorrentInfoHashColumn,
		MovieId:         MovieIdColumn,
		Languages:       LanguagesColumn,
		IndexerFlags:    IndexerFlagsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
