//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Commands = newCommandsTable("", "Commands", "")

type commandsTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Name      sqlite.ColumnString
	Body      sqlite.ColumnString
	Priority  sqlite.ColumnInteger
	Status    sqlite.ColumnInteger
	QueuedAt  sqlite.ColumnTimestamp
	StartedAt sqlite.ColumnTimestamp
	EndedAt   sqlite.ColumnTimestamp
	Duration  sqlite.ColumnString
	Exception sqlite.ColumnString
	Trigger   sqlite.ColumnInteger
	Result    sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CommandsTable struct {
	commandsTable

	EXCLUDED commandsTable
}

// AS creates new CommandsTable with assigned alias
func (a CommandsTable) AS(alias string) *CommandsTable {
	return newCommandsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommandsTable with assigned schema name
func (a CommandsTable) FromSchema(schemaName string) *CommandsTable {
	return newCommandsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommandsTable with assigned table prefix
func (a CommandsTable) WithPrefix(prefix string) *CommandsTable {
	return newCommandsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommandsTable with assigned table suffix
func (a CommandsTable) WithSuffix(suffix string) *CommandsTable {
	return newCommandsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommandsTable(schemaName, tableName, alias string) *CommandsTable {
	return &CommandsTable{
		commandsTable: newCommandsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCommandsTableImpl("", "excluded", ""),
	}
}

func newCommandsTableImpl(schemaName, tableName, alias string) commandsTable {
	var (
		IDColumn        = sqlite.IntegerColumn("Id")
		NameColumn      = sqlite.StringColumn("Name")
		BodyColumn      = sqlite.StringColumn("Body")
		PriorityColumn  = sqlite.IntegerColumn("Priority")
		StatusColumn    = sqlite.IntegerColumn("Status")
		QueuedAtColumn  = sqlite.TimestampColumn("QueuedAt")
		StartedAtColumn = sqlite.TimestampColumn("StartedAt")
		EndedAtColumn   = sqlite.TimestampColumn("EndedAt")
		DurationColumn  = sqlite.StringColumn("Duration")
		ExceptionColumn = sqlite.StringColumn("Exception")
		TriggerColumn   = sqlite.IntegerColumn("Trigger")
		ResultColumn    = sqlite.IntegerColumn("Result")
		allColumns      = sqlite.ColumnList{IDColumn, NameColumn, BodyColumn, PriorityColumn, StatusColumn, QueuedAtColumn, StartedAtColumn, EndedAtColumn, DurationColumn, ExceptionColumn, TriggerColumn, ResultColumn}
		mutableColumns  = sqlite.ColumnList{NameColumn, BodyColumn, PriorityColumn, StatusColumn, QueuedAtColumn, StartedAtColumn, EndedAtColumn, DurationColumn, ExceptionColumn, TriggerColumn, ResultColumn}
	)

	return commandsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		Body:      BodyColumn,
		Priority:  PriorityColumn,
		Status:    StatusColumn,
		QueuedAt:  QueuedAtColumn,
		StartedAt: StartedAtColumn,
		EndedAt:   EndedAtColumn,
		Duration:  DurationColumn,
		Exception: ExceptionColumn,
		Trigger:   TriggerColumn,
		Result:    ResultColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
