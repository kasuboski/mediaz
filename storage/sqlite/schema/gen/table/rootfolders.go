//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var RootFolders = newRootFoldersTable("", "RootFolders", "")

type rootFoldersTable struct {
	sqlite.Table

	// Columns
	ID   sqlite.ColumnInteger
	Path sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type RootFoldersTable struct {
	rootFoldersTable

	EXCLUDED rootFoldersTable
}

// AS creates new RootFoldersTable with assigned alias
func (a RootFoldersTable) AS(alias string) *RootFoldersTable {
	return newRootFoldersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RootFoldersTable with assigned schema name
func (a RootFoldersTable) FromSchema(schemaName string) *RootFoldersTable {
	return newRootFoldersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RootFoldersTable with assigned table prefix
func (a RootFoldersTable) WithPrefix(prefix string) *RootFoldersTable {
	return newRootFoldersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RootFoldersTable with assigned table suffix
func (a RootFoldersTable) WithSuffix(suffix string) *RootFoldersTable {
	return newRootFoldersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRootFoldersTable(schemaName, tableName, alias string) *RootFoldersTable {
	return &RootFoldersTable{
		rootFoldersTable: newRootFoldersTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newRootFoldersTableImpl("", "excluded", ""),
	}
}

func newRootFoldersTableImpl(schemaName, tableName, alias string) rootFoldersTable {
	var (
		IDColumn       = sqlite.IntegerColumn("Id")
		PathColumn     = sqlite.StringColumn("Path")
		allColumns     = sqlite.ColumnList{IDColumn, PathColumn}
		mutableColumns = sqlite.ColumnList{PathColumn}
	)

	return rootFoldersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Path: PathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
