//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ImportExclusions = newImportExclusionsTable("", "ImportExclusions", "")

type importExclusionsTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	TmdbId     sqlite.ColumnInteger
	MovieTitle sqlite.ColumnString
	MovieYear  sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ImportExclusionsTable struct {
	importExclusionsTable

	EXCLUDED importExclusionsTable
}

// AS creates new ImportExclusionsTable with assigned alias
func (a ImportExclusionsTable) AS(alias string) *ImportExclusionsTable {
	return newImportExclusionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImportExclusionsTable with assigned schema name
func (a ImportExclusionsTable) FromSchema(schemaName string) *ImportExclusionsTable {
	return newImportExclusionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImportExclusionsTable with assigned table prefix
func (a ImportExclusionsTable) WithPrefix(prefix string) *ImportExclusionsTable {
	return newImportExclusionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImportExclusionsTable with assigned table suffix
func (a ImportExclusionsTable) WithSuffix(suffix string) *ImportExclusionsTable {
	return newImportExclusionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImportExclusionsTable(schemaName, tableName, alias string) *ImportExclusionsTable {
	return &ImportExclusionsTable{
		importExclusionsTable: newImportExclusionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newImportExclusionsTableImpl("", "excluded", ""),
	}
}

func newImportExclusionsTableImpl(schemaName, tableName, alias string) importExclusionsTable {
	var (
		IDColumn         = sqlite.IntegerColumn("Id")
		TmdbIdColumn     = sqlite.IntegerColumn("TmdbId")
		MovieTitleColumn = sqlite.StringColumn("MovieTitle")
		MovieYearColumn  = sqlite.IntegerColumn("MovieYear")
		allColumns       = sqlite.ColumnList{IDColumn, TmdbIdColumn, MovieTitleColumn, MovieYearColumn}
		mutableColumns   = sqlite.ColumnList{TmdbIdColumn, MovieTitleColumn, MovieYearColumn}
	)

	return importExclusionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		TmdbId:     TmdbIdColumn,
		MovieTitle: MovieTitleColumn,
		MovieYear:  MovieYearColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
