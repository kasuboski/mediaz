//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var NamingConfig = newNamingConfigTable("", "NamingConfig", "")

type namingConfigTable struct {
	sqlite.Table

	// Columns
	ID                       sqlite.ColumnInteger
	MultiEpisodeStyle        sqlite.ColumnInteger
	ReplaceIllegalCharacters sqlite.ColumnInteger
	StandardMovieFormat      sqlite.ColumnString
	MovieFolderFormat        sqlite.ColumnString
	ColonReplacementFormat   sqlite.ColumnInteger
	RenameMovies             sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type NamingConfigTable struct {
	namingConfigTable

	EXCLUDED namingConfigTable
}

// AS creates new NamingConfigTable with assigned alias
func (a NamingConfigTable) AS(alias string) *NamingConfigTable {
	return newNamingConfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NamingConfigTable with assigned schema name
func (a NamingConfigTable) FromSchema(schemaName string) *NamingConfigTable {
	return newNamingConfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NamingConfigTable with assigned table prefix
func (a NamingConfigTable) WithPrefix(prefix string) *NamingConfigTable {
	return newNamingConfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NamingConfigTable with assigned table suffix
func (a NamingConfigTable) WithSuffix(suffix string) *NamingConfigTable {
	return newNamingConfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNamingConfigTable(schemaName, tableName, alias string) *NamingConfigTable {
	return &NamingConfigTable{
		namingConfigTable: newNamingConfigTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newNamingConfigTableImpl("", "excluded", ""),
	}
}

func newNamingConfigTableImpl(schemaName, tableName, alias string) namingConfigTable {
	var (
		IDColumn                       = sqlite.IntegerColumn("Id")
		MultiEpisodeStyleColumn        = sqlite.IntegerColumn("MultiEpisodeStyle")
		ReplaceIllegalCharactersColumn = sqlite.IntegerColumn("ReplaceIllegalCharacters")
		StandardMovieFormatColumn      = sqlite.StringColumn("StandardMovieFormat")
		MovieFolderFormatColumn        = sqlite.StringColumn("MovieFolderFormat")
		ColonReplacementFormatColumn   = sqlite.IntegerColumn("ColonReplacementFormat")
		RenameMoviesColumn             = sqlite.IntegerColumn("RenameMovies")
		allColumns                     = sqlite.ColumnList{IDColumn, MultiEpisodeStyleColumn, ReplaceIllegalCharactersColumn, StandardMovieFormatColumn, MovieFolderFormatColumn, ColonReplacementFormatColumn, RenameMoviesColumn}
		mutableColumns                 = sqlite.ColumnList{MultiEpisodeStyleColumn, ReplaceIllegalCharactersColumn, StandardMovieFormatColumn, MovieFolderFormatColumn, ColonReplacementFormatColumn, RenameMoviesColumn}
	)

	return namingConfigTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		MultiEpisodeStyle:        MultiEpisodeStyleColumn,
		ReplaceIllegalCharacters: ReplaceIllegalCharactersColumn,
		StandardMovieFormat:      StandardMovieFormatColumn,
		MovieFolderFormat:        MovieFolderFormatColumn,
		ColonReplacementFormat:   ColonReplacementFormatColumn,
		RenameMovies:             RenameMoviesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
