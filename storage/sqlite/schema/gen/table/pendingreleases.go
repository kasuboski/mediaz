//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var PendingReleases = newPendingReleasesTable("", "PendingReleases", "")

type pendingReleasesTable struct {
	sqlite.Table

	// Columns
	ID              sqlite.ColumnInteger
	Title           sqlite.ColumnString
	Added           sqlite.ColumnTimestamp
	Release         sqlite.ColumnString
	MovieId         sqlite.ColumnInteger
	ParsedMovieInfo sqlite.ColumnString
	Reason          sqlite.ColumnInteger
	AdditionalInfo  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type PendingReleasesTable struct {
	pendingReleasesTable

	EXCLUDED pendingReleasesTable
}

// AS creates new PendingReleasesTable with assigned alias
func (a PendingReleasesTable) AS(alias string) *PendingReleasesTable {
	return newPendingReleasesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PendingReleasesTable with assigned schema name
func (a PendingReleasesTable) FromSchema(schemaName string) *PendingReleasesTable {
	return newPendingReleasesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PendingReleasesTable with assigned table prefix
func (a PendingReleasesTable) WithPrefix(prefix string) *PendingReleasesTable {
	return newPendingReleasesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PendingReleasesTable with assigned table suffix
func (a PendingReleasesTable) WithSuffix(suffix string) *PendingReleasesTable {
	return newPendingReleasesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPendingReleasesTable(schemaName, tableName, alias string) *PendingReleasesTable {
	return &PendingReleasesTable{
		pendingReleasesTable: newPendingReleasesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newPendingReleasesTableImpl("", "excluded", ""),
	}
}

func newPendingReleasesTableImpl(schemaName, tableName, alias string) pendingReleasesTable {
	var (
		IDColumn              = sqlite.IntegerColumn("Id")
		TitleColumn           = sqlite.StringColumn("Title")
		AddedColumn           = sqlite.TimestampColumn("Added")
		ReleaseColumn         = sqlite.StringColumn("Release")
		MovieIdColumn         = sqlite.IntegerColumn("MovieId")
		ParsedMovieInfoColumn = sqlite.StringColumn("ParsedMovieInfo")
		ReasonColumn          = sqlite.IntegerColumn("Reason")
		AdditionalInfoColumn  = sqlite.StringColumn("AdditionalInfo")
		allColumns            = sqlite.ColumnList{IDColumn, TitleColumn, AddedColumn, ReleaseColumn, MovieIdColumn, ParsedMovieInfoColumn, ReasonColumn, AdditionalInfoColumn}
		mutableColumns        = sqlite.ColumnList{TitleColumn, AddedColumn, ReleaseColumn, MovieIdColumn, ParsedMovieInfoColumn, ReasonColumn, AdditionalInfoColumn}
	)

	return pendingReleasesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Title:           TitleColumn,
		Added:           AddedColumn,
		Release:         ReleaseColumn,
		MovieId:         MovieIdColumn,
		ParsedMovieInfo: ParsedMovieInfoColumn,
		Reason:          ReasonColumn,
		AdditionalInfo:  AdditionalInfoColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
