//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ScheduledTasks = newScheduledTasksTable("", "ScheduledTasks", "")

type scheduledTasksTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnInteger
	TypeName      sqlite.ColumnString
	Interval      sqlite.ColumnFloat
	LastExecution sqlite.ColumnTimestamp
	LastStartTime sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ScheduledTasksTable struct {
	scheduledTasksTable

	EXCLUDED scheduledTasksTable
}

// AS creates new ScheduledTasksTable with assigned alias
func (a ScheduledTasksTable) AS(alias string) *ScheduledTasksTable {
	return newScheduledTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScheduledTasksTable with assigned schema name
func (a ScheduledTasksTable) FromSchema(schemaName string) *ScheduledTasksTable {
	return newScheduledTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScheduledTasksTable with assigned table prefix
func (a ScheduledTasksTable) WithPrefix(prefix string) *ScheduledTasksTable {
	return newScheduledTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScheduledTasksTable with assigned table suffix
func (a ScheduledTasksTable) WithSuffix(suffix string) *ScheduledTasksTable {
	return newScheduledTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScheduledTasksTable(schemaName, tableName, alias string) *ScheduledTasksTable {
	return &ScheduledTasksTable{
		scheduledTasksTable: newScheduledTasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newScheduledTasksTableImpl("", "excluded", ""),
	}
}

func newScheduledTasksTableImpl(schemaName, tableName, alias string) scheduledTasksTable {
	var (
		IDColumn            = sqlite.IntegerColumn("Id")
		TypeNameColumn      = sqlite.StringColumn("TypeName")
		IntervalColumn      = sqlite.FloatColumn("Interval")
		LastExecutionColumn = sqlite.TimestampColumn("LastExecution")
		LastStartTimeColumn = sqlite.TimestampColumn("LastStartTime")
		allColumns          = sqlite.ColumnList{IDColumn, TypeNameColumn, IntervalColumn, LastExecutionColumn, LastStartTimeColumn}
		mutableColumns      = sqlite.ColumnList{TypeNameColumn, IntervalColumn, LastExecutionColumn, LastStartTimeColumn}
	)

	return scheduledTasksTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		TypeName:      TypeNameColumn,
		Interval:      IntervalColumn,
		LastExecution: LastExecutionColumn,
		LastStartTime: LastStartTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
