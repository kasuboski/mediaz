//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var CustomFormats = newCustomFormatsTable("", "CustomFormats", "")

type customFormatsTable struct {
	sqlite.Table

	// Columns
	ID                              sqlite.ColumnInteger
	Name                            sqlite.ColumnString
	Specifications                  sqlite.ColumnString
	IncludeCustomFormatWhenRenaming sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CustomFormatsTable struct {
	customFormatsTable

	EXCLUDED customFormatsTable
}

// AS creates new CustomFormatsTable with assigned alias
func (a CustomFormatsTable) AS(alias string) *CustomFormatsTable {
	return newCustomFormatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CustomFormatsTable with assigned schema name
func (a CustomFormatsTable) FromSchema(schemaName string) *CustomFormatsTable {
	return newCustomFormatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CustomFormatsTable with assigned table prefix
func (a CustomFormatsTable) WithPrefix(prefix string) *CustomFormatsTable {
	return newCustomFormatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CustomFormatsTable with assigned table suffix
func (a CustomFormatsTable) WithSuffix(suffix string) *CustomFormatsTable {
	return newCustomFormatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCustomFormatsTable(schemaName, tableName, alias string) *CustomFormatsTable {
	return &CustomFormatsTable{
		customFormatsTable: newCustomFormatsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newCustomFormatsTableImpl("", "excluded", ""),
	}
}

func newCustomFormatsTableImpl(schemaName, tableName, alias string) customFormatsTable {
	var (
		IDColumn                              = sqlite.IntegerColumn("Id")
		NameColumn                            = sqlite.StringColumn("Name")
		SpecificationsColumn                  = sqlite.StringColumn("Specifications")
		IncludeCustomFormatWhenRenamingColumn = sqlite.IntegerColumn("IncludeCustomFormatWhenRenaming")
		allColumns                            = sqlite.ColumnList{IDColumn, NameColumn, SpecificationsColumn, IncludeCustomFormatWhenRenamingColumn}
		mutableColumns                        = sqlite.ColumnList{NameColumn, SpecificationsColumn, IncludeCustomFormatWhenRenamingColumn}
	)

	return customFormatsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                              IDColumn,
		Name:                            NameColumn,
		Specifications:                  SpecificationsColumn,
		IncludeCustomFormatWhenRenaming: IncludeCustomFormatWhenRenamingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
