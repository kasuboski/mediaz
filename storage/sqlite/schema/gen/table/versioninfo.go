//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var VersionInfo = newVersionInfoTable("", "VersionInfo", "")

type versionInfoTable struct {
	sqlite.Table

	// Columns
	Version     sqlite.ColumnInteger
	AppliedOn   sqlite.ColumnTimestamp
	Description sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type VersionInfoTable struct {
	versionInfoTable

	EXCLUDED versionInfoTable
}

// AS creates new VersionInfoTable with assigned alias
func (a VersionInfoTable) AS(alias string) *VersionInfoTable {
	return newVersionInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VersionInfoTable with assigned schema name
func (a VersionInfoTable) FromSchema(schemaName string) *VersionInfoTable {
	return newVersionInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VersionInfoTable with assigned table prefix
func (a VersionInfoTable) WithPrefix(prefix string) *VersionInfoTable {
	return newVersionInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VersionInfoTable with assigned table suffix
func (a VersionInfoTable) WithSuffix(suffix string) *VersionInfoTable {
	return newVersionInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVersionInfoTable(schemaName, tableName, alias string) *VersionInfoTable {
	return &VersionInfoTable{
		versionInfoTable: newVersionInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newVersionInfoTableImpl("", "excluded", ""),
	}
}

func newVersionInfoTableImpl(schemaName, tableName, alias string) versionInfoTable {
	var (
		VersionColumn     = sqlite.IntegerColumn("Version")
		AppliedOnColumn   = sqlite.TimestampColumn("AppliedOn")
		DescriptionColumn = sqlite.StringColumn("Description")
		allColumns        = sqlite.ColumnList{VersionColumn, AppliedOnColumn, DescriptionColumn}
		mutableColumns    = sqlite.ColumnList{VersionColumn, AppliedOnColumn, DescriptionColumn}
	)

	return versionInfoTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version:     VersionColumn,
		AppliedOn:   AppliedOnColumn,
		Description: DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
