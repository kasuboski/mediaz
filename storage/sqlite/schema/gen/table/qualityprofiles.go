//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var QualityProfiles = newQualityProfilesTable("", "QualityProfiles", "")

type qualityProfilesTable struct {
	sqlite.Table

	// Columns
	ID                sqlite.ColumnInteger
	Name              sqlite.ColumnString
	Cutoff            sqlite.ColumnInteger
	Items             sqlite.ColumnString
	Language          sqlite.ColumnInteger
	FormatItems       sqlite.ColumnString
	UpgradeAllowed    sqlite.ColumnInteger
	MinFormatScore    sqlite.ColumnInteger
	CutoffFormatScore sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type QualityProfilesTable struct {
	qualityProfilesTable

	EXCLUDED qualityProfilesTable
}

// AS creates new QualityProfilesTable with assigned alias
func (a QualityProfilesTable) AS(alias string) *QualityProfilesTable {
	return newQualityProfilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QualityProfilesTable with assigned schema name
func (a QualityProfilesTable) FromSchema(schemaName string) *QualityProfilesTable {
	return newQualityProfilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QualityProfilesTable with assigned table prefix
func (a QualityProfilesTable) WithPrefix(prefix string) *QualityProfilesTable {
	return newQualityProfilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QualityProfilesTable with assigned table suffix
func (a QualityProfilesTable) WithSuffix(suffix string) *QualityProfilesTable {
	return newQualityProfilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQualityProfilesTable(schemaName, tableName, alias string) *QualityProfilesTable {
	return &QualityProfilesTable{
		qualityProfilesTable: newQualityProfilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newQualityProfilesTableImpl("", "excluded", ""),
	}
}

func newQualityProfilesTableImpl(schemaName, tableName, alias string) qualityProfilesTable {
	var (
		IDColumn                = sqlite.IntegerColumn("Id")
		NameColumn              = sqlite.StringColumn("Name")
		CutoffColumn            = sqlite.IntegerColumn("Cutoff")
		ItemsColumn             = sqlite.StringColumn("Items")
		LanguageColumn          = sqlite.IntegerColumn("Language")
		FormatItemsColumn       = sqlite.StringColumn("FormatItems")
		UpgradeAllowedColumn    = sqlite.IntegerColumn("UpgradeAllowed")
		MinFormatScoreColumn    = sqlite.IntegerColumn("MinFormatScore")
		CutoffFormatScoreColumn = sqlite.IntegerColumn("CutoffFormatScore")
		allColumns              = sqlite.ColumnList{IDColumn, NameColumn, CutoffColumn, ItemsColumn, LanguageColumn, FormatItemsColumn, UpgradeAllowedColumn, MinFormatScoreColumn, CutoffFormatScoreColumn}
		mutableColumns          = sqlite.ColumnList{NameColumn, CutoffColumn, ItemsColumn, LanguageColumn, FormatItemsColumn, UpgradeAllowedColumn, MinFormatScoreColumn, CutoffFormatScoreColumn}
	)

	return qualityProfilesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		Cutoff:            CutoffColumn,
		Items:             ItemsColumn,
		Language:          LanguageColumn,
		FormatItems:       FormatItemsColumn,
		UpgradeAllowed:    UpgradeAllowedColumn,
		MinFormatScore:    MinFormatScoreColumn,
		CutoffFormatScore: CutoffFormatScoreColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
