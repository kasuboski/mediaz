//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var DownloadHistory = newDownloadHistoryTable("", "DownloadHistory", "")

type downloadHistoryTable struct {
	sqlite.Table

	// Columns
	ID               sqlite.ColumnInteger
	EventType        sqlite.ColumnInteger
	MovieId          sqlite.ColumnInteger
	DownloadId       sqlite.ColumnString
	SourceTitle      sqlite.ColumnString
	Date             sqlite.ColumnTimestamp
	Protocol         sqlite.ColumnInteger
	IndexerId        sqlite.ColumnInteger
	DownloadClientId sqlite.ColumnInteger
	Release          sqlite.ColumnString
	Data             sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type DownloadHistoryTable struct {
	downloadHistoryTable

	EXCLUDED downloadHistoryTable
}

// AS creates new DownloadHistoryTable with assigned alias
func (a DownloadHistoryTable) AS(alias string) *DownloadHistoryTable {
	return newDownloadHistoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DownloadHistoryTable with assigned schema name
func (a DownloadHistoryTable) FromSchema(schemaName string) *DownloadHistoryTable {
	return newDownloadHistoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DownloadHistoryTable with assigned table prefix
func (a DownloadHistoryTable) WithPrefix(prefix string) *DownloadHistoryTable {
	return newDownloadHistoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DownloadHistoryTable with assigned table suffix
func (a DownloadHistoryTable) WithSuffix(suffix string) *DownloadHistoryTable {
	return newDownloadHistoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDownloadHistoryTable(schemaName, tableName, alias string) *DownloadHistoryTable {
	return &DownloadHistoryTable{
		downloadHistoryTable: newDownloadHistoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newDownloadHistoryTableImpl("", "excluded", ""),
	}
}

func newDownloadHistoryTableImpl(schemaName, tableName, alias string) downloadHistoryTable {
	var (
		IDColumn               = sqlite.IntegerColumn("Id")
		EventTypeColumn        = sqlite.IntegerColumn("EventType")
		MovieIdColumn          = sqlite.IntegerColumn("MovieId")
		DownloadIdColumn       = sqlite.StringColumn("DownloadId")
		SourceTitleColumn      = sqlite.StringColumn("SourceTitle")
		DateColumn             = sqlite.TimestampColumn("Date")
		ProtocolColumn         = sqlite.IntegerColumn("Protocol")
		IndexerIdColumn        = sqlite.IntegerColumn("IndexerId")
		DownloadClientIdColumn = sqlite.IntegerColumn("DownloadClientId")
		ReleaseColumn          = sqlite.StringColumn("Release")
		DataColumn             = sqlite.StringColumn("Data")
		allColumns             = sqlite.ColumnList{IDColumn, EventTypeColumn, MovieIdColumn, DownloadIdColumn, SourceTitleColumn, DateColumn, ProtocolColumn, IndexerIdColumn, DownloadClientIdColumn, ReleaseColumn, DataColumn}
		mutableColumns         = sqlite.ColumnList{EventTypeColumn, MovieIdColumn, DownloadIdColumn, SourceTitleColumn, DateColumn, ProtocolColumn, IndexerIdColumn, DownloadClientIdColumn, ReleaseColumn, DataColumn}
	)

	return downloadHistoryTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		EventType:        EventTypeColumn,
		MovieId:          MovieIdColumn,
		DownloadId:       DownloadIdColumn,
		SourceTitle:      SourceTitleColumn,
		Date:             DateColumn,
		Protocol:         ProtocolColumn,
		IndexerId:        IndexerIdColumn,
		DownloadClientId: DownloadClientIdColumn,
		Release:          ReleaseColumn,
		Data:             DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
