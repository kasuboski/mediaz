//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ImportListMovies = newImportListMoviesTable("", "ImportListMovies", "")

type importListMoviesTable struct {
	sqlite.Table

	// Columns
	ID              sqlite.ColumnInteger
	ListId          sqlite.ColumnInteger
	MovieMetadataId sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ImportListMoviesTable struct {
	importListMoviesTable

	EXCLUDED importListMoviesTable
}

// AS creates new ImportListMoviesTable with assigned alias
func (a ImportListMoviesTable) AS(alias string) *ImportListMoviesTable {
	return newImportListMoviesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImportListMoviesTable with assigned schema name
func (a ImportListMoviesTable) FromSchema(schemaName string) *ImportListMoviesTable {
	return newImportListMoviesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImportListMoviesTable with assigned table prefix
func (a ImportListMoviesTable) WithPrefix(prefix string) *ImportListMoviesTable {
	return newImportListMoviesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImportListMoviesTable with assigned table suffix
func (a ImportListMoviesTable) WithSuffix(suffix string) *ImportListMoviesTable {
	return newImportListMoviesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImportListMoviesTable(schemaName, tableName, alias string) *ImportListMoviesTable {
	return &ImportListMoviesTable{
		importListMoviesTable: newImportListMoviesTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newImportListMoviesTableImpl("", "excluded", ""),
	}
}

func newImportListMoviesTableImpl(schemaName, tableName, alias string) importListMoviesTable {
	var (
		IDColumn              = sqlite.IntegerColumn("Id")
		ListIdColumn          = sqlite.IntegerColumn("ListId")
		MovieMetadataIdColumn = sqlite.IntegerColumn("MovieMetadataId")
		allColumns            = sqlite.ColumnList{IDColumn, ListIdColumn, MovieMetadataIdColumn}
		mutableColumns        = sqlite.ColumnList{ListIdColumn, MovieMetadataIdColumn}
	)

	return importListMoviesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ListId:          ListIdColumn,
		MovieMetadataId: MovieMetadataIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
